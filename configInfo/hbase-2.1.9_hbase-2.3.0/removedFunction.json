{"org.apache.hadoop.hbase.security.AbstractHBaseSaslRpcClient":["evaluateChallenge(byte[])","createKerberosSaslClient(String[], String, String)","dispose()","getInitialResponse()","createDigestSaslClient(String[], String, CallbackHandler)","isComplete()"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputSaslHelper.EncryptHandler":["allocateBuffer(ChannelHandlerContext, ByteBuf, boolean)","encode(ChannelHandlerContext, ByteBuf, ByteBuf)"],"org.apache.hadoop.hbase.regionserver.MutableSegment":["first()","upsert(Cell, long, MemStoreSizing)","indexEntrySize()","add(Cell, boolean, MemStoreSizing)"],"org.apache.hadoop.hbase.client.ConnectionImplementation":["finalize()","locateRegion(TableName, byte[])","clearCaches(ServerName)","shutdownBatchPool(ExecutorService)","getAdmin()","locateRegion(byte[])","getAdminForMaster()","cacheLocation(TableName, RegionLocations)","getRpcControllerFactory()","getClient(ServerName)","getKeepAliveMasterService()","locateRegion(TableName, byte[], boolean, boolean, int)","getRegionLocation(TableName, byte[], boolean)","getNewRpcRetryingCallerFactory(Configuration)","hasCellBlockSupport()","getBufferedMutator(BufferedMutatorParams)","getHbck(ServerName)","getConnectionMetrics()","shutdownPools()","clearRegionCache(TableName)","checkClosed()","getNonceGenerator()","getRpcClient()","getMaster()","toString()","getMetaLookupPool()","getCurrentBatchPool()","relocateRegion(TableName, byte[], int)","getTableState(TableName)","isDeadServer(ServerName)","locateRegions(TableName, boolean, boolean)","getTableBuilder(TableName, ExecutorService)","getStatisticsTracker()","relocateRegion(TableName, byte[])","clearRegionCache(TableName, byte[])","clearRegionCache()","getThreadPool(int, int, String, BlockingQueue)","getConnectionConfiguration()","abort(String, Throwable)","retrieveClusterId()","isTableAvailable(TableName, byte[][])","getBackoffPolicy()","isTableEnabled(TableName)","deleteCachedRegionLocation(HRegionLocation)","getTable(TableName)","release(MasterServiceState)","getRpcRetryingCallerFactory()","isMasterRunning()","releaseMaster(MasterServiceState)","isTableDisabled(TableName)","getConfiguration()","isAborted()","setUseMetaReplicas(boolean)","locateRegionInMeta(TableName, byte[], boolean, boolean, int)","locateRegions(TableName)","closeMasterService(MasterServiceState)","injectNonceGeneratorForTesting(ClusterConnection, NonceGenerator)","resetMasterServiceState(MasterServiceState)","getBufferedMutator(TableName)","getAsyncProcess()","getRegionLocator(TableName)","close()","updateCachedLocations(TableName, byte[], byte[], Object, ServerName)","getBatchPool()","get(CompletableFuture)","cacheLocation(TableName, ServerName, HRegionLocation)","getNumberOfCachedRegionLocations(TableName)","locateRegion(TableName, byte[], boolean, boolean)","isClosed()","isKeepAliveMasterConnectedAndRunning(MasterServiceState)","closeMaster()","getCachedLocation(TableName, byte[])","getAdmin(ServerName)","getHbck()","updateCachedLocation(RegionInfo, ServerName, ServerName, long)","getCurrentMetaLookupPool()","locateMeta(TableName, boolean, int)"],"org.apache.hadoop.hbase.regionserver.StoreFileWriter.Builder":["withMaxKeyCount(long)","withShouldDropCacheBehind(boolean)","withOutputDir(Path)","withComparator(CellComparator)","withFileContext(HFileContext)","withFilePath(Path)","build()","withBloomType(BloomType)","withFavoredNodes(InetSocketAddress[])"],"org.apache.hadoop.hbase.security.HBaseSaslRpcServer.SaslGssCallbackHandler":["handle(Callback[])"],"org.apache.hadoop.hbase.master.procedure.EnableTableProcedure":["postEnable(MasterProcedureEnv, EnableTableState)","getState(int)","getTableOperationType()","setTableStateToEnabled(MasterProcedureEnv, TableName)","getNumberOfReplicasFromMeta(Connection, int, List)","getRegionFromMeta(Connection, List)","preEnable(MasterProcedureEnv, EnableTableState)","getStateId(EnableTableState)","getInitialState()","getTableName()","rollbackState(MasterProcedureEnv, EnableTableState)","deserializeStateData(ProcedureStateSerializer)","executeFromState(MasterProcedureEnv, EnableTableState)","serializeStateData(ProcedureStateSerializer)","isRollbackSupported(EnableTableState)","setTableStateToEnabling(MasterProcedureEnv, TableName)","runCoprocessorAction(MasterProcedureEnv, EnableTableState)","prepareEnable(MasterProcedureEnv)"],"org.apache.hadoop.hbase.io.hfile.bucket.FileIOEngine.FileWriteAccessor":["access(FileChannel, ByteBuffer, long)"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutput.AckHandler":["channelRead0(ChannelHandlerContext, PipelineAckProto)","userEventTriggered(ChannelHandlerContext, Object)","exceptionCaught(ChannelHandlerContext, Throwable)","channelInactive(ChannelHandlerContext)"],"org.apache.hadoop.hbase.master.normalizer.EmptyNormalizationPlan":["getType()","getInstance()","execute(Admin)"],"org.apache.hadoop.hbase.quotas.ThrottleSettings":["getProto()","getThrottleType()","getTimeUnit()","getQuotaType()","getSoftLimit()","validateTimedQuota(TimedQuota)","fromTimedQuota(String, TableName, String, ThrottleType, QuotaProtos.TimedQuota)","toString()","merge(QuotaSettings)","setupSetQuotaRequest(SetQuotaRequest.Builder)"],"org.apache.hadoop.hbase.zookeeper.ZNodePaths":["isAnyMetaReplicaZNode(String)","joinZNode(String, String)","toString()","getZNodeForReplica(int)","isDefaultMetaReplicaZnode(String)","isClientReadable(String)","getMetaReplicaIdFromZnode(String)"],"org.apache.hadoop.hbase.master.procedure.ModifyTableProcedure":["getState(int)","addRegionsToMeta(MasterProcedureEnv, TableDescriptor, List)","getTableOperationType()","completionCleanup(MasterProcedureEnv)","updateTableDescriptor(MasterProcedureEnv)","getStateId(ModifyTableState)","getInitialState()","getTableName()","initilize()","deleteFromFs(MasterProcedureEnv, TableDescriptor, TableDescriptor)","updateReplicaColumnsIfNeeded(MasterProcedureEnv, TableDescriptor, TableDescriptor)","getRegionInfoList(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","preModify(MasterProcedureEnv, ModifyTableState)","prepareModify(MasterProcedureEnv)","postModify(MasterProcedureEnv, ModifyTableState)","isRollbackSupported(ModifyTableState)","executeFromState(MasterProcedureEnv, ModifyTableState)","runCoprocessorAction(MasterProcedureEnv, ModifyTableState)","rollbackState(MasterProcedureEnv, ModifyTableState)"],"org.apache.hadoop.hbase.regionserver.Leases.Lease":["equals(Object)","getListener()","compareTo(Delayed)","getLeaseName()","resetExpirationTime()","hashCode()","getDelay(TimeUnit)"],"org.apache.hadoop.hbase.io.hfile.HFileBlockIndex.ByteArrayKeyBlockIndexReader":["isEmpty()","getRootBlockKey(int)","toString()","calculateHeapSizeForBlockKeys(long)","loadDataBlockWithScanInfo(Cell, HFileBlock, boolean, boolean, boolean, DataBlockEncoding)","initialize(int)","rootBlockContainingKey(Cell)","rootBlockContainingKey(byte[], int, int, CellComparator)","midkey()","add(byte[], long, int)"],"org.apache.hadoop.hbase.master.assignment.SplitTableRegionProcedure":["createDaughterRegions(MasterProcedureEnv)","getTableOperationType()","writeMaxSequenceIdFile(MasterProcedureEnv)","getDaughterRegionIdTimestamp(RegionInfo)","getRegionReplication(MasterProcedureEnv)","preSplitRegion(MasterProcedureEnv)","postSplitRegion(MasterProcedureEnv)","openParentRegion(MasterProcedureEnv)","prepareSplitRegion(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, SplitTableRegionState)","getSplitRow()","getProcedureMetrics(MasterProcedureEnv)","getParentRegion()","serializeStateData(ProcedureStateSerializer)","createAssignProcedures(int, MasterProcedureEnv, List, ServerName)","checkSplittable(MasterProcedureEnv, RegionInfo, byte[])","rollbackState(MasterProcedureEnv, SplitTableRegionState)","updateMeta(MasterProcedureEnv)","toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","getState(int)","splitStoreFile(HRegionFileSystem, byte[], HStoreFile)","createUnassignProcedures(MasterProcedureEnv, int)","preSplitRegionAfterMETA(MasterProcedureEnv)","createAssignProcedures(MasterProcedureEnv, int)","getStateId(SplitTableRegionState)","getInitialState()","postRollBackSplitRegion(MasterProcedureEnv)","splitStoreFiles(MasterProcedureEnv, HRegionFileSystem)","deserializeStateData(ProcedureStateSerializer)","hasRecoveredEdits(MasterProcedureEnv, RegionInfo)","isRollbackSupported(SplitTableRegionState)","preSplitRegionBeforeMETA(MasterProcedureEnv)","assertReferenceFileCount(FileSystem, int, Path)","getParentRegionServerName(MasterProcedureEnv)"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputSaslHelper":["createTransparentCryptoHelper28()","createEncryptor(Configuration, HdfsFileStatus, DFSClient)","getUserNameFromEncryptionKey(DataEncryptionKey)","createTransparentCryptoHelper27()","createSaslPropertiesForEncryption(String)","buildUsername(Token)","encryptionKeyToPassword(byte[])","createSaslAdaptor()","createPBHelper()","createTransparentCryptoHelper()","trySaslNegotiate(Configuration, Channel, DatanodeInfo, int, DFSClient, Token, Promise)","buildClientPassword(Token)","doSaslNegotiation(Configuration, Channel, int, String, char[], Map, Promise, DFSClient)"],"org.apache.hadoop.hbase.client.ServerStatisticTracker":["updateRegionStats(ServerName, byte[], RegionLoadStats)","create(Configuration)","getStats(ServerName)","getServerStatsForTesting(ServerName)"],"org.apache.hadoop.hbase.security.access.AccessController":["preDisableTable(ObserverContext, TableName)","preGetNamespaceDescriptor(ObserverContext, String)","preEnableTable(ObserverContext, TableName)","preGetProcedures(ObserverContext)","getEndpointObserver()","postModifyTable(ObserverContext, TableName, TableDescriptor)","prePrepareBulkLoad(ObserverContext)","preSetUserQuota(ObserverContext, String, String, GlobalQuotaSettings)","requireTablePermission(ObserverContext, String, TableName, byte[], byte[], Action[])","prePut(ObserverContext, Put, WALEdit, Durability)","preLockHeartbeat(ObserverContext, TableName, String)","requireGlobalPermission(ObserverContext, String, Action, String)","preDisableReplicationPeer(ObserverContext, String)","getAuthManager()","preSetTableQuota(ObserverContext, TableName, GlobalQuotaSettings)","preShutdown(ObserverContext)","preDeleteTable(ObserverContext, TableName)","preListDecommissionedRegionServers(ObserverContext)","preSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","preListSnapshot(ObserverContext, SnapshotDescription)","preCheckAndDeleteAfterRowLock(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Delete, boolean)","postGetTableDescriptors(ObserverContext, List, List, String)","preSetUserQuota(ObserverContext, String, GlobalQuotaSettings)","preCheckAndPutAfterRowLock(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Put, boolean)","preScannerNext(ObserverContext, InternalScanner, List, int, boolean)","postCreateReplicationEndPoint(ObserverContext, ReplicationEndpoint)","permissionGranted(String, User, Action, RegionCoprocessorEnvironment, Map)","preTableFlush(ObserverContext, TableName)","preScannerClose(ObserverContext, InternalScanner)","preModifyNamespace(ObserverContext, NamespaceDescriptor)","preRollWALWriterRequest(ObserverContext)","getUserPermissions(RpcController, AccessControlProtos.GetUserPermissionsRequest, RpcCallback)","preClose(ObserverContext, boolean)","preSetNamespaceQuota(ObserverContext, String, GlobalQuotaSettings)","postDelete(ObserverContext, Delete, WALEdit, Durability)","preCreateTable(ObserverContext, TableDescriptor, RegionInfo[])","checkCoveringPermission(User, OpType, RegionCoprocessorEnvironment, byte[], Map, long, Action[])","preBalance(ObserverContext)","getTableName(RegionCoprocessorEnvironment)","requireScannerOwner(InternalScanner)","preClearDeadServers(ObserverContext)","initialize(RegionCoprocessorEnvironment)","getRegionObserver()","preGetOp(ObserverContext, Get, List)","grant(RpcController, AccessControlProtos.GrantRequest, RpcCallback)","preGetReplicationPeerConfig(ObserverContext, String)","postTruncateTable(ObserverContext, TableName)","preListReplicationPeers(ObserverContext, String)","checkLockPermissions(ObserverContext, String, TableName, RegionInfo[], String)","preRequestLock(ObserverContext, String, TableName, RegionInfo[], String)","preCloneSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","postScannerClose(ObserverContext, InternalScanner)","makeFamilyMap(byte[], byte[])","preCreateNamespace(ObserverContext, NamespaceDescriptor)","requireGlobalPermission(ObserverContext, String, Action, TableName, Map)","postListNamespaceDescriptors(ObserverContext, List)","preAssign(ObserverContext, RegionInfo)","postDeleteTable(ObserverContext, TableName)","preSetSplitOrMergeEnabled(ObserverContext, boolean, MasterSwitchType)","isCellAuthorizationSupported(Configuration)","preIncrementAfterRowLock(ObserverContext, Increment)","checkForReservedTagPresence(User, Mutation)","preFlush(ObserverContext, FlushLifeCycleTracker)","preRestoreSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","start(CoprocessorEnvironment)","preAddReplicationPeer(ObserverContext, String, ReplicationPeerConfig)","permissionGranted(OpType, User, RegionCoprocessorEnvironment, Map, Action[])","preModifyTable(ObserverContext, TableName, TableDescriptor)","preAbortProcedure(ObserverContext, long)","preGetLocks(ObserverContext)","preAppendAfterRowLock(ObserverContext, Append)","preDecommissionRegionServers(ObserverContext, List, boolean)","preUpdateReplicationPeerConfig(ObserverContext, String, ReplicationPeerConfig)","postMutationBeforeWAL(ObserverContext, MutationType, Mutation, Cell, Cell)","preBulkLoadHFile(ObserverContext, List)","requireNamespacePermission(ObserverContext, String, String, TableName, Map, Action[])","preCompact(ObserverContext, Store, InternalScanner, ScanType, CompactionLifeCycleTracker, CompactionRequest)","preSetUserQuota(ObserverContext, String, TableName, GlobalQuotaSettings)","preScannerOpen(ObserverContext, Scan)","preGetTableDescriptors(ObserverContext, List, List, String)","addCellPermissions(byte[], Map)","preClearCompactionQueues(ObserverContext)","requirePermission(ObserverContext, String, Action)","preCheckAndDelete(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Delete, boolean)","preExecuteProcedures(ObserverContext)","getActiveUser(ObserverContext)","getRegion(RegionCoprocessorEnvironment)","postDeleteNamespace(ObserverContext, String)","preDelete(ObserverContext, Delete, WALEdit, Durability)","checkSystemOrSuperUser(User)","getServices()","preRemoveReplicationPeer(ObserverContext, String)","postAbortProcedure(ObserverContext)","preExists(ObserverContext, Get, boolean)","preIncrement(ObserverContext, Increment)","preCheckAndPut(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Put, boolean)","postPut(ObserverContext, Put, WALEdit, Durability)","revoke(RpcController, AccessControlProtos.RevokeRequest, RpcCallback)","requirePermission(ObserverContext, String, TableName, byte[], byte[], Action[])","preBatchMutate(ObserverContext, MiniBatchOperationInProgress)","preDeleteNamespace(ObserverContext, String)","postOpen(ObserverContext)","postEndpointInvocation(ObserverContext, Service, String, Message, Message.Builder)","postRollWALWriterRequest(ObserverContext)","postScannerFilterRow(ObserverContext, InternalScanner, Cell, boolean)","preUnassign(ObserverContext, RegionInfo, boolean)","preRecommissionRegionServer(ObserverContext, ServerName, List)","preCleanupBulkLoad(ObserverContext)","preAppend(ObserverContext, Append)","createACLTable(Admin)","requireAccess(ObserverContext, String, TableName, Action[])","postGetTableNames(ObserverContext, List, String)","preDeleteSnapshot(ObserverContext, SnapshotDescription)","hasFamilyQualifierPermission(User, Action, RegionCoprocessorEnvironment, Map)","requireNamespacePermission(ObserverContext, String, String, Action[])","preTruncateTable(ObserverContext, TableName)","getTableName(Region)","preMergeRegions(ObserverContext, RegionInfo[])","checkPermissions(RpcController, AccessControlProtos.CheckPermissionsRequest, RpcCallback)","preStopRegionServer(ObserverContext)","getMasterObserver()","preStopMaster(ObserverContext)","stop(CoprocessorEnvironment)","preMove(ObserverContext, RegionInfo, ServerName, ServerName)","getRegion()","postStartMaster(ObserverContext)","postScannerOpen(ObserverContext, Scan, RegionScanner)","preSplitRegion(ObserverContext, TableName, byte[])","internalPreRead(ObserverContext, Query, OpType)","preBalanceSwitch(ObserverContext, boolean)","postCompletedCreateTableAction(ObserverContext, TableDescriptor, RegionInfo[])","preEnableReplicationPeer(ObserverContext, String)","getRegionServerObserver()","preReplicateLogEntries(ObserverContext)","updateACL(RegionCoprocessorEnvironment, Map)","getBulkLoadObserver()","preEndpointInvocation(ObserverContext, Service, String, Message)","preOpen(ObserverContext)","preRegionOffline(ObserverContext, RegionInfo)"],"org.apache.hadoop.hbase.io.hfile.ChecksumUtil":["numChunks(long, int)","validateChecksum(ByteBuffer, String, long, int)","numBytes(long, int)","generateChecksums(byte[], int, int, byte[], int, ChecksumType, int)","reserveSpaceForChecksums(ByteArrayOutputStream, int, int)","generateExceptionForChecksumFailureForTest(boolean)"],"org.apache.hadoop.hbase.security.access.TablePermission":["hasTable()","implies(TableName, KeyValue, Action)","equals(Object)","matchesFamilyQualifier(TableName, byte[], byte[], Action)","toString()","implies(TableName, byte[], byte[], Action)","hasQualifier()","readFields(DataInput)","getQualifier()","hashCode()","getTableName()","getFamily()","implies(String, Action)","hasNamespace()","write(DataOutput)","hasFamily()","tableFieldsEqual(TablePermission)","setTableName(TableName)","matchesFamily(TableName, byte[], Action)","getNamespace()"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketCache.BucketEntry":["markForEvict()","offset()","setOffset(long)","getPriority()","access(long)","deserializerReference(UniqueIndexMap)","getRefCount()","decrementRefCountAndGet()","setDeserialiserReference(CacheableDeserializer, UniqueIndexMap)","incrementRefCountAndGet()","isMarkedForEvict()","getLength()","getCachedTime()"],"org.apache.hadoop.hbase.regionserver.StoreFileComparators.GetFileSize":["apply(HStoreFile)"],"org.apache.hadoop.hbase.wal.WALSplitter.WriterThread":["run()","doRun()","writeBuffer(RegionEntryBuffer)","finish()"],"org.apache.hadoop.hbase.wal.WALSplitter.BoundedLogWriterCreationOutputSink":["finishWritingAndClose()","append(RegionEntryBuffer)","executeCloseTask(CompletionService, List, List)","writeThenClose(RegionEntryBuffer)","getOutputCounts()","getNumberOfRecoveredRegions()"],"org.apache.hadoop.hbase.regionserver.StoreFileComparators.GetBulkTime":["apply(HStoreFile)"],"org.apache.hadoop.hbase.regionserver.HRegionServer":["closeRegionIgnoreErrors(RegionInfo, boolean)","canCreateBaseZNode()","reportRegionStateTransition(RegionStateTransitionContext)","getRegionServerSpaceQuotaManager()","getRpcServer()","getConfigurationManager()","getRegion(String)","initializeZooKeeper()","getWalRoller()","closeRegion(String, boolean, ServerName)","isShutDown()","waitForMasterActive()","getRegionServerCoprocessors()","execRegionServerService(RpcController, CoprocessorServiceRequest)","getFsTableDescriptors()","getCompactSplitThread()","startHeapMemoryManager()","getUseThisHostnameInstead(Configuration)","setupNetty(Configuration)","tryRegionServerReport(long, long)","getOnlineRegionsAsPrintableString()","getCoordinatedStateManager()","createClusterConnection()","getWriteRequestCount()","reportRegionSizesForQuotas(RegionSizeStore)","getExecutorService()","remoteProcedureComplete(long, Throwable)","getRegionServerAccounting()","createRegionServerStatusStub()","removeRegion(HRegion, ServerName)","getLeases()","setupClusterConnection()","sleep(long)","keepLooping()","movedRegionCleanerPeriod()","getOnlineRegion(byte[])","getRegion(byte[])","getWriteLock()","getWAL(RegionInfo)","setupWALAndReplication()","waitForServerOnline()","setAbortRequested()","getTableDescriptors()","getClusterConnection()","getMetaTableObserver()","createRpcServices()","checkFileSystem()","setupWindows(Configuration, ConfigurationManager)","getRegionByEncodedName(byte[], String)","updateRegionFavoredNodesMapping(String, List)","cleanMovedRegions()","getConnection()","getCacheConfig()","isAborted()","getMovedRegion(String)","createConnection(Configuration)","stopServiceThreads()","getWALFileSystem()","getRegionServerCoprocessorHost()","registerService(com.google.protobuf.Service)","getMasterAddressTracker()","kill()","isOnline()","stop(String, boolean, User)","getNumberOfOnlineRegions()","getRegions()","getOnlineTables()","getOnlineRegionsLocalContext()","unassign(byte[])","main(String[])","getServerName()","getReplicationSinkService()","getWALs()","shutdownWAL(boolean)","getLastSequenceId(byte[])","preRegistrationInitialization()","walRollRequestFinished()","removeFromMovedRegions(String)","sendShutdownInterrupt()","convertThrowableToIOE(Throwable, String)","closeMetaTableRegions(boolean)","onConfigurationChange(Configuration)","containsMetaTableRegions()","initializeThreads()","createRegionServerStatusStub(boolean)","getMetrics()","getCopyOfOnlineRegionsSortedByOffHeapSize()","reportFileArchivalForQuotas(TableName, Collection)","getCopyOfOnlineRegionsSortedByOnHeapSize()","getFlushPressure()","getRegionBlockLocations(String)","convertRegionSize(RegionInfo, Long)","createRegionLoad(HRegion, RegionLoad.Builder, RegionSpecifier.Builder)","closeUserRegions(boolean)","constructRegionServer(Class, Configuration)","getSecureBulkLoadManager()","getClusterId()","isClusterUp()","stop(String)","createRegionLoad(String)","isOnlineRegionsEmpty()","getCompactionPressure()","triggerFlushInPrimaryRegion(HRegion)","addRegion(HRegion)","reportForDuty()","getMyEphemeralNodePath()","getHeapMemoryManager()","getCompactionRequestor()","getRegionByEncodedName(String)","startServices()","putUpWebUI()","getRegions(TableName)","getThreadWakeFrequency()","getNonceManager()","updateConfiguration()","getFileSystem()","getFlushRequester()","toString()","isHealthy()","executeProcedure(long, RSProcedureCallable)","startReplicationService()","buildServerLoad(long, long)","run()","getRegionServerRpcQuotaManager()","abort(String, Throwable)","registerConfigurationObservers()","getWalGroupsReplicationStatus()","initializeMemStoreChunkCreator()","canUpdateTableDescriptor()","closeAndOfflineRegionForSplitOrMerge(List)","deleteMyEphemeralNode()","getReplicationSourceService()","getStartcode()","getChoreService()","createMyEphemeralNode()","getConfiguration()","isStopped()","cleanup(Throwable, String)","isHealthCheckerConfigured()","getRegionServerMetrics()","postOpenDeployTasks(PostOpenDeployContext)","getInfoServer()","handleReportForDutyResponse(RegionServerStartupResponse)","newReplicationInstance(String, Class, Configuration, HRegionServer, FileSystem, Path, Path, WALProvider)","isStopping()","getEventLoopGroupConfig()","blockAndCheckIfStopped(ZKNodeTracker)","clearRegionBlockCache(Region)","regionLock(List, String, Abortable)","abort(String)","getFlushThroughputController()","buildReportAndSend(RegionServerStatusService.BlockingInterface, RegionSizeStore)","waitOnAllRegionsToClose(boolean)","getRSRpcServices()","closeAllRegions(boolean)","getRootDir()","getWALRootDir()","getRegionsInTransitionInRS()","getZooKeeper()","getMetaTableLocator()","getProcessName()","configureInfoServer()","createNewReplicationInstance(Configuration, HRegionServer, FileSystem, Path, Path, WALProvider)","getDumpServlet()","getFavoredNodesForRegion(String)","initializeFileSystem()","login(UserProvider, String)","checkCodecs(Configuration)","buildRegionSpaceUseReportRequest(RegionSizeStore)","areAllUserRegionsOffline()","reportProcedureDone(ReportProcedureDoneRequest)","addToMovedRegions(String, ServerName, long)"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutput":["writeInt(int)","write(byte[])","flush0(CompletableFuture, boolean)","completed(Channel)","buffered()","write(ByteBuffer)","write(byte[], int, int)","getPipeline()","flush(boolean)","isBroken()","flushBuffer(CompletableFuture, ByteBuf, long, boolean)","recoverAndClose(CancelableProgressable)","failed(Channel, Supplier)","setupReceiver(int)","endBlock()","close()"],"org.apache.hadoop.hbase.io.hfile.bucket.FileMmapEngine":["read(long, int, CacheableDeserializer)","isPersistent()","sync()","toString()","write(ByteBuffer, long)","roundUp(long, long)","shutdown()","write(ByteBuff, long)"],"org.apache.hadoop.hbase.util.compaction.MajorCompactionRequest":["newRequest(Configuration, RegionInfo, Set, long)","setStores(Set)","toString()","getReferenceFilePaths(FileSystem, Path)","getFileSystem(Connection)","getStoresRequiringCompaction(Set)","getConnection(Configuration)","createRequest(Configuration, Set)","familyHasReferenceFile(HRegionFileSystem, String)","getStores()","getRegion()"],"org.apache.hadoop.hbase.master.balancer.BaseLoadBalancer":["getRegionAssignmentsByServer(Collection)","setRackManager(RackManager)","stop(String)","updateBalancerStatus(boolean)","isStopped()","getConf()","balanceMasterRegions(Map)","assignMasterSystemRegions(Collection, List)","setMasterServices(MasterServices)","areSomeRegionReplicasColocated(Cluster)","regionOnline(RegionInfo, ServerName)","createRegionFinder()","createCluster(List, Collection, boolean)","needsBalance(Cluster)","shouldBeOnMaster(RegionInfo)","retainAssignment(Map, List)","randomAssignment(Cluster, RegionInfo, List)","randomAssignment(RegionInfo, List)","setConf(Configuration)","setClusterMetrics(ClusterMetrics)","roundRobinAssignment(List, List)","postMasterStartupInitialize()","onConfigurationChange(Configuration)","setSlop(Configuration)","setClusterLoad(Map)","initialize()","regionOffline(RegionInfo)","roundRobinAssignment(Cluster, List, List, List, Map)","findIdleServers(List)"],"org.apache.hadoop.hbase.master.assignment.Util":["getRegionInfoResponse(MasterProcedureEnv, ServerName, RegionInfo)","getRegionInfoResponse(MasterProcedureEnv, ServerName, RegionInfo, boolean)"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputHelper":["endFileLease(DFSClient, long)","processWriteBlockResponse(Channel, DatanodeInfo, Promise, int)","createOutput(DistributedFileSystem, Path, boolean, boolean, short, long, EventLoopGroup, Class)","initialize(Configuration, Channel, DatanodeInfo, Enum, OpWriteBlockProto.Builder, int, DFSClient, Token, Promise)","connectToDataNodes(Configuration, DFSClient, String, LocatedBlock, long, long, BlockConstructionStage, DataChecksum, EventLoopGroup, Class)","createPBHelper()","shouldRetryCreate(RemoteException)","createFileCreator2()","createLeaseManager()","createChecksumCreater28(Method, Class)","createFileCreator3()","createFileCreator()","createPipelineAckStatusGetter()","beginFileLease(DFSClient, long)","requestWriteBlock(Channel, Enum, OpWriteBlockProto.Builder)","createChecksumCreater27(Method, Class)","createStorageTypeSetter()","getStatus(PipelineAckProto)","createBlockAdder()","createChecksum(DFSClient)","createChecksumCreater()","completeFile(DFSClient, ClientProtocol, String, String, ExtendedBlock, long)","createPipelineAckStatusGetter26()","createPipelineAckStatusGetter27()","createDFSClientAdaptor()","createOutput(DistributedFileSystem, String, boolean, boolean, short, long, EventLoopGroup, Class)","sleepIgnoreInterrupt(int)"],"org.apache.hadoop.hbase.regionserver.StoreFileComparators.GetSeqId":["apply(HStoreFile)"],"org.apache.hadoop.hbase.client.RegionInfoBuilder.MutableRegionInfo":["getShortNameToLog()","isMetaRegion()","checkReplicaId(int)","checkTableName(TableName)","getRegionName()","checkStartKey(byte[])","isSplitParent()","getStartKey()","hashCode()","getEncodedName()","getReplicaId()","compareTo(RegionInfo)","getRegionNameAsString()","generateHashCode(TableName, byte[], byte[], long, int, boolean, byte[])","containsRange(byte[], byte[])","setSplit(boolean)","equals(Object)","getTable()","containsRow(byte[])","toString()","getEndKey()","setOffline(boolean)","checkEndKey(byte[])","getRegionId()","isSplit()","getEncodedNameAsBytes()","isOffline()"],"org.apache.hadoop.hbase.mob.MobCacheConfig":["instantiateMobFileCache(Configuration)","getMobFileCache()"],"org.apache.hadoop.hbase.master.assignment.UnassignProcedure":["toStringClassDetails(StringBuilder)","remoteCallFailed(MasterProcedureEnv, RegionStateNode, IOException)","getTableOperationType()","updateTransition(MasterProcedureEnv, RegionStateNode)","getServer(MasterProcedureEnv)","reportTransition(MasterProcedureEnv, RegionStateNode, TransitionCode, long)","remoteCallBuild(MasterProcedureEnv, ServerName)","finishTransition(MasterProcedureEnv, RegionStateNode)","proceed(MasterProcedureEnv, RegionStateNode)","isRollbackSupported(RegionTransitionState)","isSafeToProceed(MasterProcedureEnv, RegionStateNode, IOException)","getProcedureMetrics(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","startTransition(MasterProcedureEnv, RegionStateNode)"],"org.apache.hadoop.hbase.replication.regionserver.RegionReplicaReplicationEndpoint.RegionReplicaOutputSink":["finishWritingAndClose()","append(RegionEntryBuffer)","getSkippedEditsCounter()","requiresReplication(TableName, List)","keepRegionEvent(Entry)","flush()","getOutputCounts()","getNumberOfRecoveredRegions()"],"org.apache.hadoop.hbase.regionserver.wal.WALUtil":["writeBulkLoadMarkerAndSync(WAL, NavigableMap, RegionInfo, WALProtos.BulkLoadDescriptor, MultiVersionConcurrencyControl)","writeMarker(WAL, NavigableMap, RegionInfo, WALEdit, MultiVersionConcurrencyControl)","writeCompactionMarker(WAL, NavigableMap, RegionInfo, CompactionDescriptor, MultiVersionConcurrencyControl)","writeFlushMarker(WAL, NavigableMap, RegionInfo, FlushDescriptor, boolean, MultiVersionConcurrencyControl)","getWALBlockSize(Configuration, FileSystem, Path)","writeRegionEventMarker(WAL, NavigableMap, RegionInfo, RegionEventDescriptor, MultiVersionConcurrencyControl)","doFullMarkerAppendTransaction(WAL, NavigableMap, RegionInfo, WALEdit, MultiVersionConcurrencyControl, boolean)","getWALBlockSize(Configuration, FileSystem, Path, boolean)"],"org.apache.hadoop.hbase.master.assignment.RegionStates.RegionStateNode":["offline()","toDescriptiveString()","getLastHost()","toShortString()","setLastHost(ServerName)","setOpenSeqNum(long)","isSystemTable()","getLastUpdate()","hashCode()","setRegionLocation(ServerName)","getProcedureEvent()","unsetProcedure(RegionTransitionProcedure)","toRegionState()","getRegionLocation()","getFormatVersion()","setState(State, State[])","getOpenSeqNum()","equals(Object)","getTable()","setProcedure(RegionTransitionProcedure)","getState()","toString()","getProcedure()","transitionState(State, State[])","isInState(State[])","isInTransition()","isStuck()","compareTo(RegionStateNode)","getRegionInfo()"],"org.apache.hadoop.hbase.master.procedure.ReopenTableRegionsProcedure":["getTableName()","getState(int)","getTableOperationType()","executeFromState(MasterProcedureEnv, ReopenTableRegionsState)","rollbackState(MasterProcedureEnv, ReopenTableRegionsState)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","getStateId(ReopenTableRegionsState)","setTimeoutFailure(MasterProcedureEnv)","createReopenProcedure(MasterProcedureEnv, HRegionLocation)","getInitialState()"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputSaslHelper.DecryptHandler":["channelRead0(ChannelHandlerContext, ByteBuf)"],"org.apache.hadoop.hbase.client.RawAsyncHBaseAdmin":["snapshot(SnapshotDescription)","newAdminCaller()","clearCompactionQueues(ServerName, Set)","listTableDescriptorsByNamespace(String)","clearBlockCache(TableName)","majorCompactRegionServer(ServerName)","deleteSnapshots()","removeReplicationPeerTableCFs(String, Map)","modifyTable(TableDescriptor)","compactRegion(byte[], byte[], boolean)","isCleanerChoreEnabled()","assign(byte[])","getClusterMetrics()","stopRegionServer(ServerName)","checkRegionsAndGetTableName(byte[], byte[])","listTableSnapshots(Pattern)","isSnapshotFinished(SnapshotDescription)","getCompactionStateForRegion(byte[])","listTableDescriptors(Pattern, boolean)","getQuota(QuotaFilter)","restoreSnapshot(String)","decommissionRegionServers(List, boolean)","getTableDescriptors(GetTableDescriptorsRequest)","getRegionLocation(byte[])","compareTableWithPeerCluster(TableName, TableDescriptor, ReplicationPeerDescription, AsyncAdmin)","isSplitOrMergeOn(MasterSwitchType)","restoreSnapshot(String, boolean)","setQuota(QuotaSettings)","verifySplitKeys(byte[][])","internalRestoreSnapshot(String, TableName)","shutdown()","deleteTableSnapshots(Pattern)","createTable(TableDescriptor, byte[][])","listReplicatedTableCFs()","execProcedure(String, String, Map)","removeReplicationPeer(String)","normalize()","updateConfiguration(ServerName)","deleteTable(TableName)","toEncodeRegionName(byte[])","getRegionInfo(byte[])","isProcedureFinished(String, String, Map)","procedureCall(PREQ, MasterRpcCall, Converter, ProcedureBiConsumer)","getSecurityCapabilities()","listSnapshots(Pattern)","listTableSnapshots(Pattern, Pattern)","getClusterMetrics(EnumSet)","isTableAvailable(TableName, Optional)","listDecommissionedRegionServers()","majorCompact(TableName, byte[], CompactType)","compareRegionsWithSplitKeys(List, byte[][])","compact(TableName, byte[], CompactType)","isTableDisabled(TableName)","runCatalogJanitor()","compactRegion(byte[])","isBalancerEnabled()","recommissionRegionServer(ServerName, List)","majorCompactRegion(byte[], byte[])","newMasterCaller()","listTableNames(Pattern, boolean)","rollWALWriter(ServerName)","modifyColumnFamily(TableName, ColumnFamilyDescriptor)","listNamespaceDescriptors()","newServerCaller()","clearBlockCache(ServerName, List)","addColumnFamily(TableName, ColumnFamilyDescriptor)","deleteColumnFamily(TableName, byte[])","deleteTableSnapshots(Pattern, Pattern)","balancerSwitch(boolean)","splitRegion(byte[])","compact(TableName, byte[], boolean, CompactType)","split(RegionInfo, byte[])","clearDeadServers(List)","truncateTable(TableName, boolean)","flush(TableName)","splitSwitch(boolean)","getRegions(ServerName)","modifyNamespace(NamespaceDescriptor)","compactRegionServer(ServerName)","mergeRegions(byte[], byte[], boolean)","getProcedureResult(long, CompletableFuture, int)","runCleanerChore()","appendReplicationPeerTableCFs(String, Map)","flush(ServerName, RegionInfo)","createTable(TableDescriptor, byte[], byte[], int)","majorCompactRegion(byte[])","cloneTableSchema(TableName, TableName, boolean)","split(TableName)","listReplicationPeers()","enableReplicationPeer(String)","getLastMajorCompactionTimestampForRegion(byte[])","getRegionMetrics(ServerName)","isCatalogJanitorEnabled()","getRegionMetrics(ServerName, TableName)","unassign(byte[], boolean)","waitProcedureResult(CompletableFuture)","getLastMajorCompactionTimestamp(TableName)","deleteSnapshot(String)","getLocks()","coprocessorService(Function, ServiceCaller)","getDescriptor(TableName)","execProcedureWithReturn(String, String, Map)","listReplicationPeers(ListReplicationPeersRequest)","getRegions(TableName)","getSplitKeys(byte[], byte[], int)","failedFuture(Throwable)","isSplitEnabled()","enableTableReplication(TableName)","compactRegion(byte[], byte[])","compact(ServerName, RegionInfo, boolean, byte[])","flushRegionServer(ServerName)","updateConfiguration()","isMasterInMaintenanceMode()","normalizerSwitch(boolean)","majorCompact(TableName, CompactType)","checkAndGetTableName(byte[], AtomicReference, CompletableFuture)","listTableNames(boolean)","createTable(TableDescriptor)","disableTable(TableName)","getCompletedSnapshots(Pattern)","move(byte[])","disableReplicationPeer(String)","listSnapshots()","getRegionMetrics(GetRegionLoadRequest, ServerName)","flushRegion(byte[])","getTableHRegionLocations(TableName)","isTableAvailable(TableName, byte[][])","catalogJanitorSwitch(boolean)","isTableEnabled(TableName)","deleteSnapshots(Pattern)","tableExists(TableName)","internalDeleteSnapshots(Pattern, Pattern)","setTableReplication(TableName, boolean)","getProcedures()","isNormalizerEnabled()","isMergeEnabled()","cloneSnapshot(String, TableName)","trySyncTableToPeerCluster(TableName, byte[][], ReplicationPeerDescription)","compact(TableName, CompactType)","cleanerChoreSwitch(boolean)","completeConditionalOnFuture(CompletableFuture, CompletableFuture)","adminCall(HBaseRpcController, AdminService.Interface, PREQ, AdminRpcCall, Converter)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","move(byte[], ServerName)","createNamespace(NamespaceDescriptor)","addReplicationPeer(String, ReplicationPeerConfig, boolean)","getReplicationPeerConfig(String)","listTableDescriptors(boolean)","offline(byte[])","abortProcedure(long, boolean)","mergeSwitch(boolean)","disableTableReplication(TableName)","getTableSplits(TableName)","moveRegion(MoveRegionRequest)","checkAndSyncTableToPeerClusters(TableName, byte[][])","enableTable(TableName)","getNamespaceDescriptor(String)","splitRegion(byte[], byte[])","restoreSnapshot(String, TableName, boolean)","completeExceptionally(CompletableFuture, Throwable)","isTableAvailable(TableName)","listReplicationPeers(Pattern)","createTable(TableName, CreateTableRequest)","internalDeleteSnapshot(SnapshotDescription)","split(TableName, byte[])","listTableNamesByNamespace(String)","compactRegionServer(ServerName, boolean)","stopMaster()","deleteNamespace(String)","setSplitOrMergeOn(boolean, MasterSwitchType)","getCompletedSnapshots(Pattern, Pattern)","coprocessorService(Function, ServiceCaller, ServerName)","getTableNames(GetTableNamesRequest)","getCompactionState(TableName, CompactType)","call(HBaseRpcController, MasterService.Interface, PREQ, MasterRpcCall, Converter)","balance(boolean)"],"org.apache.hadoop.hbase.master.procedure.RecoverMetaProcedure":["toStringClassDetails(StringBuilder)","getState(int)","completionCleanup(MasterProcedureEnv)","acquireLock(MasterProcedureEnv)","getStateId(MasterProcedureProtos.RecoverMetaState)","getInitialState()","prepare(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","isRunRequired()","handleRIT(MasterProcedureEnv, RegionInfo, ServerName)","rollbackState(MasterProcedureEnv, MasterProcedureProtos.RecoverMetaState)","releaseLock(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, MasterProcedureProtos.RecoverMetaState)"],"org.apache.hadoop.hbase.io.hfile.HFile.FileInfo":["read(DataInputStream)","parsePB(HFileProtos.FileInfoProto)","lastKey()","containsValue(Object)","hashCode()","comparator()","putAll(Map)","remove(Object)","values()","parseWritable(DataInputStream)","tailMap(byte[])","append(byte[], byte[], boolean)","firstKey()","put(byte[], byte[])","clear()","subMap(byte[], byte[])","equals(Object)","get(Object)","isEmpty()","headMap(byte[])","keySet()","entrySet()","write(DataOutputStream)","containsKey(Object)","size()"],"org.apache.hadoop.hbase.wal.WALSplitter.SinkWriter":["incrementSkippedEdits(int)","incrementNanoTime(long)","incrementEdits(int)"],"org.apache.hadoop.hbase.io.asyncfs.WrapperAsyncFSOutput":["write(byte[])","writeInt(int)","recoverAndClose(CancelableProgressable)","buffered()","write(byte[], int, int)","write(ByteBuffer)","getPipeline()","flush0(CompletableFuture, ByteArrayOutputStream, boolean)","flush(boolean)","isBroken()","close()"],"org.apache.hadoop.hbase.io.hfile.LruBlockCache":["calculateOverhead(long, long, int)","getBlockCaches()","assertCounterSanity(long, long)","singleSize()","isEvictionInProgress()","updateSizeMetrics(LruCachedBlock, boolean)","getCachedFileNamesForTest()","getFreeSize()","heapSize()","cacheBlock(BlockCacheKey, Cacheable, boolean)","evictBlock(LruCachedBlock, boolean)","getBlockCount()","getStats()","logStats()","getEncodingCountsForTest()","getCurrentSize()","getDataBlockCount()","getBlockTypeCountsForTest()","getOverhead()","getMaxSize()","getMapForTests()","toString()","getCurrentDataSize()","getEvictionThread()","acceptableSize()","shutdown()","memorySize()","evict()","setVictimCache(BlockCache)","containsBlock(BlockCacheKey)","clearCache()","evictBlocksByHfileName(String)","multiSize()","iterator()","setMaxSize(long)","cacheBlock(BlockCacheKey, Cacheable)","minSize()","runEviction()","evictBlock(BlockCacheKey)","getBlock(BlockCacheKey, boolean, boolean, boolean)","size()"],"org.apache.hadoop.hbase.security.visibility.VisibilityController":["preDisableTable(ObserverContext, TableName)","postInstantiateDeleteTracker(ObserverContext, DeleteTracker)","preAppend(ObserverContext, Append)","checkForReservedVisibilityTagPresence(Cell, Pair)","preModifyTable(ObserverContext, TableName, TableDescriptor)","checkCallingUserAuth()","postSetSplitOrMergeEnabled(ObserverContext, boolean, MasterSwitchType)","requireScannerOwner(InternalScanner)","addLabels(RpcController, VisibilityLabelsRequest, RpcCallback)","postMutationBeforeWAL(ObserverContext, MutationType, Mutation, Cell, Cell)","setAuths(RpcController, SetAuthsRequest, RpcCallback)","getRegionObserver()","preGetOp(ObserverContext, Get, List)","preScannerOpen(ObserverContext, Scan)","setExceptionResults(int, IOException, VisibilityLabelsResponse.Builder)","logResult(boolean, String, String, byte[], List, String)","getMasterObserver()","initVisibilityLabelService(RegionCoprocessorEnvironment)","stop(CoprocessorEnvironment)","postScannerClose(ObserverContext, InternalScanner)","buildException(Throwable)","prePrepareTimeStampForDeleteVersion(ObserverContext, Mutation, Cell, byte[], Get)","postStartMaster(ObserverContext)","checkForReservedVisibilityTagPresence(Cell)","postScannerOpen(ObserverContext, Scan, RegionScanner)","preScannerNext(ObserverContext, InternalScanner, List, int, boolean)","getServices()","listLabels(RpcController, ListLabelsRequest, RpcCallback)","isSystemOrSuperUser()","isCellAuthorizationSupported(Configuration)","preIncrement(ObserverContext, Increment)","removeReplicationVisibilityTag(List)","preBatchMutate(ObserverContext, MiniBatchOperationInProgress)","preScannerClose(ObserverContext, InternalScanner)","postOpen(ObserverContext)","clearAuths(RpcController, SetAuthsRequest, RpcCallback)","postScannerFilterRow(ObserverContext, InternalScanner, Cell, boolean)","start(CoprocessorEnvironment)","getAuths(RpcController, GetAuthsRequest, RpcCallback)"],"org.apache.hadoop.hbase.regionserver.MetricsRegionServer":["updateFlush(long, long, long)","createTableMetrics(Configuration)","updateSplitTime(long)","incrSplitRequest()","updatePut(TableName, long)","updateCheckAndDelete(long)","updateGet(TableName, long)","updateWriteQueryMeter(TableName, long)","getRegionServerWrapper()","incrementRegionSizeReportingChoreTime(long)","updateDeleteBatch(TableName, long)","updateIncrement(TableName, long)","getMetricsSource()","updateScanTime(TableName, long)","updateWriteQueryMeter(TableName)","updateAppend(TableName, long)","updateScanSize(TableName, long)","updateReplay(long)","updateReadQueryMeter(TableName)","incrSplitSuccess()","updateCheckAndPut(long)","incrementNumRegionSizeReportsSent(long)","updatePutBatch(TableName, long)","updateBulkLoad(long)","updateCompaction(boolean, long, int, int, long, long)","updateReadQueryMeter(TableName, long)","updateDelete(TableName, long)"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationSyncUp.DummyServer":["getChoreService()","getFileSystem()","stop(String)","getConnection()","getConfiguration()","isAborted()","createConnection(Configuration)","isStopped()","getZooKeeper()","getMetaTableLocator()","abort(String, Throwable)","getClusterConnection()","getCoordinatedStateManager()","isStopping()","getServerName()"],"org.apache.hadoop.hbase.regionserver.HRegion":["preProcess(RowProcessor, WALEdit)","requestCompaction(byte[], String, int, boolean, CompactionLifeCycleTracker)","flush(boolean)","getRegionDir(Path, String)","getMemStoreFlushSize()","checkMutationType(Mutation, byte[])","computeHDFSBlocksDistribution(Configuration, TableDescriptor, RegionInfo, Path)","openReadOnlyFileSystemHRegion(Configuration, FileSystem, Path, RegionInfo, TableDescriptor)","getTableDescriptor()","doAbortFlushToWAL(WAL, long, Map)","replayWALRegionEventMarker(RegionEventDescriptor)","equals(Object)","getHDFSBlocksDistribution()","rowIsInRange(RegionInfo, byte[], int, short)","getFilesystem()","refreshStoreFiles()","increment(Increment)","processRowsWithLocks(RowProcessor, long, long)","increment(Increment, long, long)","getCellComparator()","instantiateRegionScanner(Scan, List, long, long)","getReadRequestsCount()","close(boolean)","decrementCompactionsQueuedCount()","getScanner(Scan, List)","getWriteRequestsCount()","processRowsWithLocks(RowProcessor, long, long, long)","replayRecoveredEditsForPaths(long, FileSystem, NavigableSet, CancelableProgressable, Path)","getMemStoreHeapSize()","closeRegionOperation(Operation)","checkResources()","heapSize()","requestFlush0(FlushLifeCycleTracker)","replayRecoveredEditsIfAny(Map, CancelableProgressable, MonitoredTask)","registerService(com.google.protobuf.Service)","hashCode()","writeRegionCloseMarker(WAL)","restoreEdit(HStore, Cell, MemStoreSizing)","openHRegion(HRegion, CancelableProgressable)","getStoreFileList(byte[][])","getReplicationScope()","incMemStoreSize(long, long, long, int)","checkSplit()","getRowLock(byte[], boolean)","applyToMemStore(HStore, Cell, MemStoreSizing)","createRegionDir(Configuration, RegionInfo, Path)","getStore(Cell)","initializeRegionInternals(CancelableProgressable, MonitoredTask)","initialize(CancelableProgressable)","internalFlushCacheAndCommit(WAL, MonitoredTask, PrepareFlushResult, Collection)","onConfigurationChange(Configuration)","internalFlushcache(MonitoredTask)","checkReadsEnabled()","logFatLineOnFlush(Collection, long)","compactStore(byte[], ThroughputController)","warmupHRegion(RegionInfo, TableDescriptor, WAL, Configuration, RegionServerServices, CancelableProgressable)","isLoadingCfsOnDemandDefault()","hasMultipleColumnFamilies(Collection)","forceSplit(byte[])","lock(Lock, int)","getRowLockInternal(byte[], boolean, RowLock)","throwException(String, String)","setTableDescriptor(TableDescriptor)","getStoreFileOpenAndCloseThreadPool(String)","logRegionFiles()","replayFlushInStores(FlushDescriptor, PrepareFlushResult, boolean)","instantiateHStore(ColumnFamilyDescriptor)","getEffectiveDurability(Durability)","shouldFlushStore(HStore)","getMVCC()","getMemStoreDataSize()","getCompactionState()","setTimeoutForWriteLock(long)","batchMutate(Mutation[], long, long)","unblockUpdates()","recordMutationWithoutWal(Map)","checkFamilies(Collection)","getBaseConf()","doClose(boolean, MonitoredTask)","batchMutate(Mutation[], boolean, long, long)","getMemStoreOffHeapSize()","setCoprocessorHost(RegionCoprocessorHost)","bulkLoadHFiles(Collection, boolean, BulkLoadListener, boolean, List, boolean)","mutateRowsWithLocks(Collection, Collection, long, long)","requestFlush(FlushLifeCycleTracker)","getLockedRows()","startRegionOperation(Operation)","getCheckAndMutateChecksFailed()","openHRegion(Configuration, FileSystem, Path, Path, RegionInfo, TableDescriptor, WAL, RegionServerServices, CancelableProgressable)","initialize()","requestCompaction(String, int, boolean, CompactionLifeCycleTracker)","matches(CompareOperator, int)","compactStores()","doDropStoreMemStoreContentsForSeqId(HStore, long)","openHRegion(Path, RegionInfo, TableDescriptor, WAL, Configuration, RegionServerServices, CancelableProgressable)","openHRegion(CancelableProgressable)","incMemStoreSize(MemStoreSize)","prepareDeleteTimestamps(Mutation, Map, byte[])","checkEncryption()","writeRegionOpenMarker(WAL, long)","getCompactPriority()","checkReadOnly()","batchMutate(BatchOperation)","startBulkRegionOperation(boolean)","isFlushSize(MemStoreSize)","getScanner(Scan, List, long, long)","replayWALFlushStartMarker(FlushDescriptor)","getReadPoint(IsolationLevel)","getRegionServicesForStores()","isMergeable()","doWALAppend(WALEdit, Durability, List, long, long, long, long)","execService(com.google.protobuf.RpcController, CoprocessorServiceCall)","compact(CompactionContext, HStore, ThroughputController)","prepareDelete(Delete)","getWAL()","flushcache(boolean, boolean, FlushLifeCycleTracker)","dropPrepareFlushIfPossible()","decorateRegionConfiguration(Configuration)","reportCompactionRequestFailure()","doRegionCompactionPrep()","processRowsWithLocks(RowProcessor)","openHRegion(Configuration, FileSystem, Path, RegionInfo, TableDescriptor, WAL)","addRegionToSnapshot(SnapshotDescription, ForeignExceptionSnare)","get(Get)","updateDeleteLatestVersionTimestamp(Cell, Get, int, byte[])","replayRecoveredEdits(Path, Map, CancelableProgressable, FileSystem)","shouldForceSplit()","getStoreOpenAndCloseThreadPool(String)","checkTimestamps(Map, long)","updateCellTimestamps(Iterable, byte[])","get(Get, boolean, long, long)","incrementCompactionsQueuedCount()","setReadsEnabled(boolean)","doCheckAndRowMutate(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, RowMutations, Mutation)","closeRegionOperation()","getRegionInfo()","replayWALFlushCommitMarker(FlushDescriptor)","startRegionOperation()","setHTableSpecificConf()","worthPreFlushing()","getReadPoint()","checkAndMutate(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, Mutation)","doCoprocessorPreCall(Operation, Mutation)","decrMemStoreSize(long, long, long, int)","compact(CompactionContext, HStore, ThroughputController, User)","replayWALCompactionMarker(CompactionDescriptor, boolean, boolean, long)","reckonDelta(Cell, Cell, byte[], long, Mutation, Function)","get(Get, boolean)","checkNegativeMemStoreDataSize(long, long)","registerChildren(ConfigurationManager)","getWALRegionDir()","getScanner(Scan)","reportCompactionRequestEnd(boolean, int, long)","openHRegion(Configuration, FileSystem, Path, RegionInfo, TableDescriptor, WAL, RegionServerServices, CancelableProgressable)","shouldSyncWAL()","getSplitPolicy()","append(Append, long, long)","replayWALFlushMarker(FlushDescriptor, long)","rowIsInRange(RegionInfo, byte[])","initializeWarmup(CancelableProgressable)","isSplittable()","updateSequenceId(Iterable, long)","waitForFlushesAndCompactions()","openHRegion(RegionInfo, TableDescriptor, WAL, Configuration)","getBlockedRequestsCount()","instantiateRegionScanner(Scan, List)","openHRegion(Region, CancelableProgressable)","requestFlushIfNeeded()","getDataInMemoryWithoutWAL()","newHRegion(Path, WAL, FileSystem, Configuration, RegionInfo, TableDescriptor, RegionServerServices)","doProcessRowWithTimeout(RowProcessor, long, HRegion, List, WALEdit, long)","getOldestHfileTs(boolean)","setClosing(boolean)","getLongValue(Cell)","replayWALBulkLoadEventMarker(WALProtos.BulkLoadDescriptor)","getOpenSeqNum()","reckonDeltas(Operation, Mutation, Durability, Map, List)","close()","getOldestSeqIdOfStore(byte[])","getCheckAndMutateChecksPassed()","checkCompressionCodecs()","decrMemStoreSize(MemStoreSize)","batchMutate(Mutation[])","getRegionServerServices()","dropMemStoreContents()","createHRegion(RegionInfo, Path, Configuration, TableDescriptor, WAL)","getFilteredReadRequestsCount()","dropMemStoreContentsForSeqId(long, HStore)","getRegionFileSystem()","internalPrepareFlushCache(WAL, long, Collection, MonitoredTask, boolean, FlushLifeCycleTracker)","isClosed()","getPrepareFlushResult()","computeHDFSBlocksDistribution(Configuration, TableDescriptor, RegionInfo)","shouldFlush(StringBuilder)","prepareGet(Get)","getMaxStoreSeqId()","getMetrics()","getWalFileSystem()","reckonDeltasByStore(HStore, Operation, Mutation, Durability, long, List, List)","internalFlushcache(Collection, MonitoredTask, boolean, FlushLifeCycleTracker)","getEarliestFlushTimeForAllStores()","sort(List, CellComparator)","doDelta(Operation, Mutation, long, long, boolean)","requestFlush()","rewriteCellTags(Map, Mutation)","doBatchMutate(Mutation)","setCompleteSequenceId(RegionLoad.Builder)","doWALAppend(WALEdit, Durability, List, long, long, long)","isAllFamilies(Collection)","getCoprocessorHost()","isZeroLengthThenDelete(FileSystem, Path)","append(Append)","doWALAppend(WALEdit, Durability, long, long)","getOpenAndCloseThreadPool(int, String)","checkRow(byte[], String)","lock(Lock)","put(Put)","bulkLoadHFiles(Collection, boolean, BulkLoadListener)","hasReferences()","getStores()","getLoadStatistics()","waitForFlushes(long)","blockUpdates()","getMaxFlushedSeqId()","toString()","mutateRow(RowMutations)","getRowLock(byte[])","deregisterChildren(ConfigurationManager)","put(byte[], byte[], List)","sync(long, Durability)","waitForFlushes()","getReadLockCount()","checkClassLoading()","internalFlushcache(WAL, long, Collection, MonitoredTask, boolean, FlushLifeCycleTracker)","getNumMutationsWithoutWAL()","getStoreFiles()","get(Mutation, HStore, List, IsolationLevel, TimeRange)","clearSplit()","writeFlushRequestMarkerToWAL(WAL, boolean)","doSyncOfUnflushedWALChanges(WAL, RegionInfo)","replayWALFlushCannotFlushMarker(FlushDescriptor, long)","isClosing()","incrementFlushesQueuedCount()","delete(Delete)","createHRegion(RegionInfo, Path, Configuration, TableDescriptor, WAL, boolean)","delete(NavigableMap, Durability)","checkFamily(byte[])","isReadOnly()","openHRegion(Path, RegionInfo, TableDescriptor, WAL, Configuration)","applyToMemStore(HStore, List, boolean, MemStoreSizing)","refreshStoreFiles(boolean)","initializeStores(CancelableProgressable, MonitoredTask)","doMiniBatchMutate(BatchOperation)","getRegionWALFileSystem()","checkAndRowMutate(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, RowMutations)","checkTargetRegion(byte[], String, Object)","getSmallestReadPoint()","closeBulkRegionOperation()","batchReplay(MutationReplay[], long)","replayWALFlushAbortMarker(FlushDescriptor)","releaseRowLocks(List)","getStore(byte[])","areWritesEnabled()","metricsUpdateForGet(List, long)","getExplicitSplitPoint()","openHRegion(RegionInfo, TableDescriptor, WAL, Configuration, RegionServerServices, CancelableProgressable)","isAvailable()","reportCompactionRequestStart(boolean)","compact(boolean)","getNextSequenceId(WAL)"],"org.apache.hadoop.hbase.client.AsyncBatchRpcRetryingCaller":["removeErrors(Action)","getExtraContextForError(ServerName)","buildReq(Map, List, Map)","onComplete(Action, RegionRequest, int, ServerName, RegionResult, List, Throwable, MutableBoolean)","call()","addError(Action, Throwable, ServerName)","onError(Map, int, Throwable, ServerName)","send(Map, int)","failOne(Action, int, Throwable, long, String)","onComplete(Map, int, ServerName, MultiResponse)","tryResubmit(Stream, int, boolean)","addError(Iterable, Throwable, ServerName)","failAll(Stream, int, Throwable, ServerName)","remainingTimeNs()","failAll(Stream, int)","logException(int, Supplier, Throwable, ServerName)","groupAndSend(Stream, int)"],"org.apache.hadoop.hbase.regionserver.StoreFileComparators.GetMaxTimestamp":["apply(HStoreFile)"],"org.apache.hadoop.hbase.quotas.QuotaSettingsFactory":["fromUserQuotas(String, Quotas)","throttleUser(String, TableName, ThrottleType, long, TimeUnit)","fromSpace(TableName, String, SpaceQuota)","throttleUser(String, ThrottleType, long, TimeUnit)","limitNamespaceSpace(String, long, SpaceViolationPolicy)","fromTableQuotas(TableName, Quotas)","limitTableSpace(TableName, long, SpaceViolationPolicy)","fromUserQuotas(String, TableName, Quotas)","fromUserQuotas(String, String, Quotas)","fromQuotas(String, TableName, String, Quotas)","removeTableSpaceLimit(TableName)","unthrottleNamespace(String)","unthrottleUser(String)","unthrottleUser(String, String)","fromNamespaceQuotas(String, Quotas)","bypassGlobals(String, boolean)","unthrottleUser(String, TableName)","removeNamespaceSpaceLimit(String)","throttle(String, TableName, String, ThrottleType, long, TimeUnit)","throttleNamespace(String, ThrottleType, long, TimeUnit)","fromThrottle(String, TableName, String, QuotaProtos.Throttle)","throttleUser(String, String, ThrottleType, long, TimeUnit)","throttleTable(TableName, ThrottleType, long, TimeUnit)","unthrottleTable(TableName)"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputSaslHelper.SaslWrapHandler":["flush(ChannelHandlerContext)","close(ChannelHandlerContext, ChannelPromise)","write(ChannelHandlerContext, Object, ChannelPromise)","handlerAdded(ChannelHandlerContext)"],"org.apache.hadoop.hbase.regionserver.AbstractMemStore":["add(Iterable, MemStoreSizing)","upsert(Iterable, long, MemStoreSizing)","toString()","getSnapshot()","getConfiguration()","dump(Logger)","timeOfOldestEdit()","add(Cell, MemStoreSizing)","deepCopyIfNeeded(Cell)","maybeCloneWithAllocator(Cell, boolean)","setOldestEditTimeToNow()","addToScanners(List, long, List)","upsert(Cell, long, MemStoreSizing)","getComparator()","addToScanners(Segment, long, List)","getNextRow(Cell, NavigableSet)","internalAdd(Cell, boolean, MemStoreSizing)","resetActive()","getSnapshotSize()","getActive()","getLowest(Cell, Cell)","clearSnapshot(long)"],"org.apache.hadoop.hbase.master.assignment.RegionStateStore":["getRegionState(Result, int)","splitRegion(RegionInfo, RegionInfo, RegionInfo, ServerName)","getTableDescriptor(TableName)","mergeRegions(RegionInfo, RegionInfo[], ServerName)","updateUserRegionLocation(RegionInfo, State, ServerName, long, long)","updateRegionLocation(RegionInfo, State, Put)","getRegionServer(Result, int)","getRegionReplication(TableDescriptor)","hasGlobalReplicationScope(TableName)","hasGlobalReplicationScope(TableDescriptor)","getOpenSeqNumForParentRegion(RegionInfo)","visitMeta(RegionStateVisitor)","getStateColumn(int)","updateRegionLocation(RegionStates.RegionStateNode)","deleteRegions(List)","visitMetaEntry(RegionStateVisitor, Result)","updateMetaLocation(RegionInfo, ServerName, State)","deleteRegion(RegionInfo)","getServerNameColumn(int)"],"org.apache.hadoop.hbase.snapshot.SnapshotDescriptionUtils":["getWorkingSnapshotDir(SnapshotDescription, Path)","readSnapshotInfo(FileSystem, Path)","completeSnapshot(SnapshotDescription, Path, Path, FileSystem)","getCompletedSnapshotDir(SnapshotDescription, Path)","isSecurityAvailable(Configuration)","validate(SnapshotDescription, Configuration)","writeAclToSnapshotDescription(SnapshotDescription, Configuration)","getWorkingSnapshotDir(String, Path)","writeSnapshotInfo(SnapshotDescription, Path, FileSystem)","getMaxMasterTimeout(Configuration, SnapshotDescription.Type, long)","getCompletedSnapshotDir(Path, String)","getSnapshotRootDir(Path)","isSnapshotOwner(org.apache.hadoop.hbase.client.SnapshotDescription, User)","getWorkingSnapshotDir(Path)","getCompletedSnapshotDir(String, Path)","getSnapshotsDir(Path)"],"org.apache.hadoop.hbase.mob.MobFileCache":["closeFile(MobFile)","getAccessCount()","printStatistics()","getMissCount()","getHitRatio()","openFile(FileSystem, Path, MobCacheConfig)","evictFile(String)","shutdown()","getCacheSize()","getEvictedFileCount()","evict()"],"org.apache.hadoop.hbase.io.asyncfs.SendBufSizePredictor":["guess(int)","initialSize()"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.OpenRegionRemoteCall":["run()","sendRequest(ServerName, OpenRegionRequest)","remoteCallFailed(MasterProcedureEnv, IOException)"],"org.apache.hadoop.hbase.master.ServerManager":["getMinToStart()","getAverageLoad()","checkAndRecordNewServer(ServerName, ServerMetrics)","getVersionNumber(ServerName)","removeServerFromDrainList(ServerName)","clearDeadServersWithSameHostNameAndPortOfOnlineServer()","isRegionInServerManagerStates(RegionInfo)","getDrainingServersList()","recordNewServerWithLock(ServerName, ServerMetrics)","isClusterShutdown()","moveFromOnlineToDeadServers(ServerName)","updateLastFlushedSequenceIds(ServerName, ServerMetrics)","shutdownCluster()","letRegionServersShutdown()","waitForRegionServers(MonitoredTask)","getOnlineServers()","removeRegion(RegionInfo)","createDestinationServersList(List)","getOnlineServersList()","findDeadServersAndProcess(Set, Set)","getVersion(ServerName)","isServerDead(ServerName)","getLoad(ServerName)","expire(ServerName)","unregisterListener(ServerListener)","isServerOnline(ServerName)","checkClockSkew(ServerName, long)","countOfRegionServers()","removeRegions(List)","createDestinationServersList()","expireServer(ServerName)","checkIsDead(ServerName, String)","stop()","newRpcController()","getLastFlushedSequenceId(byte[])","sendRegionWarmup(ServerName, RegionInfo)","getOnlineServersListWithPredicator(List, Predicate)","getStrForMax(int)","addServerToDrainList(ServerName)","closeRegionSilentlyAndWait(ClusterConnection, ServerName, RegionInfo, long)","regionServerReport(ServerName, ServerMetrics)","getRsAdmin(ServerName)","regionServerStartup(RegionServerStartupRequest, int, String, InetAddress)","registerListener(ServerListener)","areDeadServersInProgress()","getRegionServersInZK(ZKWatcher)","findServerWithSameHostnamePortWithLock(ServerName)","getInfoPort(ServerName)","getDeadServers()"],"org.apache.hadoop.hbase.regionserver.wal.WALActionsListener":["postAppend(long, long, WALKey, WALEdit)","preLogRoll(Path, Path)","preLogArchive(Path, Path)","postLogArchive(Path, Path)","logCloseRequested()","logRollRequested(boolean)","postSync(long, int)","postLogRoll(Path, Path)","visitLogEntryBeforeWrite(WALKey, WALEdit)","visitLogEntryBeforeWrite(RegionInfo, WALKey, WALEdit)"],"org.apache.hadoop.hbase.tool.CanaryTool":["getSink(Configuration, Class)","checkZooKeeper()","getWriteFailures()","run(String[])","sniff(Admin, Sink, TableDescriptor, ExecutorService, TaskType, boolean, LongAdder)","setConf(Configuration)","runMonitor(String[])","getConf()","printUsageAndExit()","checkRegions(String[])","parseArgs(String[])","newMonitor(Connection, String[])","sniff(Admin, Sink, String, ExecutorService, TaskType, boolean, LongAdder)","checkRegionServers(String[])","getReadFailures()","populateReadTableTimeoutsMap(String)","main(String[])"],"org.apache.hadoop.hbase.quotas.NoopQuotaLimiter":["checkQuota(long, long, long, long)","grabQuota(long, long, long, long)","toString()","consumeWrite(long)","isBypass()","getReadAvailable()","get()","getWriteAvailable()","consumeRead(long)"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.RegionCloseOperation":["getDestinationServer()","setClosed(boolean)","buildCloseRegionRequest(ServerName)","isClosed()"],"org.apache.hadoop.hbase.master.assignment.MergeTableRegionsProcedure":["isRollbackSupported(MergeTableRegionsState)","holdLock(MasterProcedureEnv)","updateMetaForMergedRegions(MasterProcedureEnv)","getTableOperationType()","writeMaxSequenceIdFile(MasterProcedureEnv)","getStateId(MergeTableRegionsState)","getRegionReplication(MasterProcedureEnv)","preMergeRegionsCommit(MasterProcedureEnv)","prepareMergeRegion(MasterProcedureEnv)","getServerName(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, MergeTableRegionsState)","getProcedureMetrics(MasterProcedureEnv)","createMergedRegion(MasterProcedureEnv)","postRollBackMergeRegions(MasterProcedureEnv)","cleanupMergedRegion(MasterProcedureEnv)","serializeStateData(ProcedureStateSerializer)","preMergeRegions(MasterProcedureEnv)","createAssignProcedures(int, MasterProcedureEnv, List, ServerName)","checkRegionsToMerge(MasterProcedureEnv, RegionInfo[], boolean)","releaseLock(MasterProcedureEnv)","mergeStoreFiles(MasterProcedureEnv, HRegionFileSystem, Path)","toStringClassDetails(StringBuilder)","postMergeRegionsCommit(MasterProcedureEnv)","abort(MasterProcedureEnv)","isMergeable(MasterProcedureEnv, RegionState)","getState(int)","postCompletedMergeRegions(MasterProcedureEnv)","createMergedRegionInfo(RegionInfo[])","createUnassignProcedures(MasterProcedureEnv, int)","createAssignProcedures(MasterProcedureEnv, int)","acquireLock(MasterProcedureEnv)","rollbackCloseRegionsForMerge(MasterProcedureEnv)","hasRecoveredEdits(MasterProcedureEnv)","getInitialState()","getTableName()","deserializeStateData(ProcedureStateSerializer)","getMergedRegion()","setRegionStateToMerging(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, MergeTableRegionsState)"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketCache":["join()","blockEvicted(BlockCacheKey, BucketEntry, boolean)","getFreeSize()","getRefCount(BlockCacheKey)","getRAMQueueEntries(BlockingQueue, List)","sanityCheckConfigs()","getStats()","getIoEngine()","logStats()","checkIOErrorIsTolerated()","getCurrentSize()","isCacheEnabled()","cacheBlockWithWaitInternal(BlockCacheKey, Cacheable, boolean, boolean)","stopWriterThreads()","freeEntireBuckets(int)","getCurrentDataSize()","acceptableSize()","shutdown()","getMultiFactor()","evictBlock(BlockCacheKey, boolean)","startWriterThreads()","getAllocator()","getIOEngineFromName(String, long, String)","evictBlock(BlockCacheKey)","getBlock(BlockCacheKey, boolean, boolean, boolean)","getExtraFreeFactor()","returnBlock(BlockCacheKey, Cacheable)","getMemoryFactor()","getBlockCaches()","bucketSizesAboveThresholdCount(float)","heapSize()","cacheBlock(BlockCacheKey, Cacheable, boolean)","getSingleFactor()","getBlockCount()","getPartitionSize(float)","persistToFile()","getDataBlockCount()","freeSpace(String)","getMinFactor()","getMaxSize()","checkRamCache(BlockCacheKey)","cacheBlockWithWait(BlockCacheKey, Cacheable, boolean, boolean)","disableCache()","getAcceptableFactor()","evictBlocksByHfileName(String)","iterator()","getRealCacheSize()","cacheBlock(BlockCacheKey, Cacheable)","retrieveFromFile(int[])","size()"],"org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil":["mergeFrom(Message.Builder, InputStream)","toCacheEvictionStats(HBaseProtos.CacheEvictionStats)","toMutationNoData(MutationType, Mutation)","toRegionLocation(HRegionLocation)","mergeFrom(Message.Builder, CodedInputStream, int)","toMutationNoData(MutationType, Mutation, MutationProto.Builder)","toDelta(Function, ConsumerWithException, MutationProto, CellScanner)","toGet(MutationProto, CellScanner)","toPut(MutationProto)","createSnapshotType(SnapshotProtos.SnapshotDescription.Type)","toConsistency(Consistency)","toCellVisibility(byte[])","toRegionInfo(HBaseProtos.RegionInfo)","isPBMagicPrefix(byte[], int, int)","getStoreFiles(AdminService.BlockingInterface, byte[], byte[])","toComparator(ComparatorProtos.Comparator)","toReplicationLoadSource(ReplicationLoadSource)","getOnlineRegions(RpcController, AdminService.BlockingInterface)","toColumnFamilySchema(ColumnFamilyDescriptor)","toDelimitedByteArray(Message)","toViolationPolicy(QuotaProtos.SpaceViolationPolicy)","getMutationBuilderAndSetCommonFields(MutationType, Mutation, MutationProto.Builder)","toCellVisibility(CellVisibility)","toDelete(MutationProto, CellScanner)","toTableName(HBaseProtos.TableName)","toAuthorizations(ClientProtos.Authorizations)","toRegionInfo(org.apache.hadoop.hbase.client.RegionInfo)","toReplicationLoadSink(ReplicationLoadSink)","toCursor(Cursor)","toProtoQuotaScope(QuotaType)","toProtoViolationPolicy(SpaceViolationPolicy)","toMutation(MutationType, Mutation)","toDelete(MutationProto)","mergeFrom(Message.Builder, byte[])","closeRegion(RpcController, AdminService.BlockingInterface, ServerName, byte[])","toFilter(Filter)","toTableDescriptorList(ListTableDescriptorsByNamespaceResponse)","toTableNameList(List)","createCompactionState(CompactionState)","toText(Message)","toCompactionDescriptor(org.apache.hadoop.hbase.client.RegionInfo, byte[], byte[], List, List, Path)","toResult(ClientProtos.Result, CellScanner)","fromDeleteType(DeleteType)","toBytes(ByteString)","toResult(ClientProtos.Result)","toException(NameBytesPair)","getStoreFiles(RpcController, AdminService.BlockingInterface, byte[], byte[])","mergeFrom(Message.Builder, ByteString)","parseServerNameFrom(byte[])","toMutation(MutationType, Mutation, long)","toReplicationLoadSource(ClusterStatusProtos.ReplicationLoadSource)","getShortTextFormat(Message)","toThrottleType(QuotaProtos.ThrottleType)","mergeFrom(Message.Builder, InputStream, int)","toScanMetrics(ScanMetrics, boolean)","toPut(MutationProto, CellScanner)","wrap(ByteBuffer, int, int)","toIncrement(MutationProto, CellScanner)","getRegionLoadInfo(GetRegionLoadResponse)","createRegionLoadStats(ClientProtos.RegionLoadStats)","toTableSchema(TableDescriptor)","toMutation(MutationProto)","toProtoNamespaceDescriptor(NamespaceDescriptor)","toAuthorizations(byte[])","toResult(boolean, boolean)","getVersionInfo()","toComparator(ByteArrayComparable)","getSplitKeysArray(CreateTableRequest)","toSecurityCapabilityList(List)","createSnapshotDesc(SnapshotProtos.SnapshotDescription)","openRegion(RpcController, AdminService.BlockingInterface, ServerName, org.apache.hadoop.hbase.client.RegionInfo)","buildCloseRegionRequest(ServerName, byte[], ServerName)","toResultNoData(Result)","toMutation(MutationType, Mutation, MutationProto.Builder)","getOnlineRegions(AdminService.BlockingInterface)","toRegionEventDescriptor(EventType, org.apache.hadoop.hbase.client.RegionInfo, long, ServerName, Map)","createHBaseProtosSnapshotDesc(SnapshotDescription)","toCell(Cell)","toProtoTableName(TableName)","getTableNameArray(List)","createProtosSnapShotDescType(String)","toAppend(MutationProto, CellScanner)","toGet(Get)","toTimeRange(HBaseProtos.TimeRange)","toNamespaceDescriptorList(ListNamespaceDescriptorsResponse)","toMutationNoData(MutationType, Mutation, MutationProto.Builder, long)","toIOException(ServiceException)","buildProcedureDescription(String, String, Map)","lengthOfPBMagic()","getTotalRequestsCount(RegionLoad)","toServerNameList(List)","call(Callable)","toReadType(Scan.ReadType)","toCellVisibility(ClientProtos.CellVisibility)","toRegionLocation(HBaseProtos.RegionLocation)","toQuotaScope(QuotaProtos.QuotaType)","toTimeUnit(HBaseProtos.TimeUnit)","toLockJson(List)","toCursor(ClientProtos.Cursor)","expectPBMagicPrefix(byte[])","getStringForByteString(ByteString)","toTableRegionStatesCount(RegionStatesCount)","toServerName(ServerName)","toScanMetrics(byte[])","toServerName(HBaseProtos.ServerName)","toProtoTimeUnit(TimeUnit)","prependPBMagic(byte[])","toConsistency(ClientProtos.Consistency)","toAuthorizations(Authorizations)","toGet(ClientProtos.Get)","toReplicationLoadSink(ClusterStatusProtos.ReplicationLoadSink)","toSnapshotDescriptionList(GetCompletedSnapshotsResponse, Pattern)","handleRemoteException(Exception)","getRegionEncodedName(RegionSpecifier)","getRemoteException(ServiceException)","makeIOExceptionOfException(Exception)","isClassLoaderLoaded()","toScan(Scan)","toShortString(MutationProto)","toProtoThrottleType(ThrottleType)","toBulkLoadDescriptor(TableName, ByteString, Map, Map, long)","getRegionInfo(RpcController, AdminService.BlockingInterface, byte[])","getRegionInfos(GetOnlineRegionResponse)","toCompactionDescriptor(org.apache.hadoop.hbase.client.RegionInfo, byte[], List, List, Path)","toTableRegionStatesCount(ClusterStatusProtos.RegionStatesCount)","buildGetStoreFileRequest(byte[], byte[])","toQuotaScope(QuotaProtos.QuotaScope)","toTimeRange(TimeRange)","newServiceStub(Class, RpcChannel)","toCursor(Cell)","toScan(ClientProtos.Scan)","toFlushDescriptor(FlushAction, org.apache.hadoop.hbase.client.RegionInfo, long, Map)","getServerInfo(RpcController, AdminService.BlockingInterface)","toNamespaceDescriptor(HBaseProtos.NamespaceDescriptor)","toProtoSpaceQuota(long, SpaceViolationPolicy)","createCompactionState(GetRegionInfoResponse.CompactionState)","toDurability(ClientProtos.MutationProto.Durability)","toResult(Result)","warmupRegion(RpcController, AdminService.BlockingInterface, org.apache.hadoop.hbase.client.RegionInfo)","toOptionalTimestamp(MajorCompactionTimestampResponse)","isPBMagicPrefix(byte[])","toFilter(FilterProtos.Filter)","toBulkLoadDescriptor(TableName, ByteString, Map, Map, long, List, boolean)","toDurability(Durability)","toProtoQuotaScope(QuotaScope)","toDeleteType(KeyValue.Type)","toColumnFamilyDescriptor(ColumnFamilySchema)","createProtosSnapShotDescType(SnapshotType)","toByteArrayComparable(byte[])","toReadType(ClientProtos.Scan.ReadType)","toTableDescriptorList(GetTableDescriptorsResponse)","toRegionEventDescriptor(EventType, byte[], byte[], byte[], long, ServerName, Map)","mergeFrom(Message.Builder, byte[], int, int)","toCell(ExtendedCellBuilder, CellProtos.Cell)","toMutation(MutationType, Mutation, MutationProto.Builder, long)","toCacheEvictionStats(CacheEvictionStats)","toProcedureJson(List)","toTimedQuota(long, TimeUnit, QuotaScope)","mergeDelimitedFrom(Message.Builder, InputStream)","toTableDescriptor(TableSchema)","buildCloseRegionRequest(ServerName, byte[])"],"org.apache.hadoop.hbase.io.hfile.HFileReaderImpl.HFileScannerImpl":["updateCurrBlockRef(HFileBlock)","isSeeked()","next()","loadBlockAndSeekToKey(HFileBlock, Cell, boolean, Cell, boolean)","shipped()","readMvccVersion(int)","returnBlockToCache(HFileBlock)","getEffectiveDataBlockEncoding()","getKeyString()","getKVBufSize()","getCell()","isNextBlock()","compareKey(CellComparator, Cell)","getCurCellSerializedSize()","processFirstDataBlock()","positionThisBlockBuffer()","updateCurrentBlock(HFileBlock)","getValueString()","getReader()","getNextIndexedKey()","assertSeeked()","seekBefore(Cell)","getKey()","seekTo(Cell, boolean)","blockSeek(Cell, boolean)","checkKeyValueLen()","close()","seekTo(Cell)","toString()","positionForNextBlock()","getValue()","checkTagsLen()","reseekTo(Cell)","_readMvccVersion(int)","checkLen(int)","reset()","getFirstKeyCellInBlock(HFileBlock)","returnBlocks(boolean)","seekTo()","checkKeyLen(int)","readNextDataBlock()","readAndUpdateNewBlock(long)","setNonSeekedState()","readKeyValueLen()","_next()"],"org.apache.hadoop.hbase.regionserver.StoreFileScanner":["getScannersForStoreFiles(Collection, boolean, boolean, boolean, boolean, ScanQueryMatcher, long)","peek()","getFilePath()","getScannersForStoreFiles(Collection, boolean, boolean, boolean, boolean, long)","seek(Cell)","next()","requestSeek(Cell, boolean, boolean)","shipped()","seekToPreviousRow(Cell)","instrument()","seekToLastRow()","getScannersForStoreFiles(Collection, boolean, boolean, long)","shouldUseScanner(Scan, HStore, long)","getReader()","getNextIndexedKey()","seekAtOrAfter(HFileScanner, Cell)","close()","reseekAtOrAfter(HFileScanner, Cell)","isFileScanner()","realSeekDone()","toString()","isPrimaryReplica()","reseek(Cell)","getScannerOrder()","getComparator()","setCurrentCell(Cell)","enforceSeek()","getSeekCount()","getScannersForCompaction(Collection, boolean, long)","backwardSeek(Cell)","skipKVsNewerThanReadpoint()"],"org.apache.hadoop.hbase.regionserver.CompactingMemStore":["pushActiveToPipeline(MutableSegment)","isMemStoreFlushingInMemory()","getNextRow(Cell)","isSloppy()","getImmutableSegments()","heapSize()","setIndexType(IndexType)","hasImmutableSegments()","preFlushSeqIDEstimation()","getRegionServices()","getInmemoryFlushSize()","getStore()","getScanners(long)","getIndexType()","initInmemoryFlushSize(Configuration)","getPool()","swapCompactedSegments(VersionedSegmentsList, ImmutableSegment, boolean)","snapshot()","pushPipelineToSnapshot()","startReplayingFromWAL()","updateLowestUnflushedSequenceIdInWAL(boolean)","pushTailToSnapshot()","createList(int)","setCompositeSnapshot(boolean)","keySize()","checkActiveSize()","getSmallestReadPoint()","getFamilyNameInBytes()","getSegments()","getFamilyName()","getLastSegment()","pushToSnapshot(List)","debug()","shouldFlushInMemory()","stopReplayingFromWAL()","flattenOneSegment(long, MemStoreCompactionStrategy.Action)","flushInMemory()","createMemStoreCompactor(MemoryCompactionPolicy)","getFlushableSize()","stopCompaction()","size()"],"org.apache.hadoop.hbase.security.access.TableAuthManager.PermissionCache":["getUser(String)","getGroup(String)","putUser(String, T)","putGroup(String, T)","replaceGroup(String, Iterable)","getAllPermissions()","replaceUser(String, Iterable)"],"org.apache.hadoop.hbase.security.HBaseSaslRpcServer.SaslDigestCallbackHandler":["handle(Callback[])","getPassword(TokenIdentifier)"],"org.apache.hadoop.hbase.master.cleaner.LogCleaner.CleanerContext":["getTargetToClean()","createCleanerContext(FileStatus, long)","setResult(boolean)","getResult(long)"],"org.apache.hadoop.hbase.io.hfile.CombinedBlockCache":["returnBlock(BlockCacheKey, Cacheable)","getMaxSize()","getBlockCaches()","getCurrentDataSize()","shutdown()","getFreeSize()","heapSize()","getRefCount(BlockCacheKey)","cacheBlock(BlockCacheKey, Cacheable, boolean)","evictBlocksByHfileName(String)","getBlockCount()","getStats()","iterator()","setMaxSize(long)","cacheBlock(BlockCacheKey, Cacheable)","getCurrentSize()","getDataBlockCount()","evictBlock(BlockCacheKey)","getBlock(BlockCacheKey, boolean, boolean, boolean)","size()"],"org.apache.hadoop.hbase.io.hfile.HFileBlockIndex.CellBasedKeyBlockIndexReader":["isEmpty()","getRootBlockKey(int)","toString()","calculateHeapSizeForBlockKeys(long)","loadDataBlockWithScanInfo(Cell, HFileBlock, boolean, boolean, boolean, DataBlockEncoding)","initialize(int)","rootBlockContainingKey(Cell)","rootBlockContainingKey(byte[], int, int, CellComparator)","midkey()","add(byte[], long, int)"],"org.apache.hadoop.hbase.io.hfile.bucket.FileIOEngine.FileReadAccessor":["access(FileChannel, ByteBuffer, long)"],"org.apache.hadoop.hbase.client.AsyncRegistryFactory":["getRegistry(Configuration)"],"org.apache.hadoop.hbase.security.AbstractHBaseSaslRpcClient.SaslClientCallbackHandler":["handle(Callback[])"],"org.apache.hadoop.hbase.io.hfile.bucket.CachedEntryQueue":["add(Map.Entry)","cacheSize()","pollLast()","poll()"],"org.apache.hadoop.hbase.client.ZKAsyncRegistry":["getMasterProto(byte[])","tryComplete(MutableInt, HRegionLocation[], CompletableFuture)","getMetaRegionLocation(CompletableFuture, List)","getClusterId()","getAndConvert(String, Converter)","getMetaRegionLocation()","getMasterAddress()","getMetaProto(byte[])","getClusterId(byte[])","getStateAndServerName(ZooKeeperProtos.MetaRegionServer)","getZKClient()","close()"],"org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer.LoadCandidateGenerator":["generate(Cluster)","pickLeastLoadedServer(Cluster, int)","pickMostLoadedServer(Cluster, int)"],"org.apache.hadoop.hbase.ipc.CellBlockBuilder":["buildCellBlock(Codec, CompressionCodec, CellScanner, ByteBufAllocator)","createCellScannerReusingBuffers(Codec, CompressionCodec, ByteBuff)","decompress(CompressionCodec, ByteBuff)","createCellScanner(Codec, CompressionCodec, byte[])","decompress(CompressionCodec, byte[])","decompress(CompressionCodec, InputStream, int)","encodeCellsTo(OutputStream, CellScanner, Codec, CompressionCodec)","buildCellBlockStream(Codec, CompressionCodec, CellScanner, ByteBufferPool)","buildCellBlock(Codec, CompressionCodec, CellScanner)","buildCellBlock(Codec, CompressionCodec, CellScanner, OutputStreamSupplier)"],"org.apache.hadoop.hbase.master.cleaner.LogCleaner":["validate(Path)","getCleanerThreadTimeoutMsec()","onConfigurationChange(Configuration)","cleanup()","cancel(boolean)","getCleanerThreadCheckIntervalMsec()","getSizeOfCleaners()","deleteFiles(Iterable)","deleteFile()","createOldWalsCleaner(int)","interruptOldWALsCleaner()"],"org.apache.hadoop.hbase.regionserver.CellChunkImmutableSegment":["allocIndexChunks(int)","indexEntryOffHeapSize(boolean)","reinitializeCellSet(int, KeyValueScanner, CellSet, MemStoreCompactionStrategy.Action)","indexEntrySize()","initializeCellSet(int, MemStoreSegmentsIterator, MemStoreCompactionStrategy.Action)","canBeFlattened()","useIndexChunks(int)","copyCellIntoMSLAB(Cell)","calculateNumberOfChunks(int, int)","calcNumOfCellsInChunk(int)","createCellReference(ByteBufferKeyValue, ByteBuffer, int)","indexEntryOnHeapSize(boolean)"],"org.apache.hadoop.hbase.regionserver.HMobStore":["updateMobFlushedCellsSize(long)","readCell(List, String, Cell, boolean, long, boolean)","updateMobFlushedCellsCount(long)","getConfiguration()","getCellsSizeCompactedFromMob()","updateMobFlushCount()","getMobScanCellsCount()","updateMobScanCellsCount(long)","getMobScanCellsSize()","updateCellsSizeCompactedFromMob(long)","createDelFileWriterInTmp(Date, long, Compression.Algorithm, byte[])","getMobFlushedCellsSize()","createWriterInTmp(Date, long, Compression.Algorithm, byte[], boolean)","createStoreEngine(HStore, Configuration, CellComparator)","createWriterInTmp(String, Path, long, Compression.Algorithm, byte[], boolean)","getMobFlushCount()","createScanner(Scan, ScanInfo, NavigableSet, long)","getPath()","updateCellsCountCompactedFromMob(long)","resolve(Cell, boolean)","validateMobFile(Path)","createCacheConf(ColumnFamilyDescriptor)","getCellsCountCompactedToMob()","createWriterInTmp(MobFileName, Path, long, Compression.Algorithm, boolean)","commitFile(Path, Path)","getCellsCountCompactedFromMob()","updateCellsSizeCompactedToMob(long)","getMobFlushedCellsCount()","resolve(Cell, boolean, long, boolean)","getTempDir()","getCellsSizeCompactedToMob()","updateMobScanCellsSize(long)","getRefCellTags()","updateCellsCountCompactedToMob(long)"],"org.apache.hadoop.hbase.io.hfile.bucket.UnsafeSharedMemoryBucketEntry":["decrementRefCountAndGet()","markForEvict()","incrementRefCountAndGet()","isMarkedForEvict()","getRefCount()"],"org.apache.hadoop.hbase.quotas.QuotaTableUtil":["parseTableResult(TableName, Result, TableQuotasVisitor)","makeGetForSnapshotSize(TableName, String)","getNamespaceFromRowKey(byte[])","parseNamespaceResult(String, Result, NamespaceQuotasVisitor)","createPutForSpaceSnapshot(TableName, SpaceQuotaSnapshot)","getUserQuota(Connection, String, TableName)","getCurrentSnapshot(Connection, String)","parseResult(Result, QuotasVisitor)","createPutForSnapshotSize(TableName, String, long)","createPutForNamespaceSnapshotSize(String, long)","parseResultToCollection(Result, Collection)","getNamespaceSnapshotSize(Connection, String)","getQuotas(Connection, byte[], byte[])","isEmptyQuota(Quotas)","extractSnapshotSize(byte[], int, int)","getSettingsQualifierForUserTable(TableName)","makeFilter(QuotaFilter)","createScanForNamespaceSnapshotSizes()","getCurrentSnapshotFromQuotaTable(Connection, TableName)","createDeletesForExistingSnapshotsFromScan(Connection, Scan)","makeQuotaSnapshotScanForTable(TableName)","getRowKeyRegEx(byte[], String)","getUserRowKey(String)","getMasterReportedTableSizes(Connection)","getNamespaceRowKey(String)","getTableRowKeyRegex(String)","makeGetForNamespaceQuotas(String)","getSnapshotSizeQualifier(String)","quotasFromData(byte[], int, int)","makeGetForUserQuotas(String, Iterable, Iterable)","parseUserResult(Result, UserQuotasVisitor)","createScanForSpaceSnapshotSizes(TableName)","makeQuotaSnapshotGetForTable(TableName)","parseTableResult(Result, TableQuotasVisitor)","quotasFromData(byte[])","isNamespaceRowKey(byte[])","parseUserResult(String, Result, UserQuotasVisitor)","getUserQuota(Connection, String)","isTableRowKey(byte[])","doGet(Connection, Get)","getUserFromRowKey(byte[])","makeQuotaSnapshotScan()","getNamespaceSnapshots(Connection)","doGet(Connection, List)","createGetNamespaceSnapshotSize(String)","parseSnapshotSize(Cell)","createDeletesForExistingNamespaceSnapshotSizes(Connection)","createDeletesForExistingNamespaceSnapshotSizes(Set)","createScanForNamespaceSnapshotSizes(String)","getSettingsQualifierRegexForUserTable(String)","parseNamespaceResult(Result, NamespaceQuotasVisitor)","getUserRowKeyRegex(String)","quotasToData(Quotas)","makeGetForTableQuotas(TableName)","getSnapshots(Connection)","getTableRowKey(TableName)","getProtoViolationPolicy(SpaceViolationPolicy)","getObservedSnapshotSizes(Connection)","getSettingsQualifierForUserNamespace(String)","getCurrentSnapshot(Connection, TableName)","getQuotas(Connection, byte[])","extractQuotaSnapshot(Result, Map)","getUserQuota(Connection, String, String)","getViolationPolicy(SpaceQuota)","getNamespaceQuota(Connection, String)","getRegionServerQuotaSnapshots(Connection, ServerName)","createScanForSpaceSnapshotSizes()","getSettingsQualifierRegexForUserNamespace(String)","makeScan(QuotaFilter)","getNamespaceRowKeyRegex(String)","getTableFromRowKey(byte[])","isUserRowKey(byte[])","getTableSnapshots(Connection)","createDeletesForExistingTableSnapshotSizes(Connection)","getTableQuota(Connection, TableName)","createDeletesForExistingTableSnapshotSizes(Multimap)","extractSnapshotNameFromSizeCell(Cell)"],"org.apache.hadoop.hbase.io.hfile.HFileBlockIndex.BlockIndexReader":["binarySearchNonRootIndex(Cell, ByteBuff, CellComparator)","readRootIndex(HFileBlock, int)","getRootBlockCount()","rootBlockContainingKey(byte[], int, int)","readMultiLevelIndexRoot(HFileBlock, int)","heapSize()","seekToDataBlock(Cell, HFileBlock, boolean, boolean, boolean, DataBlockEncoding)","readRootIndex(DataInput, int)","ensureNonEmpty()","getNonRootIndexedKey(ByteBuff, int)","getRootBlockDataSize(int)","locateNonRootIndexEntry(ByteBuff, Cell, CellComparator)","getRootBlockOffset(int)"],"org.apache.hadoop.hbase.regionserver.LogRoller":["run()","scheduleFlush(String)","checkLowReplication(long)","abort(String, Throwable)","addWAL(WAL)","walRollFinished()","requestRollAll()","close()"],"org.apache.hadoop.hbase.client.HTable":["batchCoprocessorService(Descriptors.MethodDescriptor, Message, byte[], byte[], R, Callback)","getDefaultExecutor(Configuration)","getScanner(byte[], byte[])","setReadRpcTimeout(int)","get(List)","batch(List, Object[])","checkAndMutate(byte[], byte[], byte[], CompareOperator, byte[], RowMutations)","validatePut(Put, int)","getName()","getTableDescriptor()","append(Append)","getPool()","incrementColumnValue(byte[], byte[], byte[], long)","put(Put)","get(Get, boolean)","getReadRpcTimeout()","put(List)","incrementColumnValue(byte[], byte[], byte[], long, Durability)","checkAndDelete(byte[], byte[], byte[], CompareOp, byte[], Delete)","batch(List, Object[], int)","coprocessorService(Class, byte[], byte[], Batch.Call)","toString()","getScanner(Scan)","mutateRow(RowMutations)","getWriteRpcTimeout()","getStartKeysInRange(byte[], byte[])","validatePut(Put)","increment(Increment)","checkAndMutate(byte[], byte[], byte[], CompareOp, byte[], RowMutations)","clearRegionCache()","getRegionLocator()","getRpcTimeout()","doCheckAndPut(byte[], byte[], byte[], String, byte[], TimeRange, Put)","setWriteRpcTimeout(int)","exists(Get)","checkAndPut(byte[], byte[], byte[], CompareOperator, byte[], Put)","getRpcTimeout(TimeUnit)","getOperationTimeout()","getKeysAndRegionsInRange(byte[], byte[], boolean)","getConnection()","getReadRpcTimeout(TimeUnit)","getConfiguration()","getKeysAndRegionsInRange(byte[], byte[], boolean, boolean)","setOperationTimeout(int)","doCheckAndMutate(byte[], byte[], byte[], String, byte[], TimeRange, RowMutations)","batchCallback(List, Object[], Batch.Callback)","getOperationTimeout(TimeUnit)","coprocessorService(Class, byte[], byte[], Batch.Call, Batch.Callback)","getDescriptor()","checkAndPut(byte[], byte[], byte[], byte[], Put)","getScanner(byte[])","delete(Delete)","coprocessorService(byte[])","checkAndPut(byte[], byte[], byte[], CompareOp, byte[], Put)","doCheckAndDelete(byte[], byte[], byte[], String, byte[], TimeRange, Delete)","close()","exists(List)","checkAndDelete(byte[], byte[], byte[], byte[], Delete)","checkAndDelete(byte[], byte[], byte[], CompareOperator, byte[], Delete)","processBatchCallback(List, Object[], Batch.Callback)","batchCoprocessorService(Descriptors.MethodDescriptor, Message, byte[], byte[], R)","doBatchWithCallback(List, Object[], Callback, ClusterConnection, ExecutorService, TableName)","get(Get)","delete(List)","setRpcTimeout(int)","getMaxKeyValueSize(Configuration)","checkAndMutate(byte[], byte[])","getWriteRpcTimeout(TimeUnit)"],"org.apache.hadoop.hbase.quotas.QuotaUtil":["fetchNamespaceQuotas(Connection, List)","fetchGlobalQuotas(String, Connection, List, KeyFromRow)","deleteTableQuota(Connection, TableName)","calculateResultSize(List)","addTableQuota(Connection, TableName, Quotas)","doPut(Connection, Put)","deleteQuotas(Connection, byte[], byte[])","deleteUserQuota(Connection, String, TableName)","calculateResultSize(Result)","isQuotaEnabled(Configuration)","doDelete(Connection, Delete)","addNamespaceQuota(Connection, String, Quotas)","fetchUserQuotas(Connection, List)","disableTableIfNotDisabled(Connection, TableName)","deleteNamespaceQuota(Connection, String)","fetchTableQuotas(Connection, List)","calculateMutationSize(Mutation)","deleteUserQuota(Connection, String)","deleteQuotas(Connection, byte[])","addUserQuota(Connection, String, String, Quotas)","deleteUserQuota(Connection, String, String)","addUserQuota(Connection, String, Quotas)","addUserQuota(Connection, String, TableName, Quotas)","addQuotas(Connection, byte[], byte[], Quotas)","enableTableIfNotEnabled(Connection, TableName)","addQuotas(Connection, byte[], Quotas)"],"org.apache.hadoop.hbase.master.cleaner.TimeToLiveLogCleaner":["isFileDeletable(FileStatus)","stop(String)","setConf(Configuration)","isStopped()"],"org.apache.hadoop.hbase.conf.ConfigurationManager":["notifyAllObservers(Configuration)","registerObserver(ConfigurationObserver)","getNumObservers()","deregisterObserver(ConfigurationObserver)"],"org.apache.hadoop.hbase.master.assignment.RegionStates":["getAverageLoad()","isRegionInRegionStates(RegionInfo)","getSnapShotOfAssignment(Collection)","getRegionsInTransitionCount()","getRegionStates()","getRegionStateNodes()","isRegionOffline(RegionInfo)","removeServer(ServerName)","getRegionsOfTable(TableName)","isReplicaAvailableForRegion(RegionInfo)","getRegionTransitionProcedure(RegionInfo)","createRegionForReopen(RegionStateNode)","getRegionTransitionState(RegionInfo)","addRegionInTransition(RegionStateNode, RegionTransitionProcedure)","clear()","metaLogSplit(ServerName)","getRegionsOfTable(TableName, boolean)","getAssignedRegions()","isRegionInTransition(RegionInfo)","include(RegionStateNode, boolean)","getRegionStateNodeFromName(byte[])","removeFromOfflineRegions(RegionInfo)","addRegionToServer(RegionStateNode)","getTableRegionsInfo(TableName)","regionNamesToString(Collection)","deleteRegions(List)","getRegionServerOfRegion(RegionInfo)","removeRegionFromServer(ServerName, RegionStateNode)","createSnapshot(RegionStateNode, Map)","getServerRegionInfoSet(ServerName)","metaLogSplitting(ServerName)","logSplit(ServerName)","hasRegionsInTransition()","getRegionByStateOfTable(TableName)","getRegionState(RegionInfo)","addToFailedOpen(RegionStateNode)","getRegionStateNode(RegionInfo)","getRegionsInTransition()","getRegionsInTransitionOrderedByTimestamp()","getFailedOpen(RegionInfo)","removeRegionInTransition(RegionStateNode, RegionTransitionProcedure)","getRegionState(String)","getRegionFailedOpen()","getTableRegionStates(TableName)","removeFromFailedOpen(RegionInfo)","deleteRegion(RegionInfo)","createRegionStateNode(RegionInfo)","isRegionInState(RegionInfo, State[])","getOrCreateRegionStateNode(RegionInfo)","getServerNode(ServerName)","getOrCreateServer(ServerName)","setServerState(ServerName, ServerState)","getRegionsOfTableForReopen(TableName)","getTableRegionStateNodes(TableName)","getRegionAssignments()","checkReopened(HRegionLocation)","getRegionsStateInTransition()","isRegionOnline(RegionInfo)","logSplitting(ServerName)","getRegionsOfTable(TableName, Predicate)","getAssignmentsForBalancer(boolean)","hasTableRegionStates(TableName)","updateRegionState(RegionInfo, State)","addToOfflineRegions(RegionStateNode)"],"org.apache.hadoop.hbase.regionserver.CompactingMemStore.InMemoryFlushRunnable":["run()"],"org.apache.hadoop.hbase.client.AsyncHBaseAdmin":["snapshot(SnapshotDescription)","clearCompactionQueues(ServerName, Set)","listTableDescriptorsByNamespace(String)","clearBlockCache(TableName)","majorCompactRegionServer(ServerName)","deleteSnapshots()","removeReplicationPeerTableCFs(String, Map)","modifyTable(TableDescriptor)","isCleanerChoreEnabled()","assign(byte[])","getClusterMetrics()","stopRegionServer(ServerName)","listTableSnapshots(Pattern)","isSnapshotFinished(SnapshotDescription)","getCompactionStateForRegion(byte[])","listTableDescriptors(Pattern, boolean)","getQuota(QuotaFilter)","restoreSnapshot(String)","decommissionRegionServers(List, boolean)","restoreSnapshot(String, boolean)","setQuota(QuotaSettings)","shutdown()","deleteTableSnapshots(Pattern)","createTable(TableDescriptor, byte[][])","listReplicatedTableCFs()","execProcedure(String, String, Map)","removeReplicationPeer(String)","normalize()","updateConfiguration(ServerName)","deleteTable(TableName)","isProcedureFinished(String, String, Map)","getSecurityCapabilities()","listSnapshots(Pattern)","listTableSnapshots(Pattern, Pattern)","getClusterMetrics(EnumSet)","listDecommissionedRegionServers()","majorCompact(TableName, byte[], CompactType)","compact(TableName, byte[], CompactType)","isTableDisabled(TableName)","runCatalogJanitor()","compactRegion(byte[])","isBalancerEnabled()","recommissionRegionServer(ServerName, List)","majorCompactRegion(byte[], byte[])","listTableNames(Pattern, boolean)","rollWALWriter(ServerName)","modifyColumnFamily(TableName, ColumnFamilyDescriptor)","listNamespaceDescriptors()","addColumnFamily(TableName, ColumnFamilyDescriptor)","deleteColumnFamily(TableName, byte[])","deleteTableSnapshots(Pattern, Pattern)","balancerSwitch(boolean)","splitRegion(byte[])","clearDeadServers(List)","truncateTable(TableName, boolean)","flush(TableName)","splitSwitch(boolean)","getRegions(ServerName)","modifyNamespace(NamespaceDescriptor)","compactRegionServer(ServerName)","mergeRegions(byte[], byte[], boolean)","runCleanerChore()","appendReplicationPeerTableCFs(String, Map)","createTable(TableDescriptor, byte[], byte[], int)","majorCompactRegion(byte[])","cloneTableSchema(TableName, TableName, boolean)","split(TableName)","listReplicationPeers()","enableReplicationPeer(String)","getLastMajorCompactionTimestampForRegion(byte[])","getRegionMetrics(ServerName)","isCatalogJanitorEnabled()","getRegionMetrics(ServerName, TableName)","unassign(byte[], boolean)","getLastMajorCompactionTimestamp(TableName)","deleteSnapshot(String)","getLocks()","coprocessorService(Function, ServiceCaller)","getDescriptor(TableName)","execProcedureWithReturn(String, String, Map)","getRegions(TableName)","isSplitEnabled()","enableTableReplication(TableName)","compactRegion(byte[], byte[])","flushRegionServer(ServerName)","updateConfiguration()","isMasterInMaintenanceMode()","normalizerSwitch(boolean)","majorCompact(TableName, CompactType)","listTableNames(boolean)","createTable(TableDescriptor)","disableTable(TableName)","move(byte[])","disableReplicationPeer(String)","listSnapshots()","flushRegion(byte[])","isTableAvailable(TableName, byte[][])","catalogJanitorSwitch(boolean)","isTableEnabled(TableName)","deleteSnapshots(Pattern)","tableExists(TableName)","wrap(CompletableFuture)","getProcedures()","isNormalizerEnabled()","isMergeEnabled()","cloneSnapshot(String, TableName)","compact(TableName, CompactType)","cleanerChoreSwitch(boolean)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","move(byte[], ServerName)","createNamespace(NamespaceDescriptor)","addReplicationPeer(String, ReplicationPeerConfig, boolean)","getReplicationPeerConfig(String)","listTableDescriptors(boolean)","offline(byte[])","abortProcedure(long, boolean)","mergeSwitch(boolean)","disableTableReplication(TableName)","enableTable(TableName)","getNamespaceDescriptor(String)","splitRegion(byte[], byte[])","isTableAvailable(TableName)","listReplicationPeers(Pattern)","split(TableName, byte[])","listTableNamesByNamespace(String)","stopMaster()","listDeadServers()","deleteNamespace(String)","coprocessorService(Function, ServiceCaller, ServerName)","getCompactionState(TableName, CompactType)","balance(boolean)"],"org.apache.hadoop.hbase.master.cleaner.TimeToLiveProcedureWALCleaner":["isFileDeletable(FileStatus)","stop(String)","setConf(Configuration)","isStopped()"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketCache.SharedMemoryBucketEntry":["decrementRefCountAndGet()","markForEvict()","incrementRefCountAndGet()","isMarkedForEvict()","getRefCount()"],"org.apache.hadoop.hbase.master.assignment.AssignProcedure":["toStringClassDetails(StringBuilder)","remoteCallFailed(MasterProcedureEnv, RegionStateNode, IOException)","getTableOperationType()","updateTransition(MasterProcedureEnv, RegionStateNode)","getServer(MasterProcedureEnv)","incrementAndCheckMaxAttempts(MasterProcedureEnv, RegionStateNode)","reportTransition(MasterProcedureEnv, RegionStateNode, TransitionCode, long)","remoteCallBuild(MasterProcedureEnv, ServerName)","finishTransition(MasterProcedureEnv, RegionStateNode)","handleFailure(MasterProcedureEnv, RegionStateNode)","isRollbackSupported(RegionTransitionState)","getProcedureMetrics(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","assign(MasterServices, RegionInfo)","assign(MasterServices, RegionStateNode)","startTransition(MasterProcedureEnv, RegionStateNode)"],"org.apache.hadoop.hbase.shaded.protobuf.RequestConverter":["buildGetTableDescriptorsRequest(List)","buildBulkLoadHFileRequest(List, byte[], boolean, Token, String)","buildDeleteTableRequest(TableName, long, long)","buildCreateTableRequest(TableDescriptor, byte[][], long, long)","buildGetRequest(byte[], Get)","buildGetSchemaAlterStatusRequest(TableName)","buildRegionSpecifier(RegionSpecifierType, byte[])","buildRollWALWriterRequest()","buildUnassignRegionRequest(byte[], boolean)","buildModifyColumnRequest(TableName, ColumnFamilyDescriptor, long, long)","buildNoDataRegionActions(byte[], Iterable, List, MultiRequest.Builder, RegionAction.Builder, ClientProtos.Action.Builder, MutationProto.Builder, long, Map)","buildGetQuotaStatesRequest()","buildGetTableNamesRequest(Pattern, boolean)","buildScanRequest(long, int, boolean, boolean)","buildAssignRegionRequest(byte[])","buildSetSplitOrMergeEnabledRequest(boolean, boolean, MasterSwitchType[])","buildMutateRequest(byte[], Put)","buildRegionActions(byte[], List, MultiRequest.Builder, RegionAction.Builder, ClientProtos.Action.Builder, MutationProto.Builder, long, Map)","buildClearDeadServersRequest(Collection)","buildGetOnlineRegionRequest()","buildNoDataRegionAction(byte[], RowMutations, List, RegionAction.Builder, ClientProtos.Action.Builder, MutationProto.Builder)","buildRegionAction(byte[], RowMutations)","buildGetReplicationPeerConfigRequest(String)","buildDisableReplicationPeerRequest(String)","buildGetClusterStatusRequest(EnumSet)","buildGetRegionInfoRequest(byte[], boolean, boolean)","buildSplitTableRegionRequest(RegionInfo, byte[], long, long)","buildNormalizeRequest()","buildModifyNamespaceRequest(NamespaceDescriptor)","buildMutateRequest(byte[], Increment, long, long)","buildClearRegionBlockCacheRequest(List)","buildGetTableDescriptorsRequest(Pattern, boolean)","buildSetNormalizerRunningRequest(boolean)","buildIsCatalogJanitorEnabledRequest()","buildUpdateReplicationPeerConfigRequest(String, ReplicationPeerConfig)","buildDisableTableRequest(TableName, long, long)","toEncodedRegionNameRegionSpecifiers(List)","buildRemoveReplicationPeerRequest(String)","buildGetRegionInfoRequest(byte[], boolean)","buildDeleteColumnRequest(TableName, byte[], long, long)","buildAddReplicationPeerRequest(String, ReplicationPeerConfig, boolean)","buildOpenRegionRequest(ServerName, RegionInfo, List)","buildSetBalancerRunningRequest(boolean, boolean)","buildGetTableDescriptorsRequest(TableName)","buildGetServerInfoRequest()","buildCreateNamespaceRequest(NamespaceDescriptor)","buildMoveRegionRequest(byte[], ServerName)","buildScanRequest(byte[], Scan, int, boolean)","buildFlushRegionRequest(byte[], boolean)","buildIsCleanerChoreEnabledRequest()","buildTruncateTableRequest(TableName, boolean, long, long)","buildBulkLoadHFileRequest(List, byte[], boolean, Token, String, boolean, List, boolean)","buildFlushRegionRequest(byte[])","buildEnableCatalogJanitorRequest(boolean)","buildCompactRegionRequest(byte[], boolean, byte[])","buildSetTableStateInMetaRequest(TableState)","buildIncrementRequest(byte[], byte[], byte[], byte[], long, Durability, long, long)","buildOpenRegionRequest(ServerName, List)","buildRunCleanerChoreRequest()","buildDeleteNamespaceRequest(String)","buildMutateRequest(byte[], Append, long, long)","getRegionActionBuilderWithRegion(RegionAction.Builder, byte[])","buildWarmupRegionRequest(RegionInfo)","buildIsNormalizerEnabledRequest()","buildListReplicationPeersRequest(Pattern)","buildScanRequest(long, int, boolean, long, boolean, boolean, int)","buildMutateRequest(byte[], byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange, Put)","buildGetRegionLoadRequest(TableName)","buildMutateRequest(byte[], byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange, RowMutations)","toAssignRegionsRequest(List, boolean)","buildOfflineRegionRequest(byte[])","buildEnableReplicationPeerRequest(String)","buildGetNamespaceDescriptorRequest(String)","buildStopServerRequest(String)","buildDecommissionRegionServersRequest(List, boolean)","toScheduleServerCrashProcedureRequest(List)","buildIsMasterRunningRequest()","buildUpdateFavoredNodesRequest(List)","buildRecommissionRegionServerRequest(ServerName, List)","buildBalanceRequest(boolean)","buildMutateRequest(byte[], byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange, Delete)","buildEnableTableRequest(TableName, long, long)","buildMutateRequest(byte[], byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange, Mutation, MutationType)","buildRegionOpenInfo(RegionInfo, List)","buildGetSpaceQuotaRegionSizesRequest()","buildModifyTableRequest(TableName, TableDescriptor, long, long)","buildMutateRequest(byte[], Delete)","buildSetCleanerChoreRunningRequest(boolean)","buildAddColumnRequest(TableName, ColumnFamilyDescriptor, long, long)","buildClearCompactionQueuesRequest(Set)","toUnassignRegionsRequest(List, boolean)","buildIsBalancerEnabledRequest()","buildCondition(byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange)","buildGetRegionInfoRequest(byte[])","buildMergeTableRegionsRequest(byte[][], boolean, long, long)","buildIsSplitOrMergeEnabledRequest(MasterSwitchType)","convert(MasterSwitchType)","buildGetTableStateRequest(TableName)","buildGetSpaceQuotaSnapshotsRequest()","buildGetLastFlushedSequenceIdRequest(byte[])","buildCatalogScanRequest()","toProtoServerNames(List)"],"org.apache.hadoop.hbase.master.assignment.MoveRegionProcedure":["toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","waitInitialized(MasterProcedureEnv)","getState(int)","getTableOperationType()","rollbackState(MasterProcedureEnv, MoveRegionState)","getInitialState()","getTableName()","executeFromState(MasterProcedureEnv, MoveRegionState)","getStateId(MoveRegionState)","deserializeStateData(ProcedureStateSerializer)","getPlan()","serializeStateData(ProcedureStateSerializer)"],"org.apache.hadoop.hbase.security.access.AccessControlLists":["removeTablePermissions(Configuration, TableName, byte[], Table)","parsePermissionRecord(byte[], Cell)","getTablePermissions(Configuration, TableName)","userPermissionKey(UserPermission)","isNamespaceEntry(byte[])","addUserPermission(Configuration, UserPermission, Table, boolean)","isAclTable(TableDescriptor)","fromNamespaceEntry(String)","getPermissions(Configuration, byte[], Table)","isNamespaceEntry(String)","fromNamespaceEntry(byte[])","removePermissionRecord(Configuration, UserPermission, Table)","removeNamespacePermissions(Configuration, String, Table)","loadAll(Region)","getUserNamespacePermissions(Configuration, String)","userPermissionRowKey(UserPermission)","parsePermissions(byte[], Result)","removeTablePermissions(Configuration, TableName, Table)","loadAll(Configuration)","writePermissionsAsBytes(ListMultimap, Configuration)","removeTablePermissions(TableName, byte[], Table, boolean)","readPermissions(byte[], Configuration)","getCellPermissionsForUser(User, Cell)","isAclRegion(Region)","getUserTablePermissions(Configuration, TableName)","getUserPermissions(Configuration, byte[])","getNamespacePermissions(Configuration, String)","toNamespaceEntry(String)","removeUserPermission(Configuration, UserPermission, Table)","addUserPermission(Configuration, UserPermission, Table)","readWritablePermissions(DataInput, Configuration)","toNamespaceEntry(byte[])"],"org.apache.hadoop.hbase.regionserver.DefaultMemStore":["getNextRow(Cell)","keySize()","checkActiveSize()","isSloppy()","heapSize()","getSegments()","preFlushSeqIDEstimation()","getScanners(long)","snapshot()","updateLowestUnflushedSequenceIdInWAL(boolean)","getFlushableSize()","main(String[])","size()"],"org.apache.hadoop.hbase.security.access.AccessChecker":["requirePermission(User, String, TableName, byte[], byte[], Action[])","requirePermission(User, String, Action)","requireNamespacePermission(User, String, String, Action[])","requireGlobalPermission(User, String, Action, TableName, Map)","requireTablePermission(User, String, TableName, byte[], byte[], Action[])","checkLockPermissions(User, String, TableName, RegionInfo[], String)","isAuthorizationSupported(Configuration)","getAuthManager()","requireAccess(User, String, TableName, Action[])","stop()","requireNamespacePermission(User, String, String, TableName, Map, Action[])","requireGlobalPermission(User, String, Action, String)","logResult(AuthResult)"],"org.apache.hadoop.hbase.client.AsyncRegionLocatorHelper":["removeRegionLocation(RegionLocations, int)","replaceRegionLocation(RegionLocations, HRegionLocation)","createRegionLocations(HRegionLocation)","isGood(RegionLocations, int)","canUpdateOnError(HRegionLocation, HRegionLocation)","updateCachedLocationOnError(HRegionLocation, Throwable, Function, Consumer, Consumer)"],"org.apache.hadoop.hbase.io.hfile.bucket.FileIOEngine":["getFileNum(long)","isPersistent()","sync()","toString()","write(ByteBuffer, long)","shutdown()","getAbsoluteOffsetInFile(int, long)","read(long, int, CacheableDeserializer)","refreshFileConnection(int, IOException)","closeFileChannels()","write(ByteBuff, long)","accessFile(FileAccessor, ByteBuffer, long)","getFileChannels()"],"org.apache.hadoop.hbase.master.procedure.ServerCrashProcedure":["toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, ServerCrashState)","getState(int)","getServerOperationType()","acquireLock(MasterProcedureEnv)","getStateId(ServerCrashState)","getInitialState()","splitLogs(MasterProcedureEnv)","getProcedureMetrics(MasterProcedureEnv)","isYieldBeforeExecuteFromState(MasterProcedureEnv, ServerCrashState)","deserializeStateData(ProcedureStateSerializer)","processMeta(MasterProcedureEnv)","serializeStateData(ProcedureStateSerializer)","handleRIT(MasterProcedureEnv, List)","shouldWaitClientAck(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, ServerCrashState)","filterDefaultMetaRegions(List)","isDefaultMetaRegion(RegionInfo)","splitMetaLogs(MasterProcedureEnv)","releaseLock(MasterProcedureEnv)","hasMetaTableRegion()","getServerName()"],"org.apache.hadoop.hbase.master.assignment.AssignProcedure.CompareAssignProcedure":["compare(AssignProcedure, AssignProcedure)"],"org.apache.hadoop.hbase.security.access.ShadedAccessControlUtil":["toPermissionAction(Permission.Action)","toUserTablePermissions(org.apache.hadoop.hbase.shaded.protobuf.generated.AccessControlProtos.UsersAndPermissions)","toUserPermission(org.apache.hadoop.hbase.shaded.protobuf.generated.AccessControlProtos.UserPermission)","toPermissionAction(org.apache.hadoop.hbase.shaded.protobuf.generated.AccessControlProtos.Permission.Action)","toTableName(HBaseProtos.TableName)","toPermission(Permission)","toUserTablePermissions(ListMultimap)","toTablePermission(AccessControlProtos.Permission)","toProtoTableName(TableName)","toPermissionActions(List)"],"org.apache.hadoop.hbase.wal.WALSplitter.EntryBuffers":["appendEntry(Entry)","getChunkToWrite()","isRegionCurrentlyWriting(byte[])","doneWriting(RegionEntryBuffer)","waitUntilDrained()"],"org.apache.hadoop.hbase.regionserver.StoreFileReader":["loadFileInfo()","checkGeneralBloomFilter(byte[], Cell, BloomFilter)","getSequenceID()","setSkipResetSeqId(boolean)","disableBloomFilterForTesting()","passesGeneralRowColBloomFilter(Cell)","isSkipResetSeqId()","setBloomFilterFaulty(BlockType)","length()","getBloomFilterType()","setGeneralBloomFilterFaulty()","setBulkLoaded(boolean)","loadBloomfilter(BlockType)","passesGeneralRowBloomFilter(byte[], int, int)","setSequenceID(long)","getTotalBloomSize()","loadBloomfilter()","readCompleted()","getGeneralBloomFilter()","getComparator()","getDeleteFamilyCnt()","getLastKey()","close(boolean)","isPrimaryReplicaReader()","getHFileVersion()","getFilterEntries()","getTotalUncompressedBytes()","indexSize()","getFirstKey()","getRefCount()","getScanner(boolean, boolean, boolean)","getUncompressedDataIndexSize()","getHFileReader()","passesKeyRangeFilter(Scan)","setDeleteFamilyBloomFilterFaulty()","setListener(Listener)","passesTimerangeFilter(TimeRange, long)","getHFileMinorVersion()","getEntries()","passesDeleteFamilyBloomFilter(byte[], int, int)","isBulkLoaded()","incrementRefCount()","passesBloomFilter(Scan, SortedSet)","copyFields(StoreFileReader)","getScanner(boolean, boolean)","getLastRowKey()","getStoreFileScanner(boolean, boolean, boolean, long, long, boolean)","getMaxTimestamp()","midKey()"],"org.apache.hadoop.hbase.util.LossyCounting":["add(String)","contains(String)","sweep()","getDataSize()","addByOne(String)","calculateCurrentTerm()","getBucketSize()","getCurrentTerm()","getElements()"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputSaslHelper.SaslNegotiateHandler":["requestedQopContainsPrivacy()","sendSaslMessage(ChannelHandlerContext, byte[], List)","unwrap(CipherOption, SaslClient)","userEventTriggered(ChannelHandlerContext, Object)","isNegotiatedQopPrivacy()","getCipherOption(DataTransferEncryptorMessageProto, boolean, SaslClient)","getCipherOptions()","channelInactive(ChannelHandlerContext)","channelRead(ChannelHandlerContext, Object)","getNegotiatedQop()","sendSaslMessage(ChannelHandlerContext, byte[])","exceptionCaught(ChannelHandlerContext, Throwable)","checkSaslComplete()","handlerAdded(ChannelHandlerContext)","check(DataTransferEncryptorMessageProto)","useWrap()"],"org.apache.hadoop.hbase.favored.FavoredNodeLoadBalancer":["getFavoredNodes(RegionInfo)","balanceCluster(Map)","generateFavoredNodesForDaughter(List, RegionInfo, RegionInfo, RegionInfo)","randomAssignment(RegionInfo, List)","availableServersContains(List, ServerName)","setConf(Configuration)","segregateRegionsAndAssignRegionsWithFavoredNodes(List, List)","assignRegionToAvailableFavoredNode(Map, RegionInfo, ServerName, ServerName, ServerName)","roundRobinAssignment(List, List)","balanceCluster(TableName, Map)","addRegionToMap(Map, RegionInfo, ServerName)","assignSecondaryAndTertiaryNodesForRegion(FavoredNodeAssignmentHelper, List, Map)","initialize()","generateFavoredNodesForMergedRegion(RegionInfo, RegionInfo[])","getInheritedFNForDaughter(FavoredNodeAssignmentHelper, List, Position, Position)","roundRobinAssignmentImpl(FavoredNodeAssignmentHelper, Map, List, List)"],"org.apache.hadoop.hbase.regionserver.HeapMemoryManager":["doInit(Configuration)","registerTuneObserver(HeapMemoryTuneObserver)","getHeapOccupancyPercent()","start(ChoreService)","stop()","isTunerOn()","create(Configuration, FlushRequester, Server, RegionServerAccounting)"],"org.apache.hadoop.hbase.regionserver.MetricsTableWrapperAggregateImpl.MetricsTableValues":["getWriteRequestsCount()","setTableSize(long)","setStoreFilesSize(long)","setReadRequestsCount(long)","getTableSize()","setTotalRequestsCount(long)","setWriteRequestsCount(long)","getReadRequestsCount()","setMemStoresSize(long)","getMemStoresSize()","getStoreFilesSize()","getTotalRequestsCount()"],"org.apache.hadoop.hbase.client.HRegionLocator":["getRegionLocation(byte[])","listRegionLocations()","getRegionLocation(byte[], boolean)","getName()","getStartKeys()","getStartEndKeys(List)","getStartEndKeys()","getAllRegionLocations()","getConfiguration()","getEndKeys()","close()"],"org.apache.hadoop.hbase.io.asyncfs.AsyncFSOutputHelper":["createOutput(FileSystem, Path, boolean, boolean, short, long, EventLoopGroup, Class)"],"org.apache.hadoop.hbase.tool.LoadIncrementalHFiles":["prepareHFileQueue(Path, Table, Deque, boolean)","tryAtomicRegionLoad(ClientServiceCallable, TableName, byte[], Collection)","discoverLoadQueue(Deque, Path, boolean)","prepareHFileQueue(Path, Table, Deque, boolean, boolean)","performBulkLoad(Admin, Table, RegionLocator, Deque, ExecutorService, SecureBulkLoadClient, boolean)","createExecutorService()","groupOrSplitPhase(Table, ExecutorService, Deque, Pair)","visitBulkHFiles(FileSystem, Path, BulkHFileVisitor, boolean)","isAlwaysCopyFiles()","prepareHFileQueue(Map, Table, Deque, boolean)","shouldCopyHFileMetaKey(byte[])","loadHFileQueue(Table, Connection, Deque, Pair, boolean)","setBulkToken(String)","loadHFileQueue(Table, Connection, Deque, Pair)","bulkLoadPhase(Table, Connection, ExecutorService, Deque, Multimap, boolean, Map)","populateLoadQueue(Deque, Map)","validateFamiliesInHFiles(Table, Deque, boolean)","isSilence()","disableReplication()","doBulkLoad(Map, Admin, Table, RegionLocator, boolean, boolean)","isSecureBulkLoadEndpointAvailable()","inferBoundaries(SortedMap)","main(String[])","setClusterIds(List)","usage()","cleanup(Admin, Deque, ExecutorService, SecureBulkLoadClient)","doBulkLoad(Path, Admin, Table, RegionLocator)","buildClientServiceCallable(Connection, TableName, byte[], Collection, boolean)","run(String[])","getUniqueName()","visitBulkHFiles(FileSystem, Path, BulkHFileVisitor)","createTable(TableName, String, Admin)","splitStoreFile(Configuration, Path, ColumnFamilyDescriptor, byte[], Path, Path)","copyHFileHalf(Configuration, Path, Path, Reference, ColumnFamilyDescriptor)","run(String, TableName)","groupOrSplit(Multimap, LoadQueueItem, Table, Pair)","splitStoreFile(LoadQueueItem, Table, byte[], byte[])","run(Map, TableName)","checkHFilesCountPerRegionPerFamily(Multimap)","doBulkLoad(Path, Admin, Table, RegionLocator, boolean, boolean)","toString(List)","isCreateTable()"],"org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv.WALStoreLeaseRecovery":["recoverFileLease(FileSystem, Path)","isRunning()"],"org.apache.hadoop.hbase.master.assignment.RegionStates.ServerStateNode":["addRegion(RegionStateNode)","setState(ServerState)","getRegionInfoList()","equals(Object)","getState()","toString()","getRegionCount()","removeRegion(RegionStateNode)","hashCode()","compareTo(ServerStateNode)","getReportEvent()","getRegions()","isInState(ServerState[])","getServerName()"],"org.apache.hadoop.hbase.master.procedure.MasterProcedureScheduler":["isLockReady(Procedure, Queue)","getBucketIndex(Object[], int)","getPeerId(Procedure)","isServerProcedure(Procedure)","isPeerProcedure(Procedure)","getLocks()","waitServerExclusiveLock(Procedure, ServerName)","tryCleanupServerQueue(ServerName, Procedure)","getPeerQueue(String)","doPoll(FairQueue)","clear(TNode, FairQueue, AvlKeyComparator)","getMetaQueue()","clear()","waitNamespaceExclusiveLock(Procedure, String)","queueSize(Queue)","waitTableExclusiveLock(Procedure, TableName)","wakeServerExclusiveLock(Procedure, ServerName)","waitTableQueueSharedLock(Procedure, TableName)","wakePeerExclusiveLock(Procedure, String)","wakeRegions(Procedure, TableName, RegionInfo[])","getLockResource(LockedResourceType, String)","tryCleanupPeerQueue(String, Procedure)","addToRunQueue(FairQueue, Queue, Supplier)","waitMetaExclusiveLock(Procedure)","getServerQueue(ServerName, ServerProcedureInterface)","waitRegion(Procedure, RegionInfo)","getTableName(Procedure)","wakeRegion(Procedure, RegionInfo)","completionCleanup(Procedure)","requirePeerExclusiveLock(PeerProcedureInterface)","wakeTableSharedLock(Procedure, TableName)","waitPeerExclusiveLock(Procedure, String)","isTableProcedure(Procedure)","waitTableSharedLock(Procedure, TableName)","doAdd(FairQueue, Queue, Procedure, boolean)","yield(Procedure)","dequeue(boolean)","queueSize()","logLockedResource(LockedResourceType, String)","wakeNamespaceExclusiveLock(Procedure, String)","enqueue(Procedure, boolean)","removeTableQueue(TableName)","dumpLocks()","clearQueue()","queueHasRunnables()","getServerName(Procedure)","wakeTableExclusiveLock(Procedure, TableName)","removeFromRunQueue(FairQueue, Queue, Supplier)","removeServerQueue(ServerName)","waitRegions(Procedure, TableName, RegionInfo[])","wakeMetaExclusiveLock(Procedure)","getTableQueue(TableName)","removePeerQueue(String)","markTableAsDeleted(TableName, Procedure)","isMetaProcedure(Procedure)"],"org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer.CandidateGenerator":["pickOtherRandomServer(Cluster, int)","pickOtherRandomRack(Cluster, int)","pickRandomRack(Cluster)","getAction(int, int, int, int)","pickRandomRegion(Cluster, int, double)","pickRandomRegions(Cluster, int, int)","pickRandomServer(Cluster)","getRandomIterationOrder(int)"],"org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer.LocalityBasedCandidateGenerator":["generate(Cluster)","tryMoveOrSwap(Cluster, int, int, int)","setServices(MasterServices)","getWeightedLocality(Cluster, int, int)"],"org.apache.hadoop.hbase.io.hfile.HFileDataBlockEncoderImpl":["newDataBlockDecodingContext(HFileContext)","startBlockEncoding(HFileBlockEncodingContext, DataOutputStream)","useEncodedScanner()","toString()","saveMetadata(HFile.Writer)","createFromFileInfo(FileInfo)","getEffectiveEncodingInCache(boolean)","encode(Cell, HFileBlockEncodingContext, DataOutputStream)","endBlockEncoding(HFileBlockEncodingContext, DataOutputStream, byte[], BlockType)","useEncodedScanner(boolean)","getDataBlockEncoding()","newDataBlockEncodingContext(byte[], HFileContext)"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.RegionOperation":["getRegionInfo()"],"org.apache.hadoop.hbase.util.FSTableDescriptors":["writeTableDescriptor(FileSystem, TableDescriptor, Path, FileStatus)","createMetaTableDescriptorBuilder(Configuration)","getTableInfoPath(FileSystem, Path, boolean)","readTableDescriptor(FileSystem, FileStatus)","createTableDescriptor(TableDescriptor)","createMetaTableDescriptor(Configuration)","getAll()","getByNamespace(String)","deleteTableDescriptorFiles(FileSystem, Path, int)","createTableDescriptorForTableDirectory(Path, TableDescriptor, boolean)","get(TableName)","getTableInfoPath(Path)","deleteTableDescriptorIfExists(TableName)","getCurrentTableInfoStatus(FileSystem, Path, boolean)","getTableInfoSequenceId(Path)","getTableDir(TableName)","getTableDescriptorFromFs(FileSystem, Path, TableName)","isUsecache()","setCacheOff()","createTableDescriptor(TableDescriptor, boolean)","formatTableInfoSequenceId(int)","getTableInfoPath(TableName)","writeTD(FileSystem, Path, TableDescriptor)","remove(TableName)","add(TableDescriptor)","getTableInfoPath(FileSystem, Path)","getTableDescriptorFromFs(FileSystem, Path)","updateTableDescriptor(TableDescriptor)","getTableInfoFileName(int)","setCacheOn()","isTableInfoExists(TableName)"],"org.apache.hadoop.hbase.wal.WALSplitter.OutputSink":["startWriterThreads()","flush()","updateRegionMaximumEditLogSeqNum(Entry)","finishWriting(boolean)","setReporter(CancelableProgressable)","getNumOpenWriters()","getSkippedEdits()"],"org.apache.hadoop.hbase.client.HBaseHbck":["abort(String, Throwable)","setTableStateInMeta(TableState)","scheduleServerCrashProcedure(List)","isAborted()","bypassProcedure(List, long, boolean, boolean)","runHbckChore()","fixMeta()","assigns(List, boolean)","toCommaDelimitedString(List)","close()","unassigns(List, boolean)"],"org.apache.hadoop.hbase.master.normalizer.MergeNormalizationPlan":["getFirstRegion()","toString()","getType()","execute(Admin)","getSecondRegion()"],"org.apache.hadoop.hbase.regionserver.RSRpcServices":["doNonAtomicRegionMutation(HRegion, OperationQuota, RegionAction, CellScanner, RegionActionResult.Builder, List, long, RegionScannersCloseCallBack, RpcCallContext, ActivePolicyEnforcement)","start(ZKWatcher)","mutate(RpcController, MutateRequest)","rpcPreCheck(String)","cleanupBulkLoad(RpcController, CleanupBulkLoadRequest)","multi(RpcController, MultiRequest)","getRpcScheduler()","skipCellsForMutation(Action, CellScanner)","doReplayBatchOp(HRegion, List, long)","checkAndRowMutate(HRegion, List, CellScanner, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, RegionActionResult.Builder, ActivePolicyEnforcement)","getServerInfo(RpcController, GetServerInfoRequest)","getResultOrException(Exception, int)","getPriority()","replicateWALEntry(RpcController, ReplicateWALEntryRequest)","updateConfiguration(RpcController, UpdateConfigurationRequest)","getScannerVirtualTime(long)","stopServer(RpcController, StopServerRequest)","getSocketAddress()","getRegionInfo(RpcController, GetRegionInfoRequest)","updateFavoredNodes(RpcController, UpdateFavoredNodesRequest)","execRegionServerService(RpcController, CoprocessorServiceRequest)","getTimeLimit(HBaseRpcController, boolean)","execServiceOnRegion(HRegion, ClientProtos.CoprocessorServiceCall)","checkScanNextCallSeq(ScanRequest, RegionScannerHolder)","getScanner(long)","scan(RpcController, ScanRequest)","closeScanner(HRegion, RegionScanner, String, RpcCallContext)","doBatchOp(RegionActionResult.Builder, HRegion, OperationQuota, List, CellScanner, ActivePolicyEnforcement, boolean)","getRpcQuotaManager()","closeRegion(RpcController, CloseRegionRequest)","checkBatchSizeAndLogLargeSize(MultiRequest)","addScannerLeaseBack(Leases.Lease)","updateMutationMetrics(HRegion, long, boolean, boolean)","getServices()","newRegionScanner(ScanRequest, ScanResponse.Builder)","getHostname(Configuration, boolean)","getResultOrException(ClientProtos.Result, int)","addScanner(String, RegionScanner, Shipper, HRegion, boolean)","getRegionLoad(RpcController, GetRegionLoadRequest)","bulkLoadHFile(RpcController, BulkLoadHFileRequest)","openRegion(RpcController, OpenRegionRequest)","getOnlineRegion(RpcController, GetOnlineRegionRequest)","get(Get, HRegion, RegionScannersCloseCallBack, RpcCallContext)","startNonceOperation(MutationProto, long)","requirePermission(String, Permission.Action)","rollWALWriter(RpcController, RollWALWriterRequest)","skipCellsForMutations(List, CellScanner)","get(RpcController, GetRequest)","executeProcedures(RpcController, ExecuteProceduresRequest)","getScannersCount()","doNonAtomicBatchOp(RegionActionResult.Builder, HRegion, OperationQuota, List, CellScanner, ActivePolicyEnforcement)","closeAllScanners()","addSize(RpcCallContext, Result, Object)","addResults(ScanResponse.Builder, List, HBaseRpcController, boolean, boolean)","getConfiguration()","getStoreFile(RpcController, GetStoreFileRequest)","checkOpen()","flushRegion(RpcController, FlushRegionRequest)","getRegionScanner(ScanRequest)","prepareBulkLoad(RpcController, PrepareBulkLoadRequest)","replay(RpcController, ReplicateWALEntryRequest)","getRegion(RegionSpecifier)","createRpcServer(Server, Configuration, RpcSchedulerFactory, InetSocketAddress, String)","endNonceOperation(MutationProto, long, boolean)","stop()","scan(HBaseRpcController, ScanRequest, RegionScannerHolder, long, int, int, List, ScanResponse.Builder, MutableObject, RpcCallContext)","execService(RpcController, CoprocessorServiceRequest)","warmupRegion(RpcController, WarmupRegionRequest)","createPriority()","getDeadline(RequestHeader, Message)","getRpcSchedulerFactoryClass()","clearRegionBlockCache(RpcController, ClearRegionBlockCacheRequest)","getSpaceQuotaManager()","getSpaceQuotaSnapshots(RpcController, GetSpaceQuotaSnapshotsRequest)","getResultOrException(ResultOrException.Builder, int)","doAtomicBatchOp(RegionActionResult.Builder, HRegion, OperationQuota, List, CellScanner, ActivePolicyEnforcement)","getRegions(List, CacheEvictionStatsBuilder)","getPriority(RequestHeader, Message, User)","getScanDetailsWithId(long)","compactRegion(RpcController, CompactRegionRequest)","increment(HRegion, OperationQuota, MutationProto, CellScanner, long, ActivePolicyEnforcement)","onConfigurationChange(Configuration)","addResult(MutateResponse.Builder, Result, HBaseRpcController, boolean)","checkOOME(Throwable)","checkLimitOfRows(int, int, boolean, ScannerContext, ScanResponse.Builder)","append(HRegion, OperationQuota, MutationProto, CellScanner, long, ActivePolicyEnforcement)","checkCellSizeLimit(HRegion, Mutation)","isClientCellBlockSupport(RpcCallContext)","clearCompactionQueues(RpcController, ClearCompactionQueuesRequest)","exitIfOOME(Throwable)"],"org.apache.hadoop.hbase.util.FSUtils":["setupShortCircuitRead(Configuration)","parseVersionFrom(byte[])","getTableFragmentation(HMaster)","getInstance(FileSystem, Configuration)","setVersion(FileSystem, Path)","computeHDFSBlocksDistribution(FileSystem, FileStatus, long, long)","checkClusterIdExists(FileSystem, Path, long)","getDFSHedgedReadMetrics(Configuration)","getRegionDirFromRootDir(Path, RegionInfo)","checkVersion(FileSystem, Path, boolean, int, int)","getLocalTableDirs(FileSystem, Path)","isInSafeMode(DistributedFileSystem)","getReferenceFilePaths(FileSystem, Path)","getRegionReferenceFileCount(FileSystem, Path)","getTableDirs(FileSystem, Path)","checkVersion(FileSystem, Path, boolean)","listStatusWithStatusFilter(FileSystem, Path, FileStatusFilter)","isMatchingTail(Path, Path)","create(Configuration, FileSystem, Path, FsPermission, InetSocketAddress[])","setVersion(FileSystem, Path, String, int, int)","isDistributedFileSystem(FileSystem)","getTableStoreFilePathMap(FileSystem, Path, PathFilter, ExecutorService, HbckErrorReporter)","rewriteAsPb(FileSystem, Path, Path, ClusterId)","getTableFragmentation(FileSystem, Path)","getRegionLocalityMappingFromFS(Configuration, String, int, Map)","filterFileStatuses(FileStatus[], FileStatusFilter)","toVersionByteArray(String)","metaRegionExists(FileSystem, Path)","setVersion(FileSystem, Path, int, int)","filterFileStatuses(Iterator, FileStatusFilter)","deleteRegionDir(Configuration, HRegionInfo)","setClusterId(FileSystem, Path, ClusterId, int)","getVersion(FileSystem, Path)","addToHDFSBlocksDistribution(HDFSBlocksDistribution, BlockLocation[])","getRegionDegreeLocalityMappingFromFS(Configuration)","copyFiles(FileSystem, Path, FileSystem, Path, Configuration, ExecutorService, List)","checkAccess(UserGroupInformation, FileStatus, FsAction)","getTableStoreFilePathMap(Map, FileSystem, Path, TableName, PathFilter, ExecutorService, ProgressReporter)","getTableStoreFilePathMap(FileSystem, Path, PathFilter, ExecutorService, ProgressReporter)","getRegionDegreeLocalityMappingFromFS(Configuration, String, int)","getRegionDirFromTableDir(Path, RegionInfo)","getTableStoreFilePathMap(FileSystem, Path)","getRegionDirs(FileSystem, Path)","waitOnSafeMode(Configuration, long)","copyFilesParallel(FileSystem, Path, FileSystem, Path, Configuration, int)","checkDfsSafeMode(Configuration)","getTableStoreFilePathMap(Map, FileSystem, Path, TableName, PathFilter, ExecutorService, HbckErrorReporter)","checkFileSystemAvailable(FileSystem)","getTableStoreFilePathMap(Map, FileSystem, Path, TableName)","getClusterId(FileSystem, Path)","checkShortCircuitReadBufferSize(Configuration)","getTotalTableFragmentation(HMaster)","getFamilyDirs(FileSystem, Path)"],"org.apache.hadoop.hbase.master.balancer.FavoredStochasticBalancer":["setMasterServices(MasterServices)","getOnlineFavoredNodes(List, List)","getFavoredNodes(RegionInfo)","balanceCluster(Map)","generateFavoredNodesForDaughter(List, RegionInfo, RegionInfo, RegionInfo)","generateFNForRegionsWithoutFN(FavoredNodeAssignmentHelper, List)","retainAssignment(Map, List)","randomAssignment(RegionInfo, List)","segregateRegionsAndAssignRegionsWithFavoredNodes(Collection, List)","getServerFromFavoredNode(List, ServerName)","updateFavoredNodesForRegion(RegionInfo, List)","assignRegionToAvailableFavoredNode(Map, RegionInfo, ServerName, ServerName, ServerName)","roundRobinAssignment(List, List)","configureGenerators()","addRegionToMap(Map, RegionInfo, ServerName)","initialize()","mergeAssignmentMaps(Map, Map)","generateFavoredNodesForMergedRegion(RegionInfo, RegionInfo[])","getInheritedFNForDaughter(FavoredNodeAssignmentHelper, List, Position, Position)"],"org.apache.hadoop.hbase.master.assignment.AssignmentManager":["markRegionAsSplit(RegionInfo, ServerName, RegionInfo, RegionInfo)","markRegionAsClosing(RegionStateNode)","start()","getSnapShotOfAssignment(Collection)","isCarryingRegion(ServerName, RegionInfo)","shouldAssignFavoredNodes(RegionInfo)","addToPendingAssignment(HashMap, Collection)","isMetaAssigned()","isMetaRegionInTransition()","createAssignProcedure(RegionInfo, ServerName, boolean)","sendRegionClosedNotification(RegionInfo)","waitMetaLoaded(Procedure)","getAssignedRegions()","getTableStateManager()","updateRegionTransition(ServerName, TransitionCode, RegionInfo, long)","createAssignProcedure(RegionInfo)","markRegionAsMerged(RegionInfo, ServerName, RegionInfo[])","getMetaRegionFromName(byte[])","deleteTable(TableName)","updateRegionMergeTransition(ServerName, TransitionCode, RegionInfo, RegionInfo, RegionInfo)","markRegionAsOpening(RegionStateNode)","getRegionInfo(byte[])","registerListener(AssignmentListener)","unregisterListener(AssignmentListener)","assign(RegionInfo, ServerName)","getFavoredNodes(RegionInfo)","checkOnlineRegionsReportForMeta(ServerName, Set)","markRegionAsOpened(RegionStateNode)","isTableDisabled(TableName)","getRSReports()","hasRegionsInTransition()","checkMetaLoaded(RegionInfo)","getBalancer()","offlineRegion(RegionInfo)","moveAsync(RegionPlan)","getRegionsInTransition()","unassign(RegionInfo)","reportRegionStateTransition(ReportRegionStateTransitionRequest)","stop()","isMetaRegion(byte[])","createAssignProcedure(RegionInfo, boolean)","submitServerCrash(ServerName, boolean)","serverAdded(ServerName)","loadMeta()","killRegionServer(ServerName)","reportTransition(RegionStateNode, ServerName, TransitionCode, long)","processOfflineRegions()","sendRegionOpenedNotification(RegionInfo, ServerName)","processAssignQueue()","updateRegionsInTransitionMetrics(RegionInTransitionStat)","getProcedureEnvironment()","setMetaAssigned(RegionInfo, boolean)","queueAssign(RegionStateNode)","getReopenStatus(TableName)","move(RegionInfo)","createAssignProcedures(Map, int)","getMetaForRegion(RegionInfo)","createAssignProcedures(List)","stopAssignmentThread()","assignQueueSignal()","assign(RegionInfo)","getRegionStates()","createUnassignProcedure(RegionInfo, ServerName, boolean, boolean)","createRoundRobinAssignProcedures(List)","createUnassignProcedures(TableName)","undoRegionAsClosing(RegionStateNode)","handleRegionOverStuckWarningThreshold(RegionInfo)","getAssignmentManagerMetrics()","getRegionStateStore()","computeRegionInTransitionStat()","wakeServerReportEvent(ServerStateNode)","addRegionInTransition(RegionStateNode, RegionTransitionProcedure)","createAssignProcedure(RegionInfo, ServerName)","getMaster()","isMetaLoaded()","updateRegionSplitTransition(ServerName, TransitionCode, RegionInfo, RegionInfo, RegionInfo)","isCarryingMeta(ServerName)","serverRemoved(ServerName)","waitOnAssignQueue()","getMetaRegionSet()","getNumRegionsOpened()","unassign(RegionInfo, boolean)","getAssignMaxAttempts()","markRegionAsClosed(RegionStateNode)","wakeMetaLoadedEvent()","acceptPlan(HashMap, Map)","isTableEnabled(TableName)","waitServerReportEvent(ServerName, Procedure)","createUnassignProcedure(RegionInfo)","getConfiguration()","isRunning()","getRegionStatesCount(TableName)","processAssignmentPlans(HashMap, HashMap, List, List)","getExcludedServersForSystemTable()","removeRegionInTransition(RegionStateNode, RegionTransitionProcedure)","createMergeProcedure(RegionInfo[])","createUnassignProcedure(RegionInfo, ServerName, boolean)","startAssignmentThread()","checkOnlineRegionsReport(ServerStateNode, Set)","joinCluster()","createUnassignProcedures(Collection)","createUnassignProcedure(RegionInfo, boolean)","getSystemTables(ServerName)","isMetaRegion(RegionInfo)","createSplitProcedure(RegionInfo, byte[])","isLogSplittingDone(ServerName, boolean)","reportOnlineRegions(ServerName, Set)","createMoveRegionProcedure(RegionPlan)","waitMetaAssigned(Procedure, RegionInfo)","checkIfShouldMoveSystemRegionAsync()","createRoundRobinAssignProcedures(List, List)","onlineRegion(RegionInfo, ServerName)","undoRegionAsOpening(RegionStateNode)","getProcedureScheduler()","getMetaAssignEvent(RegionInfo)"],"org.apache.hadoop.hbase.master.snapshot.TakeSnapshotHandler":["hasException()","getSnapshot()","isFinished()","completeSnapshot(Path, Path, FileSystem)","getException()","getCompletionTimestamp()","cancel(String)","process()","loadTableDescriptor()","getExceptionIfFailed()","rethrowExceptionIfFailed()","rethrowException()","snapshotDisabledRegion(RegionInfo)","prepare()"],"org.apache.hadoop.hbase.replication.regionserver.MetricsSource":["setAgeOfLastShippedOpByTable(long, String)","getPeerID()","getTimeStampOfLastShippedOp()","incrLogEditsFiltered()","incrRepeatedFileBytes(long)","incrLogReadInBytes(long)","incrBytesSkippedInUncleanlyClosedWALs(long)","incCounters(String, long)","refreshAgeOfLastShippedOp(String)","getMetricsDescription()","setAgeOfLastShippedOp(long, String)","decGauge(String, long)","incrFailedRecoveryQueue()","incrRestartedWALReading()","shipBatch(long, int, long)","getSingleSourceSourceByTable()","clear()","decrSizeOfLogQueue()","getAgeofLastShippedOp(String)","shipBatch(long, int)","incrUnknownFileLengthForClosedWAL()","incrSizeOfLogQueue()","incrLogEditsRead()","incrCompletedWAL()","incrLogEditsRead(long)","getAgeOfLastShippedOp()","getTimestampOfLastShippedOp()","removeMetric(String)","incrUncleanlyClosedWALs()","incrCompletedRecoveryQueue()","setGauge(String, long)","getMetricsName()","getLastTimeStampOfWalGroup(String)","getSizeOfLogQueue()","incrSizeOfHFileRefsQueue(long)","getMetricsContext()","getMetricsJmxContext()","incrLogEditsFiltered(long)","decrSizeOfHFileRefsQueue(int)","incGauge(String, long)","updateHistogram(String, long)","init()"],"org.apache.hadoop.hbase.regionserver.HStore":["moveCompactedFilesIntoPlace(CompactionRequestImpl, List, User)","createStoreFileAndReader(Path)","getScanners(boolean, boolean, boolean, ScanQueryMatcher, byte[], boolean, byte[], boolean, long)","determineTTLFromFamily(ColumnFamilyDescriptor)","getMaxStoreFileAge()","closeAndArchiveCompactedFiles()","removeCompactedfiles(Collection, boolean)","getMemStoreFlushSize()","timeOfOldestEdit()","preSnapshotOperation()","addToCompactingFiles(Collection)","deleteChangedReaderObserver(ChangedReadersObserver)","isSloppyMemStore()","loadStoreFiles()","refreshStoreFilesInternal(Collection)","startReplayingFromWAL()","triggerMajorCompaction()","getColumnFamilyDescriptor()","createStoreEngine(HStore, Configuration, CellComparator)","createFileContext(Compression.Algorithm, boolean, boolean, Encryption.Context)","getCompactionProgress()","registerChildren(ConfigurationManager)","getMaxSequenceId()","compactRecentForTestingAssumingDefaultPolicy(int)","createCacheConf(ColumnFamilyDescriptor)","getHRegion()","closeAndArchiveCompactedFiles(boolean)","getStoreSizeUncompressed()","refreshStoreFiles()","setScanInfo(ScanInfo)","getStoreFileTtl()","getMemstore()","getComparator()","getTotalStaticBloomSize()","requestCompaction()","getScanner(Scan, NavigableSet, long)","getCloseCheckInterval()","logCompactionEndMessage(CompactionRequestImpl, List, long, long)","getCacheConfig()","getChecksumType(Configuration)","bulkLoadHFile(byte[], String, Path)","shouldPerformMajorCompaction()","heapSize()","getTotalUncompressedBytes(List)","getCompactedFilesCount()","updateSpaceQuotaAfterFileReplacement(RegionSizeStore, RegionInfo, Collection, Collection)","canSplit()","getStoreHomedir(Path, RegionInfo, byte[])","snapshot()","setDataBlockEncoderInTest(HFileDataBlockEncoder)","bulkLoadHFile(HStoreFile)","close()","throttleCompaction(long)","getCompactedCellsCount()","getMaxMemStoreTS()","getStorefilesSize()","flushCache(long, MemStoreSnapshot, MonitoredTask, ThroughputController, FlushLifeCycleTracker)","getStoreFileAgeStream()","getFlushedCellsCount()","getNumReferenceFiles()","getRegionFileSystem()","requestCompaction(int, CompactionLifeCycleTracker, User)","getMinStoreFileAge()","openStoreFiles(Collection)","getScanners(List, boolean, boolean, boolean, ScanQueryMatcher, byte[], boolean, byte[], boolean, long, boolean)","getScanners(boolean, boolean, boolean, boolean, ScanQueryMatcher, byte[], byte[], long)","removeUnneededFiles()","add(Cell, MemStoreSizing)","onConfigurationChange(Configuration)","isPrimaryReplicaStore()","getOffPeakHours()","replayCompactionMarker(CompactionDescriptor, boolean, boolean)","postSnapshotOperation()","getAvgStoreFileAge()","commitFile(Path, long, MonitoredTask)","getCompactionPressure()","moveFileIntoPlace(Path)","getStorefilesSize(Collection, Predicate)","getStorefilesRootLevelIndexSize()","getStoreHomedir(Path, String, byte[])","replaceStoreFiles(Collection, Collection)","getHFilesSize()","getCoprocessorHost()","getFlushedCellsSize()","reportArchivedFilesForQuota(List, List)","createStoreFileAndReader(StoreFileInfo)","getTotalSize(Collection)","getScanners(List, boolean, boolean, boolean, boolean, ScanQueryMatcher, byte[], byte[], long, boolean)","hasReferences()","recreateScanners(List, boolean, boolean, boolean, ScanQueryMatcher, byte[], boolean, byte[], boolean, long, boolean)","bulkLoadHFile(StoreFileInfo)","getCompactedCellsSize()","getFileSystem()","upsert(Iterable, long, MemStoreSizing)","toString()","getCompactedFiles()","deregisterChildren(ConfigurationManager)","getCompactionCheckMultiplier()","getMajorCompactedCellsCount()","getBlockingFileCount()","assertBulkLoadHFileOk(Path)","addChangedReaderObserver(ChangedReadersObserver)","getSplitPoint()","getTotalStaticIndexSize()","getDataBlockEncoder()","stopReplayingFromWAL()","getFlushedOutputFileSize()","getStorefilesFieldSize(ToLongFunction)","needsCompaction()","getColumnFamilyName()","getStorefiles()","hasTooManyStoreFiles()","writeCompactionWalRecord(Collection, Collection)","getStorefilesCount()","clearAndClose(List)","cancelRequestedCompaction(CompactionContext)","getStorefileFieldSize(HStoreFile, ToLongFunction)","add(Iterable, MemStoreSizing)","doCompaction(CompactionRequestImpl, Collection, User, long, List)","getMajorCompactedCellsSize()","validateStoreFile(Path)","getNumHFiles()","getCompactPriority()","getScanInfo()","preFlushSeqIDEstimation()","preBulkLoadHFile(String, long)","getMemStoreSize()","getSnapshotSize()","createFlushContext(long, FlushLifeCycleTracker)","getStoreFileSize(HStoreFile)","compact(CompactionContext, ThroughputController, User)","finishCompactionRequest(CompactionRequestImpl)","versionsToReturn(int)","createScanner(Scan, ScanInfo, NavigableSet, long)","getCurrentParallelPutCount()","createWriterInTmp(long, Compression.Algorithm, boolean, boolean, boolean, boolean)","getSmallestReadPoint()","getLastCompactSize()","getSize()","getTableName()","notifyChangedReadersObservers(List)","areWritesEnabled()","clearCompactedfiles(List)","getBytesPerChecksum(Configuration)","updateStorefiles(List, long)","getStoreEngine()","completeCompaction(Collection)","getFlushableSize()","refreshStoreFiles(Collection)","getRegionInfo()"],"org.apache.hadoop.hbase.io.hfile.HFileBlock.FSReaderImpl":["readBlockData(long, long, boolean, boolean)","readAtOffset(FSDataInputStream, byte[], int, int, boolean, long, boolean)","toString()","verifyOnDiskSizeMatchesHeader(int, ByteBuffer, long, boolean)","blockRange(long, long)","getCachedHeader(long)","cacheNextBlockHeader(long, byte[], int, int)","getDefaultBlockDecodingContext()","readBlockDataInternal(FSDataInputStream, long, long, boolean, boolean, boolean)","unbufferStream()","closeStreams()","setIncludesMemStoreTS(boolean)","setDataBlockEncoder(HFileDataBlockEncoder)","checkAndGetSizeAsInt(long, int)","getBlockDecodingContext()","validateChecksum(long, ByteBuffer, int)"],"org.apache.hadoop.hbase.client.HBaseAdmin":["splitRegionSync(byte[], byte[])","clearCompactionQueues(ServerName, Set)","listTableDescriptorsByNamespace(String)","getRpcControllerFactory()","majorCompactRegionServer(ServerName)","splitRegionAsync(byte[], byte[])","getTableDescriptor(TableName, Connection, RpcRetryingCallerFactory, RpcControllerFactory, int, int)","removeReplicationPeerTableCFs(String, Map)","modifyTable(TableDescriptor)","compactRegion(byte[], byte[], boolean)","assign(byte[])","getCompactionStateForRegion(byte[])","restoreSnapshot(String)","decommissionRegionServers(List, boolean)","restoreSnapshot(String, boolean)","disableReplicationPeerAsync(String)","setQuota(QuotaSettings)","updateReplicationPeerConfigAsync(String, ReplicationPeerConfig)","shutdown()","createTable(TableDescriptor, byte[][])","listReplicatedTableCFs()","normalize()","removeReplicationPeer(String)","restoreSnapshot(String, boolean, boolean)","deleteTable(TableName)","isProcedureFinished(String, String, Map)","splitOrMergeSwitch(boolean, boolean, MasterSwitchType)","getClusterMetrics(EnumSet)","deleteNamespaceAsync(String)","listSnapshots(Pattern)","getTableRegions(TableName)","majorCompact(TableName, byte[], CompactType)","runCatalogJanitor()","isAborted()","asyncSnapshot(SnapshotProtos.SnapshotDescription)","splitRegionAsync(RegionInfo, byte[])","recommissionRegionServer(ServerName, List)","balancerSwitch(boolean, boolean)","listNamespaceDescriptors()","compact(TableName)","clearBlockCache(ServerName, List)","snapshot(String, TableName, SnapshotType)","disableTables(Pattern)","mergeSwitch(boolean, boolean)","enableReplicationPeerAsync(String)","clearDeadServers(List)","getTableDescriptor(TableName)","deleteTables(String)","getRegions(ServerName)","listTableNames()","compactRegionServer(ServerName)","splitRegionSync(byte[], byte[], long, TimeUnit)","mergeRegions(byte[], byte[], boolean)","modifyTableAsync(TableName, TableDescriptor)","rollHLogWriter(String)","internalRestoreSnapshotAsync(String, TableName, boolean)","snapshot(byte[], TableName)","cloneTableSchema(TableName, TableName, boolean)","split(TableName)","getRegionName(byte[])","modifyTableAsync(TableDescriptor)","listTableDescriptors(List)","listReplicationPeers()","enableReplicationPeer(String)","isCatalogJanitorEnabled()","executeCallable(C)","listTableNames(String)","getRegionMetrics(ServerName, TableName)","getLocks()","getDescriptor(TableName)","deleteColumnFamilyAsync(TableName, byte[])","getRegions(TableName)","listTables(String)","coprocessorService()","listTables(Pattern, boolean)","enableTableReplication(TableName)","updateConfiguration()","normalizerSwitch(boolean)","majorCompact(TableName, CompactType)","disableTable(TableName)","checkAndSyncTableDescToPeers(TableName, byte[][])","closeRegion(ServerName, HRegionInfo)","majorCompact(TableName, byte[])","restoreSnapshot(byte[], boolean)","mergeRegionsAsync(byte[], byte[], boolean)","disableReplicationPeer(String)","abort(String, Throwable)","listTableNames(String, boolean)","catalogJanitorSwitch(boolean)","mergeRegionsSync(byte[], byte[], boolean)","getOperationTimeout()","disableTableAsync(TableName)","cleanerChoreSwitch(boolean)","compact(TableName, CompactType)","getConfiguration()","snapshot(String, TableName)","listSnapshots(String)","enableTableAsync(TableName)","createNamespace(NamespaceDescriptor)","available(Configuration)","getReplicationPeerConfig(String)","offline(byte[])","closeRegion(String, String)","disableTableReplication(TableName)","abortProcedureAsync(long, boolean)","enableTable(TableName)","enableTables(String)","createTableAsync(TableDescriptor, byte[][])","internalDeleteSnapshot(SnapshotDescription)","split(TableName, byte[])","getPauseTime(int)","listTableNamesByNamespace(String)","deleteNamespace(String)","balance(boolean)","snapshot(SnapshotDescription)","splitSwitch(boolean, boolean)","snapshotAsync(SnapshotDescription)","compact(TableName, byte[])","clearBlockCache(TableName)","compact(AdminService.BlockingInterface, RegionInfo, boolean, byte[])","cloneSnapshotAsync(String, TableName)","deleteSnapshots(String)","getHTableDescriptor(TableName, Connection, RpcRetryingCallerFactory, RpcControllerFactory, int, int)","isCleanerChoreEnabled()","isSnapshotFinished(SnapshotDescription)","listTableDescriptors(Pattern, boolean)","getQuota(QuotaFilter)","getAlterStatus(byte[])","addReplicationPeerAsync(String, ReplicationPeerConfig, boolean)","rollWALWriterImpl(ServerName)","restoreSnapshotAsync(String)","checkTableExists(TableName)","execProcedure(String, String, Map)","getRegion(byte[])","updateConfiguration(ServerName)","createNamespaceAsync(NamespaceDescriptor)","getTableNameBeforeRestoreSnapshot(String)","setTableRep(TableName, boolean)","getSecurityCapabilities()","removeReplicationPeerAsync(String)","listTableSnapshots(Pattern, Pattern)","listTableDescriptorsByNamespace(byte[])","listDecommissionedRegionServers()","getConnection()","deleteTables(Pattern)","compact(TableName, byte[], CompactType)","isTableDisabled(TableName)","compactRegion(byte[])","isBalancerEnabled()","majorCompactRegion(byte[], byte[])","listTableNames(Pattern, boolean)","deleteColumn(TableName, byte[])","getQuotaRetriever(QuotaFilter)","rollWALWriter(ServerName)","modifyTable(TableName, TableDescriptor)","deleteTableAsync(TableName)","modifyColumnFamily(TableName, ColumnFamilyDescriptor)","addColumnFamily(TableName, ColumnFamilyDescriptor)","deleteColumnFamily(TableName, byte[])","close()","deleteTableSnapshots(Pattern, Pattern)","splitRegion(byte[])","compact(TableName, byte[], boolean, CompactType)","truncateTable(TableName, boolean)","flush(TableName)","deleteTableSnapshots(String, String)","listTables(String, boolean)","modifyNamespace(NamespaceDescriptor)","closeRegion(byte[], String)","runCleanerChore()","deleteSnapshot(byte[])","appendReplicationPeerTableCFs(String, Map)","createTable(TableDescriptor, byte[], byte[], int)","majorCompactRegion(byte[])","executeCallable(C, RpcRetryingCallerFactory, int, int)","mergeRegionsAsync(byte[][], boolean)","getLastMajorCompactionTimestampForRegion(byte[])","getAlterStatus(TableName)","unassign(byte[], boolean)","cloneSnapshot(byte[], TableName)","getLastMajorCompactionTimestamp(TableName)","deleteSnapshot(String)","listTableNames(Pattern)","listTableSnapshots(String, String)","listTableDescriptors(Pattern)","execProcedureWithReturn(String, String, Map)","majorCompact(TableName)","isSplitEnabled()","compactRegion(byte[], byte[])","flushRegionServer(ServerName)","get(Future, long, TimeUnit)","isMasterInMaintenanceMode()","move(byte[], byte[])","createTable(TableDescriptor)","disableTables(String)","addColumnFamilyAsync(TableName, ColumnFamilyDescriptor)","stopRegionServer(String)","enableTables(Pattern)","listSnapshots()","flushRegion(byte[])","balance()","flush(AdminService.BlockingInterface, RegionInfo)","getOnlineRegions(ServerName)","coprocessorService(ServerName)","isTableAvailable(TableName, byte[][])","isTableEnabled(TableName)","deleteSnapshots(Pattern)","tableExists(TableName)","isNormalizerEnabled()","getProcedures()","cloneSnapshot(String, TableName)","isMergeEnabled()","cloneSnapshot(String, TableName, boolean)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","closeRegionWithEncodedRegionName(String, String)","restoreSnapshot(byte[])","listTables(Pattern)","addReplicationPeer(String, ReplicationPeerConfig, boolean)","modifyColumnFamilyAsync(TableName, ColumnFamilyDescriptor)","listTables()","abortProcedure(long, boolean)","getTableDescriptors(List)","getTableSplits(TableName)","getNamespaceDescriptor(String)","splitRegion(byte[], byte[])","isTableAvailable(TableName)","getCompactionState(TableName)","listReplicationPeers(Pattern)","stopMaster()","listTableDescriptors()","modifyNamespaceAsync(NamespaceDescriptor)","getTableDescriptorsByTableName(List)","truncateTableAsync(TableName, boolean)","getCompactionState(TableName, CompactType)"],"org.apache.hadoop.hbase.regionserver.StoreFileInfo":["open(FileSystem, CacheConfig, boolean, long, boolean, AtomicInteger, boolean)","getReferredToFile(Path)","computeRefFileHDFSBlockDistribution(FileSystem, Reference, FileStatus)","getReference()","getModificationTime()","computeHDFSBlocksDistributionInternal(FileSystem)","hashCode()","isDelFile(String)","isReference(String)","getPath()","isReference(Path)","equals(Object)","isTopReference()","validateStoreFileName(String)","computeHDFSBlocksDistribution(FileSystem)","toString()","isDelFile(Path)","getReferencedFileStatus(FileSystem)","getSize()","setRegionCoprocessorHost(RegionCoprocessorHost)","getFileStatus()","getActiveFileName()","isLink()","getHDFSBlockDistribution()","getCreatedTimestamp()","isHFile(Path)","isHFile(String)","isValid(FileStatus)","isReference()"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputHelper.FileCreator":["create(ClientProtocol, String, FsPermission, String, EnumSetWritable, boolean, short, long, CryptoProtocolVersion[])"],"org.apache.hadoop.hbase.ipc.ServerRpcConnection":["getHostAddress()","createUser(ConnectionHeader)","processPreamble(ByteBuffer)","processOneRpc(ByteBuff)","processConnectionHeader(ByteBuff)","getAuthorizedUgi(String)","setupCellBlockCodecs(ConnectionHeader)","getByteString(byte[])","processUnwrappedData(byte[])","doBadPreambleHandling(String, Exception)","getHostInetAddress()","getErrorResponse(String, Exception)","getVersionInfo()","doBadPreambleHandling(String)","processRequest(ByteBuff)","getFatalConnectionString(int, byte)","responseConnectionHeader(RPCProtos.ConnectionHeaderResponse.Builder)","toString()","authorizeConnection()","disposeSasl()","setupCryptoCipher(ConnectionHeader, RPCProtos.ConnectionHeaderResponse.Builder)","getRemotePort()","doRawSaslReply(SaslStatus, Writable, String, String)","saslReadAndProcess(ByteBuff)"],"org.apache.hadoop.hbase.regionserver.CompositeImmutableSegment":["updateMetaInfo(Cell, boolean, boolean, MemStoreSizing)","getHeapSize()","setCellSet(CellSet, CellSet)","headSet(Cell)","getCellSet()","tailSet(Cell)","getCellsCount()","getDataSize()","getMinSequenceId()","getNumOfSegments()","indexEntrySize()","compare(Cell, Cell)","last()","maybeCloneWithAllocator(Cell, boolean)","getScanners(long)","compareRows(Cell, Cell)","getTimeRangeTracker()","shouldSeek(TimeRange, long)","decScannerCount()","internalAdd(Cell, boolean, MemStoreSizing)","getScanner(long)","close()","incMemStoreSize(long, long, long, int)","isEmpty()","toString()","canBeFlattened()","dump(Logger)","getAllSegments()","incScannerCount()","iterator()","isTagsPresent()","getSnapshotScanners()"],"org.apache.hadoop.hbase.regionserver.wal.AbstractFSWAL":["appendEntry(W, FSWALEntry)","tellListenersAboutPreLogRoll(Path, Path)","postAppend(Entry, long)","postSync(long, int)","getCoprocessorHost()","startCacheFlush(byte[], Map)","findRegionsToForceFlush()","getFilenum()","getNumRolledLogFiles()","usage()","isLogRollRequested()","split(Configuration, Path)","completeCacheFlush(byte[])","toString()","shutdown()","atHeadOfRingBufferEventHandlerAppend()","getOldPath()","getNewPath()","logRollAndSetupWalProps(Path, Path, long)","getFileNumFromFileName(Path)","ensureIOException(Throwable)","convertInterruptedExceptionToIOException(InterruptedException)","rollWriter()","blockOnSync(SyncFuture)","getEarliestMemStoreSeqNum(byte[], byte[])","archiveLogFile(Path)","getLogFileSize()","getCurrentFileName()","computeFilename(long)","appendData(RegionInfo, WALKeyImpl, WALEdit)","unregisterWALActionsListener(WALActionsListener)","isUnflushedEntries()","rollWriter(boolean)","cleanOldLogs()","getFiles()","getLogFileSizeIfBeingWritten(Path)","getNumLogFiles()","replaceWriter(Path, Path, W)","checkLogLowReplication(long)","getEarliestMemStoreSeqNum(byte[])","main(String[])","close()","appendMarker(RegionInfo, WALKeyImpl, WALEdit)","getWALArchivePath(Path, Path)","requestLogRoll(boolean)","startCacheFlush(byte[], Set)","abortCacheFlush(byte[])","calculateMaxLogFiles(Configuration, long)","requestLogRoll()","tellListenersAboutPostLogRoll(Path, Path)","updateStore(byte[], byte[], Long, boolean)","getUnflushedEntriesCount()","getPreallocatedEventCount()","registerWALActionsListener(WALActionsListener)","stampSequenceIdAndPublishToRingBuffer(RegionInfo, WALKeyImpl, WALEdit, boolean, RingBuffer)","getSyncFuture(long, boolean)","init()"],"org.apache.hadoop.hbase.ipc.RpcConnection":["relogin()","scheduleTimeoutTask(Call)","getLastTouched()","shouldAuthenticateOverKrb()","getUserInfo(UserGroupInformation)","getConnectionHeaderPreamble()","getConnectionHeader()","getUGI()","remoteId()","setLastTouched(long)"],"org.apache.hadoop.hbase.security.token.TokenUtil":["getAuthToken(Configuration, User)","injectFault()","getClusterId(Token)","obtainToken(Connection)","toToken(AuthenticationProtos.Token)","toToken(Token)","addTokenIfMissing(Connection, User)","obtainAndCacheToken(Connection, User)","addTokenForJob(Connection, JobConf, User)","obtainTokenForJob(Connection, JobConf, User)","obtainToken(Connection, User)","obtainToken(Configuration)","obtainTokenForJob(Connection, User, Job)","addTokenForJob(Connection, User, Job)"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputSaslHelper.SaslUnwrapHandler":["channelRead0(ChannelHandlerContext, ByteBuf)","channelInactive(ChannelHandlerContext)"],"org.apache.hadoop.hbase.HRegionInfo":["getShortNameToLog()","isMetaRegion()","isSystemTable()","isSplitParent()","getStartKey()","getEncodedName()","getReplicaId()","getRegionNameForDisplay(HRegionInfo, Configuration)","convert(HRegionInfo)","getRegionNameAsStringForDisplay(HRegionInfo, Configuration)","encodeRegionName(byte[])","getTable(byte[])","containsRange(byte[], byte[])","setSplit(boolean)","createRegionName(TableName, byte[], long, boolean)","equals(Object)","getTable()","containsRow(byte[])","setHashCode()","toString()","getShortNameToLog(HRegionInfo[])","createRegionName(TableName, byte[], byte[], int, boolean)","isEncodedRegionName(byte[])","toByteArray()","toDelimitedByteArray()","setOffline(boolean)","parseRegionName(byte[])","isSplit()","convert(HBaseProtos.RegionInfo)","getStartKey(byte[])","parseFrom(byte[])","getComparator()","getStartKeyForDisplay(HRegionInfo, Configuration)","isOffline()","toDelimitedByteArray(HRegionInfo[])","areAdjacent(HRegionInfo, HRegionInfo)","parseFrom(byte[], int, int)","createRegionName(TableName, byte[], String, boolean)","getShortNameToLog(List)","parseFrom(DataInputStream)","compareTo(HRegionInfo)","isMetaTable()","getRegionName()","prettyPrint(String)","parseFromOrNull(byte[], int, int)","hashCode()","createRegionName(TableName, byte[], byte[], boolean)","createRegionName(TableName, byte[], long, int, boolean)","getDescriptiveNameFromRegionStateForDisplay(RegionState, Configuration)","convert()","getRegionNameAsString()","getEndKey()","parseDelimitedFrom(byte[], int, int)","getEndKeyForDisplay(HRegionInfo, Configuration)","getRegionId()","getEncodedNameAsBytes()","parseFromOrNull(byte[])"],"org.apache.hadoop.hbase.util.HBaseFsck":["sidelineFile(FileSystem, Path, Path)","setFixEmptyMetaCells(boolean)","processRegionServers(Collection)","recordMetaRegion()","setMaxMerge(int)","shouldRemoveParents()","connect()","isExclusive()","setSummary()","includeTable(TableName)","unlockHbck()","setFixSplitParents(boolean)","setFixVersionFile(boolean)","setCleanReplicationBarrier(boolean)","setFixReplication(boolean)","setFixHdfsHoles(boolean)","setFixHFileLinks(boolean)","setForceExclusive()","setFixMeta(boolean)","shouldFixSplitParents()","getErrors()","setFixAssignments(boolean)","shouldFixMeta()","setIgnorePreCheckPermission(boolean)","getMaxMerge()","onlineConsistencyRepair()","fabricateTableInfo(FSTableDescriptors, TableName, Set)","fixOrphanTables()","addSkippedRegion(HbckRegionInfo)","getMaxOverlapsToSideline()","setRetCode(int)","checkRegionConsistency(String, HbckRegionInfo)","shouldFixHdfsHoles()","getColumnFamilyList(Set, HbckRegionInfo)","isTableDisabled(TableName)","printTableSummary(SortedMap)","getRetCode()","setFixHdfsOverlaps(boolean)","setHFileCorruptionChecker(HFileCorruptionChecker)","mergeRegionDirs(Path, HbckRegionInfo)","getSidelineDir()","getTmpDir(Configuration)","cleanupHbckZnode()","checkIntegrity()","shouldFixHdfsOrphans()","checkAndFixReplication()","shouldFixAssignments()","setFixReferenceFiles(boolean)","main(String[])","close()","reportEmptyMetaCells()","sidelineRegionDir(FileSystem, HbckRegionInfo)","setFixTableOrphans(boolean)","setShouldRerun()","isTableIncluded(TableName)","offlineHLinkFileRepair()","getMetaRegionServerName(int)","resetSplitParent(HbckRegionInfo)","shouldRerun()","printUsageAndExit()","loadMetaEntries()","setMasterInMaintenanceMode()","keyOnly(byte[])","setCleanReplicationBarrierTable(String)","restoreHdfsIntegrity()","preCheckPermission()","getHFilecorruptionChecker()","deleteMetaRegion(byte[])","shouldFixHFileLinks()","offlineReferenceFileRepair()","setRegionBoundariesCheck()","setMaxOverlapsToSideline(int)","createThreadPool(Configuration)","undeployRegions(HbckRegionInfo)","shouldIgnorePreCheckPermission()","createLockRetryCounterFactory(Configuration)","reportTablesInFlux()","setRemoveParents(boolean)","assignMetaReplica(int)","checkRegionConsistencyConcurrently(List)","createHFileCorruptionChecker(boolean)","loadHdfsRegionDirs()","checkAndFixTableStates()","adoptHdfsOrphan(HbckRegionInfo)","exec(ExecutorService, String[])","isOptionsSupported(String[])","checkRegionBoundaries()","setFixHdfsOrphans(boolean)","tryAssignmentRepair(HbckRegionInfo, String)","debugLsr(Configuration, Path, HbckErrorReporter)","shouldCheckHdfs()","setSidelineBigOverlaps(boolean)","fixEmptyMetaCells()","clearState()","onlineHbck()","createZooKeeperWatcher()","deleteMetaRegion(HbckRegionInfo)","setSidelineDir(String)","shouldFixVersionFile()","getIncludedTables()","adoptHdfsOrphans(Collection)","getOrCreateInfo(String)","loadDeployedRegions()","getErrorReporter(Configuration)","loadTableStates()","offline(byte[])","checkMetaRegion()","setDisplayFullReport()","shouldDisplayFullReport()","shouldSidelineBigOverlaps()","shouldFixReferenceFiles()","unassignMetaReplica(HbckRegionInfo)","logParallelMerge()","offlineHdfsIntegrityRepair()","getTableDescriptors(List)","getTables(AtomicInteger)","undeployRegionsForHbi(HbckRegionInfo)","shouldFixTableOrphans()","shouldFixHdfsOverlaps()","debugLsr(Path)","sidelineRegionDir(FileSystem, String, HbckRegionInfo)","setCheckMetaOnly()","checkAndMarkRunningHbck(Configuration, RetryCounter)","shouldFixEmptyMetaCells()","setTimeLag(long)","cleanReplicationBarrier()","closeRegion(HbckRegionInfo)","setCheckHdfs(boolean)","loadHdfsRegionInfos()","createZnodeRetryCounterFactory(Configuration)","checkAndFixConsistency()","loadTableInfosForTablesWithNoRegion()","debugLsr(Configuration, Path)","checkHdfsIntegrity(boolean, boolean)"],"org.apache.hadoop.hbase.io.hfile.HFileBlock":["getOffset()","getSerializedLength()","totalChecksumBytes()","init(BlockType, int, int, long, long, int, int, HFileContext)","getDummyHeaderForVersion(boolean)","getOnDiskSizeWithoutHeader()","overwriteHeader()","getHFileContext()","heapSize()","getDeserializer()","usesSharedMemory()","unpack(HFileContext, FSReader)","sanityCheckUncompressed()","hashCode()","serialize(ByteBuffer, boolean)","sanityCheckAssertion(BlockType, BlockType)","headerSize()","getMemoryType()","readWithExtra(InputStream, byte[], int, int, int)","getChecksumType()","positionalReadWithExtra(FSDataInputStream, long, byte[], int, int, int)","addMetaData(ByteBuffer, boolean)","equals(Object)","getNextBlockOnDiskSize()","allocateBuffer()","getDataBlockEncodingId()","getOnDiskSizeWithHeader(ByteBuffer, boolean)","toString()","getMetaData()","getUncompressedSizeWithoutHeader()","sanityCheck()","getPrevBlockOffset()","getOnDiskDataSizeWithHeader()","sanityCheckUncompressedSize()","sanityCheckAssertion(long, long, String)","getByteStream()","toStringHeader(ByteBuff)","getBufferReadOnly()","getDataBlockEncoding()","isUnpacked()","getDummyHeaderForVersion()","getBlockType()","getOnDiskSizeWithHeader()","getBufferWithoutHeader()","getBytesPerChecksum()","deepClone()","headerSize(boolean)"],"org.apache.hadoop.hbase.quotas.TimeBasedLimiter":["checkQuota(long, long, long, long)","grabQuota(long, long, long, long)","setFromTimedQuota(RateLimiter, TimedQuota)","toString()","update(TimeBasedLimiter)","consumeWrite(long)","fromThrottle(Throttle)","isBypass()","getReadAvailable()","getWriteAvailable()","consumeRead(long)"],"org.apache.hadoop.hbase.wal.WALSplitter.LogRecoveredEditsOutputSink":["finishWritingAndClose()","closeLogWriters(List)","executeCloseTask(CompletionService, List, List)","keepRegionEvent(Entry)","appendBuffer(RegionEntryBuffer, boolean)","closeWriter(String, WriterAndPath, List)","getOutputCounts()","getNumberOfRecoveredRegions()","append(RegionEntryBuffer)","deleteOneWithFewerEntries(WriterAndPath, Path)","getWriterAndPath(Entry, boolean)","createWAP(byte[], Entry)","filterCellByStore(Entry)","close()"],"org.apache.hadoop.hbase.master.normalizer.SplitNormalizationPlan":["setSplitPoint(byte[])","setRegionInfo(RegionInfo)","getSplitPoint()","toString()","getType()","execute(Admin)","getRegionInfo()"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputSaslHelper.SaslClientCallbackHandler":["handle(Callback[])"],"org.apache.hadoop.hbase.ipc.NettyRpcConnection":["shutdown0()","scheduleRelogin(Throwable)","shutdown()","sendRequest(Call, HBaseRpcController)","failInit(Channel, IOException)","saslNegotiate(Channel)","established(Channel)","write(Channel, Call)","callTimeout(Call)","isActive()","connect()","cleanupConnection()"],"org.apache.hadoop.hbase.io.hfile.bucket.ByteBufferIOEngine":["read(long, int, CacheableDeserializer)","isPersistent()","sync()","toString()","write(ByteBuffer, long)","shutdown()","usesSharedMemory()","write(ByteBuff, long)"],"org.apache.hadoop.hbase.monitoring.LogMonitoring":["dumpTailOfLogs(PrintWriter, long)","dumpTailOfLog(File, PrintWriter, long)","getActiveLogFiles()"],"org.apache.hadoop.hbase.io.hfile.HFile.WriterFactory":["withPath(FileSystem, Path)","withShouldDropCacheBehind(boolean)","withComparator(CellComparator)","withFileContext(HFileContext)","withOutputStream(FSDataOutputStream)","create()","withFavoredNodes(InetSocketAddress[])"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.RegionOpenOperation":["isFailedOpen()","setFailedOpen(boolean)","buildRegionOpenInfoRequest(MasterProcedureEnv)"],"org.apache.hadoop.hbase.io.hfile.BlockCache":["returnBlock(BlockCacheKey, Cacheable)"],"org.apache.hadoop.hbase.master.MasterWalManager":["getSplittingServersFromWALDir()","getWALDirPaths(PathFilter)","getServerNamesFromWALDirPath(PathFilter)","getWALDirectoryName(ServerName)","getWALDirPath()","getFileSystem()","getLiveServersFromWALDir()","getSplitLogManager()","createAndGetLogDirs(Set)","archiveMetaLog(ServerName)","getOldLogDir()","splitLog(Set, PathFilter)","splitLog(ServerName)","stop()","splitMetaLog(ServerName)","isWALDirectoryNameWithWALs(ServerName)","getFailedServersFromLogFolders()","splitLog(Set)","splitMetaLog(Set)","checkFileSystem()"],"org.apache.hadoop.hbase.master.balancer.SimpleLoadBalancer":["addRegionPlan(MinMaxPriorityQueue, boolean, ServerName, List)","onConfigurationChange(Configuration)","balanceCluster(TableName, Map)","balanceCluster(Map)","setClusterLoad(Map)","balanceOverall(List, Map, boolean, MinMaxPriorityQueue, int, int)","overallNeedsBalance()","setLoad(List, int, int)"],"org.apache.hadoop.hbase.client.MetricsConnection":["updateRpc(MethodDescriptor, Message, CallStats)","newCallStats()","incrMetaCacheNumClearRegion()","getExecutorPoolName()","getMetaPoolName()","shutdown()","incrMetaCacheHit()","getMetricRegistry()","incrHedgedReadWin()","incrDelayRunners()","updateDelayInterval(long)","updateServerStats(ServerName, byte[], Object)","getMetric(String, ConcurrentMap, NewMetric)","updateRegionStats(ServerName, byte[], RegionLoadStats)","incrMetaCacheNumClearServer()","incrMetaCacheMiss()","incrCacheDroppingExceptions(Object)","incrHedgedReadOps()","incrNormalRunners()","updateRpcGeneric(MethodDescriptor, CallStats)"],"org.apache.hadoop.hbase.regionserver.Segment":["updateMetaInfo(Cell, boolean, boolean, MemStoreSizing)","getHeapSize()","setCellSet(CellSet, CellSet)","headSet(Cell)","indexEntryOffHeapSize(boolean)","getCellSet()","tailSet(Cell)","getDataSize()","getCellsCount()","getMinSequenceId()","getOffHeapSize()","compare(Cell, Cell)","last()","getScanners(long)","maybeCloneWithAllocator(Cell, boolean)","compareRows(Cell, Cell)","getTimeRangeTracker()","getMemStoreSize()","indexEntryOnHeapSize(boolean)","shouldSeek(TimeRange, long)","decScannerCount()","internalAdd(Cell, boolean, MemStoreSizing)","getScanner(long)","close()","incMemStoreSize(long, long, long, int)","isEmpty()","heapSizeChange(Cell, boolean)","toString()","updateMetaInfo(Cell, boolean, MemStoreSizing)","dump(Logger)","getMemStoreLAB()","incScannerCount()","offHeapSizeChange(Cell, boolean)","iterator()","getCellLength(Cell)","isTagsPresent()","getComparator()"],"org.apache.hadoop.hbase.regionserver.Leases":["run()","cancelLease(String)","createLease(String, int, LeaseListener)","addLease(Lease)","removeLease(String)","closeAfterLeasesExpire()","close()","renewLease(String)"],"org.apache.hadoop.hbase.io.hfile.HFile":["updateWriteLatency(long)","updateReadLatency(long, boolean)","getWriterFactory(Configuration, CacheConfig)","isHFileFormat(FileSystem, Path)","checkHFileVersion(Configuration)","openReader(Path, FSDataInputStreamWrapper, long, CacheConfig, HFileSystem, boolean, Configuration)","getAndResetChecksumFailuresCount()","getStoreFiles(FileSystem, Path)","createReader(FileSystem, Path, CacheConfig, boolean, Configuration)","createReader(FileSystem, Path, FSDataInputStreamWrapper, long, CacheConfig, boolean, Configuration)","createReader(FileSystem, Path, Configuration)","getWriterFactoryNoCache(Configuration)","getSupportedCompressionAlgorithms()","createReaderFromStream(Path, FSDataInputStream, long, CacheConfig, Configuration)","checkFormatVersion(int)","getFormatVersion(Configuration)","isHFileFormat(FileSystem, FileStatus)","getChecksumFailuresCount()","isReservedFileInfoKey(byte[])","longToInt(long)","main(String[])"],"org.apache.hadoop.hbase.master.TableStateManager":["updateMetaState(TableName, TableState.State)","metaStateDeleted(TableName)","fixTableState(TableState)","getTablesInStates(TableState.State[])","setTableStateIfNotInStates(TableName, TableState.State, TableState.State[])","start()","getTableState(TableName)","readMetaState(TableName)","setTableState(TableName, TableState.State)","setTableStateIfInStates(TableName, TableState.State, TableState.State[])","isTableState(TableName, TableState.State[])","isTablePresent(TableName)","deleteZooKeeper(TableName)","metaStateUpdated(TableName, TableState.State)","fixTableStates(TableDescriptors, Connection)","migrateZooKeeper()","setDeletedTable(TableName)"],"org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer.RegionReplicaCandidateGenerator":["generate(Cluster)","selectCoHostedRegionPerGroup(int[], int[], int[])"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.CloseRegionRemoteCall":["run()","sendRequest(ServerName, CloseRegionRequest)","remoteCallCompleted(MasterProcedureEnv, CloseRegionResponse)","remoteCallFailed(MasterProcedureEnv, IOException)"],"org.apache.hadoop.hbase.tool.LoadIncrementalHFiles.LoadQueueItem":["getFamily()","getFilePath()","toString()"],"org.apache.hadoop.hbase.io.hfile.CacheConfig":["isInMemory()","isBlockCacheEnabled()","shouldLockOnCacheMiss(BlockType)","setEvictOnClose(boolean)","shouldReadBlockFromCache(BlockType)","shouldCacheDataOnWrite()","shouldDropBehindCompaction()","getOnHeapCache(Configuration)","clearGlobalInstances()","shouldCacheCompressed(BlockCategory)","shouldCacheDataOnRead()","getOnHeapCacheInternal(Configuration)","getL2CacheStats()","shouldPrefetchOnOpen()","instantiateBlockCache(Configuration)","getOnHeapCacheStats()","setCacheDataOnWrite(boolean)","shouldCacheBloomsOnWrite()","toString()","getExternalBlockcache(Configuration)","shouldEvictOnClose()","getBlockCache()","shouldCacheBlockOnRead(BlockCategory)","getBucketCache(Configuration)","shouldCacheIndexesOnWrite()","shouldCacheDataCompressed()"],"org.apache.hadoop.hbase.regionserver.wal.MetricsWAL":["postAppend(long, long, WALKey, WALEdit)","logRollRequested(boolean)","postSync(long, int)"],"org.apache.hadoop.hbase.client.AsyncRequestFutureImpl":["createSingleServerRequest(MultiAction, int, ServerName, Set)","decActionCounter(int)","groupAndSendMultiAction(List, int)","getReplicaLocationOrFail(Action)","getNewMultiActionRunnable(ServerName, MultiAction, int)","createLog(int, int, int, ServerName, Throwable, long, boolean, String, int, int)","updateCachedLocations(ServerName, byte[], byte[], Throwable)","waitUntilDone()","waitUntilDone(long)","getNumberOfActionsInProgress()","createServerErrorTracker()","findAllLocationsOrFail(Action, boolean)","getFailedOperations()","createCallable(ServerName, TableName, MultiAction)","sendMultiAction(Map, int, List, boolean)","getCallsInProgress()","isActionComplete(int, Row)","setResult(Action, Object)","receiveGlobalFailure(MultiAction, ServerName, int, Throwable)","manageError(int, Row, Retry, Throwable, ServerName)","setError(int, Row, Throwable, ServerName)","updateStats(ServerName, Map)","cleanServerCache(ServerName, Throwable)","buildDetailedErrorMsg(String, int)","receiveMultiAction(MultiAction, ServerName, MultiResponse, int)","hasError()","getErrors()","manageLocationError(Action, Exception)","startWaitingForReplicaCalls(List)","logNoResubmit(ServerName, int, int, Throwable, int, int)","getResults()","getBackoff(ServerName, byte[])","invokeCallBack(byte[], byte[], CResult)","trySetResultSimple(int, Row, boolean, Object, ServerName, boolean)","resubmit(ServerName, List, int, int, Throwable)","updateResult(int, Object)"],"org.apache.hadoop.hbase.client.QuotaStatusCalls":["getMasterRegionSizes(Connection, RpcControllerFactory, RpcRetryingCallerFactory, int)","getMasterQuotaStates(Connection, RpcControllerFactory, RpcRetryingCallerFactory, int)","getRegionServerQuotaSnapshot(ClusterConnection, int, ServerName)","getMasterQuotaStates(ClusterConnection, int)","getRegionServerQuotaSnapshot(ClusterConnection, RpcControllerFactory, int, ServerName)","getMasterRegionSizes(ClusterConnection, int)"],"org.apache.hadoop.hbase.MetaTableAccessor":["mergeRegions(Connection, RegionInfo, Map, ServerName, int)","scanMeta(Connection, TableName, QueryType, int, Visitor)","overwriteRegions(Connection, List, int)","getTableStateColumn()","getDaughterRegions(Result)","getTableRegionsAndLocations(Connection, TableName)","getSeqNumDuringOpen(Result, int)","deleteTableState(Connection, TableName)","getReplicationBarrier(Cell)","isMergeQualifierPrefix(Cell)","getServerNameColumn(int)","getStartCodeColumn(int)","fullScan(Connection, QueryType)","debugLogMutations(List)","addRegionsToMeta(Connection, List, int, long)","deleteMergeQualifiers(Connection, RegionInfo)","addLocation(Put, ServerName, long, int)","scanMeta(Connection, byte[], byte[], QueryType, Filter, int, Visitor)","parseRegionInfoFromRegionName(byte[])","getRegionInfo(Result)","multiMutate(Connection, Table, byte[], List)","getTableRegions(Connection, TableName)","scanMeta(Connection, Visitor, TableName, byte[], int)","addMergeRegions(Put, Collection)","getTableState(Connection, TableName)","getRegionCount(Connection, TableName)","getTableRegionsAndLocations(Connection, TableName, boolean)","parseReplicaIdFromServerColumn(byte[])","put(Table, Put)","getParentsBytes(List)","getTableStopRowForMeta(TableName, QueryType)","getMetaKeyForRegion(RegionInfo)","debugLogMutation(Mutation)","makePutFromRegionInfo(RegionInfo, long)","get(Table, Get)","getRegion(Connection, byte[])","getSeqNumColumn(int)","getServerName(Result, int)","getReplicationBarriers(Result)","tableExists(Connection, TableName)","scanMeta(Connection, byte[], byte[], QueryType, int, Visitor)","splitRegion(Connection, RegionInfo, long, RegionInfo, RegionInfo, ServerName, int)","putsToMetaTable(Connection, List)","removeRegionReplicasFromMeta(Set, int, int, Connection)","getReplicationBarrierResult(Connection, TableName, byte[], byte[])","deleteRegionInfo(Connection, RegionInfo)","getTableStartRowForMeta(TableName, QueryType)","getRegionStateColumn()","addRegionStateToPut(Put, RegionState.State)","multiMutate(Connection, Table, byte[], Mutation[])","fullScanRegions(Connection, Visitor)","getRegionLocation(Connection, byte[])","deleteFromMetaTable(Connection, Delete)","fullScanRegions(Connection)","hasMergeRegions(Cell[])","scanMetaForTableRegions(Connection, Visitor, TableName)","getReplicationBarrierResult(Result)","makePutFromTableState(TableState, long)","getClosestRegionInfo(Connection, TableName, byte[])","parseParentsBytes(byte[])","addDaughtersToPut(Put, RegionInfo, RegionInfo)","getTableStates(Connection)","updateLocation(Connection, RegionInfo, ServerName, long, long)","getRegionLocation(Connection, RegionInfo)","updateRegionLocation(Connection, RegionInfo, ServerName, long, long)","getRegionLocations(Result)","addRegionsToMeta(Connection, List, int)","makeDeleteFromRegionInfo(RegionInfo, long)","deleteFromMetaTable(Connection, List)","addRegionInfo(Put, RegionInfo)","getRegionLocation(Result, RegionInfo, int)","addReplicationParent(Put, List)","getAllRegions(Connection, boolean)","getRegionStateColumn(int)","fullScanMetaAndPrint(Connection)","getRegionInfoColumn()","getRegionCount(Configuration, TableName)","updateTableState(Connection, TableState)","addRegionToMeta(Connection, RegionInfo)","deleteRegionInfos(Connection, List, long)","deleteRegionInfos(Connection, List)","getMetaScan(Connection, int)","fullScanTables(Connection, Visitor)","putToMetaTable(Connection, Put)","getRegionInfo(Result, byte[])","getMergeRegions(Cell[])","addSplitsToParent(Connection, RegionInfo, RegionInfo, RegionInfo)","getReplicationBarrier(Connection, byte[])","getRegionResult(Connection, byte[])","getMergeRegions(Connection, byte[])","updateTableState(Connection, TableName, TableState.State)","addEmptyLocation(Put, int)","getTableFamily()","addReplicationBarrier(Put, long)","getTableState(Result)","getTableRegions(Connection, TableName, boolean)","makePutForReplicationBarrier(RegionInfo, long, long)","getTableEncodedRegionNameAndLastBarrier(Connection, TableName)","scanMeta(Connection, byte[], byte[], QueryType, Visitor)","getMetaHTable(Connection)","getServerColumn(int)","getTableEncodedRegionNamesForSerialReplication(Connection, TableName)","getScanForTableName(Connection, TableName)","getServerUserRegions(Connection, ServerName)","getCatalogFamily()","getListOfRegionInfos(List)","writeRegionName(ByteArrayOutputStream, byte[])","addSequenceNum(Put, long, int)","scanByRegionEncodedName(Connection, String)"],"org.apache.hadoop.hbase.wal.WALSplitter":["getMaxSequenceId(FileStatus[])","finishSplitLogFile(String, Configuration)","getSplitEditFilesSorted(FileSystem, Path)","getMaxRegionSequenceId(FileSystem, Path)","getReader(FileStatus, boolean, CancelableProgressable)","getMaxRegionSequenceId(Configuration, RegionInfo, IOExceptionSupplier, IOExceptionSupplier)","createWriter(Path)","archiveLogs(List, List, Path, FileSystem, Configuration)","getRegionSplitEditsPath(Entry, String, String, Configuration)","finishSplitLogFile(Path, Path, Path, Configuration)","isSequenceIdFile(Path)","getReader(Path, CancelableProgressable)","getNumOpenWriters()","hasRecoveredEdits(Configuration, RegionInfo)","getSequenceIdFiles(FileSystem, Path)","moveAsideBadEditsFile(FileSystem, Path)","getTmpRecoveredEditsFileName(String)","split(Path, Path, Path, FileSystem, Configuration, WALFactory)","writeRegionSequenceIdFile(FileSystem, Path, long)","getNextLogLine(Reader, Path, boolean)","getRegionDirRecoveredEditsDir(Path)","formatRecoveredEditsFileName(long)","getCompletedRecoveredEditsFilePath(Path, long)","splitLogFile(FileStatus, CancelableProgressable)","getMutationsFromWALEntry(WALEntry, CellScanner, Pair, Durability)","splitLogFile(Path, FileStatus, FileSystem, Configuration, CancelableProgressable, LastSequenceId, SplitLogWorkerCoordination, WALFactory)"],"org.apache.hadoop.hbase.master.HMaster":["canCreateBaseZNode()","setCatalogJanitorEnabled(boolean)","checkEncryption(Configuration, ColumnFamilyDescriptor)","getAverageLoad()","getRegionServerInfoPort(ServerName)","createSystemTable(TableDescriptor)","restoreSnapshot(SnapshotDescription, long, long, boolean)","listTableDescriptorsByNamespace(String)","reportMobCompactionStart(TableName)","waitForMasterActive()","normalizeRegions()","balanceSwitch(boolean)","isCleanerChoreEnabled()","getFavoredNodesManager()","getClusterMetrics()","disableTable(TableName, long, long)","getUseThisHostnameInstead(Configuration)","finishActiveMasterInitialization(MonitoredTask)","getLoadBalancer()","decommissionRegionServers(List, boolean)","getMasterFileSystem()","getTableStateManager()","shutdown()","checkTableExists(TableName)","checkCompactionPolicy(Configuration, TableDescriptor)","putUpJettyServer()","removeReplicationPeer(String)","deleteTable(TableName, long, long)","isInitialized()","getTableDescriptors()","getSplitOrMergeTracker()","getMasterCoprocessorHost()","getRemoteProcedure(long)","getBackupMasters()","getMetaTableObserver()","createRpcServices()","getClusterMetrics(EnumSet)","checkTableModifiable(TableName)","isNormalizerOn()","checkClassLoading(Configuration, TableDescriptor)","isInMaintenanceMode()","listDecommissionedRegionServers()","getTableDescriptors(List, String, String, List, boolean)","balanceThrottling(long, int, long)","getNumWALFiles()","checkInitialized()","isCatalogTable(TableName)","stopProcedureExecutor()","getLoadedCoprocessors()","getAssignmentManager()","stopServiceThreads()","addColumn(TableName, ColumnFamilyDescriptor, long, long)","checkCompression(TableDescriptor)","recommissionRegionServer(ServerName, List)","getSpaceQuotaSnapshotNotifier()","waitForNamespaceOnline()","modifyTable(TableName, TableDescriptorGetter, long, long)","getRegionServerVersion(ServerName)","checkServiceStarted()","getMasterCoprocessors()","getRegionNormalizerTracker()","listReplicationPeers(String)","createNamespace(NamespaceDescriptor, long, long)","getClusterMetricsWithoutCoprocessor()","getRemoteInetAddress(int, long)","getSnapshotManager()","getClusterMetricsWithoutCoprocessor(EnumSet)","main(String[])","executePeerProcedure(ModifyPeerProcedure)","getServerName()","splitRegion(RegionInfo, byte[], long, long)","isBalancerOn()","deleteNamespace(String, long, long)","createQuotaSnapshotNotifier()","truncateTable(TableName, boolean, long, long)","getMasterProcedureExecutor()","mergeRegions(RegionInfo[], boolean, long, long)","getQuotaObserverChore()","isRegionOnline(RegionInfo)","warnOrThrowExceptionForFailure(boolean, String, String, Exception)","getInitializedEvent()","isSplitOrMergeEnabled(MasterSwitchType)","getSnapshotQuotaObserverChore()","getMasterProcedureManagerHost()","updateConfigurationForQuotasObserver(Configuration)","getReplicationPeerManager()","getLoadBalancerClassName()","startProcedureExecutor()","getSplitPlanCount()","getClientIdAuditPrefix()","enableTable(TableName, long, long)","stop(String)","enableReplicationPeer(String)","getMasterQuotaManager()","getLastMajorCompactionTimestampForRegion(byte[])","isCatalogJanitorEnabled()","getMergePlanCount()","getLastMajorCompactionTimestamp(TableName)","getLocks()","getMaxRegionsInTransition()","getClusterSchema()","startServiceThreads()","getMasterFinishedInitializationTime()","isActiveMaster()","getMaxBalancingTime()","move(byte[], byte[])","modifyColumn(TableName, ColumnFamilyDescriptor, long, long)","waitForRegionServers(MonitoredTask)","constructMaster(Class, Configuration)","modifyTable(TableName, TableDescriptor, long, long)","run()","getWalProcedureStore()","getMobCompactionState(TableName)","getReplicationLoad(ServerName[])","disableReplicationPeer(String)","abort(String, Throwable)","balance()","getWalGroupsReplicationStatus()","canUpdateTableDescriptor()","waitForMetaOnline()","getRegionServerFatalLogBuffer()","checkReplicationScope(ColumnFamilyDescriptor)","decorateMasterConfiguration(Configuration)","initClusterSchemaService()","getProcedures()","checkCompression(ColumnFamilyDescriptor)","getMasterRpcServices()","createTable(TableDescriptor, byte[][], long, long)","getLockManager()","modifyNamespace(NamespaceDescriptor, long, long)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","createMetaBootstrap()","sanityCheckTableDescriptor(TableDescriptor)","getHFileCleaner()","getNamespace(String)","getNamespaces()","getMasterMetrics()","getLogCleaner()","listTableNames(String, String, boolean)","stopChores()","initQuotaManager()","getMasterActiveTime()","createProcedureExecutor()","addReplicationPeer(String, ReplicationPeerConfig, boolean)","remoteProcedureFailed(long, RemoteProcedureException)","getReplicationPeerConfig(String)","getHbckChore()","filterTablesByRegex(Collection, Pattern)","abortProcedure(long, boolean)","getServerManager()","getMasterStartTime()","initializeZKBasedSystemTrackers()","listTableDescriptors(String, String, List, boolean)","reportMobCompactionEnd(TableName)","initMobCleaner()","checkEncryption(Configuration, TableDescriptor)","checkIfShouldMoveSystemRegionAsync()","getZooKeeper()","startActiveMasterManager(int)","remoteProcedureCompleted(long)","getProcessName()","configureInfoServer()","createServerManager(MasterServices)","getRegionNormalizer()","getDumpServlet()","setInitialized(boolean)","requestMobCompaction(TableName, List, boolean)","stopMaster()","listTableNamesByNamespace(String)","login(UserProvider, String)","deleteColumn(TableName, byte[], long, long)","balance(boolean)","getMasterWalManager()","getCatalogJanitor()","registerService(Service)"],"org.apache.hadoop.hbase.master.procedure.InitMetaProcedure":["executeFromState(MasterProcedureEnv, InitMetaState)","waitInitialized(MasterProcedureEnv)","await()","getState(int)","getTableOperationType()","completionCleanup(MasterProcedureEnv)","acquireLock(MasterProcedureEnv)","getStateId(InitMetaState)","getInitialState()","getTableName()","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","rollbackState(MasterProcedureEnv, InitMetaState)"],"org.apache.hadoop.hbase.master.cleaner.TimeToLiveHFileCleaner":["isFileDeletable(FileStatus)","setConf(Configuration)"],"org.apache.hadoop.hbase.master.MasterRpcServices":["createConfigurationSubset()","rpcPreCheck(String)","setSplitOrMergeEnabled(RpcController, SetSplitOrMergeEnabledRequest)","mergeTableRegions(RpcController, MergeTableRegionsRequest)","getTableNames(RpcController, GetTableNamesRequest)","setCleanerChoreRunning(RpcController, SetCleanerChoreRunningRequest)","updateReplicationPeerConfig(RpcController, UpdateReplicationPeerConfigRequest)","recommissionRegionServer(RpcController, RecommissionRegionServerRequest)","addColumn(RpcController, AddColumnRequest)","getQuotaStates(RpcController, GetQuotaStatesRequest)","reportProcedureDone(RpcController, ReportProcedureDoneRequest)","isSplitOrMergeEnabled(RpcController, IsSplitOrMergeEnabledRequest)","execMasterService(RpcController, ClientProtos.CoprocessorServiceRequest)","synchronousBalanceSwitch(boolean)","isMasterRunning(RpcController, IsMasterRunningRequest)","runHbckChore(RpcController, RunHbckChoreRequest)","stopMaster(RpcController, StopMasterRequest)","assignRegion(RpcController, AssignRegionRequest)","createNamespace(RpcController, CreateNamespaceRequest)","getProcedureResult(RpcController, GetProcedureResultRequest)","hasVisibilityLabelsServiceCoprocessor(MasterCoprocessorHost)","checkCoprocessorWithService(List, Class)","getSecurityCapabilities(RpcController, SecurityCapabilitiesRequest)","submitProcedure(HBaseProtos.RegionSpecifier, boolean, BiFunction)","compactMob(CompactRegionRequest, TableName)","deleteColumn(RpcController, DeleteColumnRequest)","getProcedures(RpcController, GetProceduresRequest)","isMasterInMaintenanceMode(RpcController, IsInMaintenanceModeRequest)","getTableState(RpcController, GetTableStateRequest)","offlineRegion(RpcController, OfflineRegionRequest)","getCompletedSnapshots(RpcController, GetCompletedSnapshotsRequest)","listReplicationPeers(RpcController, ListReplicationPeersRequest)","regionServerReport(RpcController, RegionServerReportRequest)","listTableDescriptorsByNamespace(RpcController, ListTableDescriptorsByNamespaceRequest)","getLocks(RpcController, GetLocksRequest)","deleteTable(RpcController, DeleteTableRequest)","removeReplicationPeer(RpcController, RemoveReplicationPeerRequest)","restoreSnapshot(RpcController, RestoreSnapshotRequest)","balance(RpcController, BalanceRequest)","enableReplicationPeer(RpcController, EnableReplicationPeerRequest)","isSnapshotDone(RpcController, IsSnapshotDoneRequest)","requestLock(RpcController, LockRequest)","createRpcServer(Server, Configuration, RpcSchedulerFactory, InetSocketAddress, String)","unassigns(RpcController, MasterProtos.UnassignsRequest)","reportRSFatalError(RpcController, ReportRSFatalErrorRequest)","shouldSubmitSCP(ServerName)","deleteNamespace(RpcController, DeleteNamespaceRequest)","setBalancerRunning(RpcController, SetBalancerRunningRequest)","getLastFlushedSequenceId(RpcController, GetLastFlushedSequenceIdRequest)","bypassProcedure(RpcController, MasterProtos.BypassProcedureRequest)","compactRegion(RpcController, CompactRegionRequest)","setQuota(RpcController, SetQuotaRequest)","enableTable(RpcController, EnableTableRequest)","checkHFileFormatVersionForMob()","containMetaWals(ServerName)","execProcedureWithRet(RpcController, ExecProcedureRequest)","isNormalizerEnabled(RpcController, IsNormalizerEnabledRequest)","getClusterStatus(RpcController, GetClusterStatusRequest)","moveRegion(RpcController, MoveRegionRequest)","modifyColumn(RpcController, ModifyColumnRequest)","getSpaceQuotaRegionSizes(RpcController, GetSpaceQuotaRegionSizesRequest)","runCleanerChore(RpcController, RunCleanerChoreRequest)","getRegionInfo(RpcController, GetRegionInfoRequest)","listNamespaceDescriptors(RpcController, ListNamespaceDescriptorsRequest)","clearDeadServers(RpcController, ClearDeadServersRequest)","reportFileArchival(RpcController, FileArchiveNotificationRequest)","scheduleServerCrashProcedure(RpcController, MasterProtos.ScheduleServerCrashProcedureRequest)","isCatalogJanitorEnabled(RpcController, IsCatalogJanitorEnabledRequest)","listTableNamesByNamespace(RpcController, ListTableNamesByNamespaceRequest)","getTableDescriptors(RpcController, GetTableDescriptorsRequest)","getLastMajorCompactionTimestamp(RpcController, MajorCompactionTimestampRequest)","getServices()","addConfig(RegionServerStartupResponse.Builder, String)","getRegionInfo(HBaseProtos.RegionSpecifier)","splitRegion(RpcController, SplitTableRegionRequest)","runCatalogScan(RpcController, RunCatalogScanRequest)","modifyNamespace(RpcController, ModifyNamespaceRequest)","setNormalizerRunning(RpcController, SetNormalizerRunningRequest)","deleteSnapshot(RpcController, DeleteSnapshotRequest)","createTable(RpcController, CreateTableRequest)","isBalancerEnabled(RpcController, IsBalancerEnabledRequest)","truncateTable(RpcController, TruncateTableRequest)","setTableStateInMeta(RpcController, SetTableStateInMetaRequest)","enableCatalogJanitor(RpcController, EnableCatalogJanitorRequest)","assigns(RpcController, MasterProtos.AssignsRequest)","reportRegionStateTransition(RpcController, ReportRegionStateTransitionRequest)","execProcedure(RpcController, ExecProcedureRequest)","isCleanerChoreEnabled(RpcController, IsCleanerChoreEnabledRequest)","decommissionRegionServers(RpcController, DecommissionRegionServersRequest)","disableTable(RpcController, DisableTableRequest)","getReplicationPeerConfig(RpcController, GetReplicationPeerConfigRequest)","regionServerStartup(RpcController, RegionServerStartupRequest)","unassignRegion(RpcController, UnassignRegionRequest)","getNamespaceDescriptor(RpcController, GetNamespaceDescriptorRequest)","snapshot(RpcController, SnapshotRequest)","listDecommissionedRegionServers(RpcController, ListDecommissionedRegionServersRequest)","fixMeta(RpcController, FixMetaRequest)","createPriority()","addReplicationPeer(RpcController, AddReplicationPeerRequest)","getRpcSchedulerFactoryClass()","hasAccessControlServiceCoprocessor(MasterCoprocessorHost)","lockHeartbeat(RpcController, LockHeartbeatRequest)","disableReplicationPeer(RpcController, DisableReplicationPeerRequest)","getSchemaAlterStatus(RpcController, GetSchemaAlterStatusRequest)","isProcedureDone(RpcController, IsProcedureDoneRequest)","modifyTable(RpcController, ModifyTableRequest)","convert(MasterProtos.MasterSwitchType)","getLastMajorCompactionTimestampForRegion(RpcController, MajorCompactionTimestampForRegionRequest)","abortProcedure(RpcController, AbortProcedureRequest)","normalize(RpcController, NormalizeRequest)","switchBalancer(boolean, BalanceSwitchMode)","reportRegionSpaceUse(RpcController, RegionSpaceUseReportRequest)","shutdown(RpcController, ShutdownRequest)"],"org.apache.hadoop.hbase.io.asyncfs.FanOutOneBlockAsyncDFSOutputHelper.CancelOnClose":["progress()"],"org.apache.hadoop.hbase.client.ConnectionUtils":["createCloseRowBefore(byte[])","timelineConsistentRead(AsyncRegionLocator, TableName, Query, byte[], RegionLocateType, Function, long, long, Timer)","retries2Attempts(int)","allOf(List)","isEmptyStartRow(byte[])","getMyAddress()","incRegionCountMetrics(ScanMetrics)","noMoreResultsForScan(Scan, RegionInfo)","getLocateType(Scan)","filterCells(Result, Cell)","getOrFetch(AtomicReference, AtomicReference, boolean, Supplier, Predicate, String)","injectNonceGeneratorForTesting(ClusterConnection, NonceGenerator)","setServerSideHConnectionRetriesConfig(Configuration, String, Logger)","createShortCircuitConnection(Configuration, ExecutorService, User, ServerName, AdminService.BlockingInterface, ClientService.BlockingInterface)","getStubKey(String, ServerName, boolean)","createScanResultCache(Scan)","connect(CompletableFuture, CompletableFuture)","translateException(Throwable)","calcEstimatedSize(Result)","updateServerSideMetrics(ScanMetrics, ScanResponse)","isEmptyStopRow(byte[])","setupMasterlessConnection(Configuration)","toCheckExistenceOnly(Get)","noMoreResultsForReverseScan(Scan, RegionInfo)","toCheckExistenceOnly(List)","incRPCRetriesMetrics(ScanMetrics, boolean)","createClosestRowAfter(byte[])","getPauseTime(long, int)","checkHasFamilies(Mutation)","updateResultsMetrics(ScanMetrics, Result[], boolean)","isRemote(String)","resetController(HBaseRpcController, long)","sendRequestsToSecondaryReplicas(Function, RegionLocations, CompletableFuture)","incRPCCallsMetrics(ScanMetrics, boolean)"],"org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost":["postCheckAndDelete(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Delete, boolean)","preWALRestore(RegionInfo, WALKey, WALEdit)","preCheckAndPut(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Put)","postPut(Put, WALEdit, Durability)","preCheckAndPutAfterRowLock(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Put)","preCommitStoreFile(byte[], List)","postStoreFileReaderOpen(FileSystem, Path, FSDataInputStreamWrapper, long, CacheConfig, Reference, StoreFileReader)","postMemStoreCompaction(HStore)","preMemStoreCompactionCompactScannerOpen(HStore)","preStoreFileReaderOpen(FileSystem, Path, FSDataInputStreamWrapper, long, CacheConfig, Reference)","postInstantiateDeleteTracker(DeleteTracker)","preCheckAndDeleteAfterRowLock(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Delete)","checkAndGetInstance(Class)","preCleanupBulkLoad(User)","preClose(boolean)","postDelete(Delete, WALEdit, Durability)","preIncrementAfterRowLock(Increment)","postCompactSelection(HStore, List, CompactionLifeCycleTracker, CompactionRequest, User)","postScannerFilterRow(InternalScanner, Cell)","preFlush(HStore, InternalScanner, FlushLifeCycleTracker)","preScannerClose(InternalScanner)","postStartRegionOperation(Operation)","createEnvironment(RegionCoprocessor, int, int, Configuration)","postBatchMutate(MiniBatchOperationInProgress)","preDelete(Delete, WALEdit, Durability)","preCompactSelection(HStore, List, CompactionLifeCycleTracker, User)","prePut(Put, WALEdit, Durability)","preEndpointInvocation(Service, String, Message)","postBulkLoadHFile(List, Map)","preCompactScannerOpen(HStore, ScanType, CompactionLifeCycleTracker, CompactionRequest, User)","prePrepareTimeStampForDeleteVersion(Mutation, Cell, byte[], Get)","postBatchMutateIndispensably(MiniBatchOperationInProgress, boolean)","postFlush(HStore, HStoreFile, FlushLifeCycleTracker)","preReplayWALs(RegionInfo, Path)","postCloseRegionOperation(Operation)","postScannerClose(InternalScanner)","postGet(Get, List)","postScannerNext(InternalScanner, List, int, boolean)","postAppend(Append, Result)","preStoreScannerOpen(HStore)","postCheckAndPut(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Put, boolean)","preScannerOpen(Scan)","postClose(boolean)","postExists(Get, boolean)","preMemStoreCompactionCompact(HStore, InternalScanner)","postScannerOpen(Scan, RegionScanner)","preIncrement(Increment)","preBulkLoadHFile(List)","postMutationBeforeWAL(MutationType, Mutation, Cell, Cell)","postFlush(FlushLifeCycleTracker)","preAppendAfterRowLock(Append)","getTableCoprocessorAttrsFromSchema(Configuration, TableDescriptor)","postEndpointInvocation(Service, String, Message, Message.Builder)","prePrepareBulkLoad(User)","preFlushScannerOpen(HStore, FlushLifeCycleTracker)","preMemStoreCompaction(HStore)","preBatchMutate(MiniBatchOperationInProgress)","postIncrement(Increment, Result)","preCheckAndDelete(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Delete)","testTableCoprocessorAttrs(Configuration, TableDescriptor)","preFlush(FlushLifeCycleTracker)","preGet(Get, List)","postCompact(HStore, HStoreFile, CompactionLifeCycleTracker, CompactionRequest, User)","postReplayWALs(RegionInfo, Path)","postCommitStoreFile(byte[], Path, Path)","loadTableCoprocessors(Configuration)","preAppend(Append)","preScannerNext(InternalScanner, List, int)","preOpen()","preExists(Get)","postWALRestore(RegionInfo, WALKey, WALEdit)","postOpen()","preCompact(HStore, InternalScanner, ScanType, CompactionLifeCycleTracker, CompactionRequest, User)"],"org.apache.hadoop.hbase.security.access.CoprocessorWhitelistMasterObserver":["validatePath(Path, Path)","preModifyTable(ObserverContext, TableName, TableDescriptor)","verifyCoprocessors(ObserverContext, TableDescriptor)","getMasterObserver()","preCreateTable(ObserverContext, TableDescriptor, RegionInfo[])"],"org.apache.hadoop.hbase.regionserver.MetricsTableWrapperAggregateImpl":["getTotalRequestsCount(String)","getReadRequestsCount(String)","getMemStoresSize(String)","getWriteRequestsCount(String)","getTableSize(String)","getStoreFilesSize(String)","close()"],"org.apache.hadoop.hbase.security.access.TableAuthManager":["initGlobal(Configuration)","refreshNamespaceCacheFromWritable(String, byte[])","getMTime()","authorizeUser(User, TableName, byte[], byte[], Permission.Action)","authorize(List, String, Permission.Action)","authorize(User, String, Permission.Action)","setTableGroupPermissions(String, TableName, List)","hasAccess(List, TableName, Permission.Action)","authorizeGroup(String, TableName, byte[], byte[], Permission.Action)","groupHasAccess(String, TableName, Permission.Action)","writeNamespaceToZooKeeper(String, PermissionCache)","getTotalRefCount()","authorize(User, TableName, byte[], Permission.Action)","authorizeGroup(String, Permission.Action)","close()","authorize(User, Permission.Action)","authorize(User, TableName, Cell, Permission.Action)","updateTableCache(TableName, ListMultimap)","getNamespacePermissions(String)","userHasAccess(User, TableName, Permission.Action)","setNamespaceUserPermissions(String, String, List)","authorize(List, TableName, byte[], byte[], Permission.Action)","updateNsCache(String, ListMultimap)","authorize(User, TableName, byte[], byte[], Permission.Action)","setNamespaceGroupPermissions(String, String, List)","matchPermission(User, TableName, byte[], Permission.Action)","removeTable(TableName)","setTableUserPermissions(String, TableName, List)","getOrCreate(ZKWatcher, Configuration)","authorize(List, Permission.Action)","release(TableAuthManager)","refreshTableCacheFromWritable(TableName, byte[])","getTablePermissions(TableName)","authorizeUser(User, TableName, byte[], Permission.Action)","writeTableToZooKeeper(TableName, PermissionCache)","hasAccess(User, TableName, Permission.Action)","matchPermission(User, TableName, byte[], byte[], Permission.Action)","removeNamespace(byte[])","getZKPermissionWatcher()","updateGlobalCache(ListMultimap)"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.AbstractRSRemoteCall":["getRsAdmin()","unwrapException(IOException)","getMaxWaitTime()","scheduleForRetry(IOException)","getServerName()"],"org.apache.hadoop.hbase.master.assignment.RegionTransitionProcedure":["holdLock(MasterProcedureEnv)","setRegionInfo(RegionInfo)","getRegionState(MasterProcedureEnv)","execute(MasterProcedureEnv)","rollback(MasterProcedureEnv)","setOverride(boolean)","remoteOperationCompleted(MasterProcedureEnv)","remoteOperationFailed(MasterProcedureEnv, RemoteProcedureException)","isServerOnline(MasterProcedureEnv, ServerName)","getTransitionState()","getAttempt()","toStringState(StringBuilder)","setTransitionState(RegionTransitionState)","releaseLock(MasterProcedureEnv)","toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","waitInitialized(MasterProcedureEnv)","isMeta()","storeInDispatchedQueue()","remoteCallFailed(MasterProcedureEnv, ServerName, IOException)","acquireLock(MasterProcedureEnv)","isServerOnline(MasterProcedureEnv, RegionStateNode)","getTableName()","reportTransition(MasterProcedureEnv, ServerName, TransitionCode, long)","addToRemoteDispatcher(MasterProcedureEnv, ServerName)","setAttempt(int)","bypass(MasterProcedureEnv)","shouldWaitClientAck(MasterProcedureEnv)","setTimeoutFailure(MasterProcedureEnv)","isOverride()","getRegionInfo()"],"org.apache.hadoop.hbase.io.hfile.bucket.UniqueIndexMap":["unmap(int)","map(T)"],"org.apache.hadoop.hbase.replication.regionserver.HBaseInterClusterReplicationEndpoint":["parseTable(String)","sleepForRetries(String, int)","parallelReplicate(CompletionService, ReplicateContext, List)","createParallelBatches(List)","decorateConf()","replicate(ReplicateContext)","replicateEntries(List, int)","createSerialBatches(List)","filterBatches(List, TableName)","createReplicator(List, int)","doStop()","createBatches(List)","init(Context)","logPeerId()","reconnectToPeerCluster()","getEstimatedEntrySize(Entry)","isPeerEnabled()","connectToPeers()","serialReplicateRegionEntries(List, int)"],"org.apache.hadoop.hbase.master.HbckChore":["loadRegionsFromFS()","disableChore()","isDisabled()","isRunning()","getCheckingEndTimestamp()","chore()","loadRegionsFromRSReport()","getInconsistentRegions()","getCheckingStartTimestamp()","loadRegionsFromInMemoryState()","runChore()","getOrphanRegionsOnRS()","getOrphanRegionsOnFS()","saveCheckResultToSnapshot()"],"org.apache.hadoop.hbase.client.RawAsyncTableImpl":["locateFinished(RegionInfo, byte[], boolean)","getReadRpcTimeout(TimeUnit)","getConfiguration()","get(List)","coprocessorService(Function, ServiceCaller, byte[])","newCaller(byte[], long)","resultSize2CacheSize(long)","mutateRow(HBaseRpcController, HRegionLocation, ClientService.Interface, RowMutations, Converter, Function)","voidMutate(List)","getName()","append(Append)","getOperationTimeout(TimeUnit)","onLocateComplete(Function, ServiceCaller, CoprocessorCallback, List, byte[], boolean, AtomicBoolean, AtomicInteger, HRegionLocation, Throwable)","newCaller(Row, long)","voidMutate(HBaseRpcController, HRegionLocation, ClientService.Interface, REQ, Converter)","delete(Delete)","toResult(HBaseRpcController, MutateResponse)","batch(List, long)","put(Put)","coprocessorService(Function, ServiceCaller, CoprocessorCallback)","batch(List)","coprocessorService(Function, ServiceCaller, RegionInfo, byte[])","put(List)","getScanTimeout(TimeUnit)","get(Get, int)","scan(Scan, AdvancedScanResultConsumer)","getScanner(Scan)","mutateRow(RowMutations)","setDefaultScanConfig(Scan)","noncedMutate(long, long, HBaseRpcController, HRegionLocation, ClientService.Interface, REQ, NoncedConverter, Converter)","scanAll(Scan)","mutate(HBaseRpcController, HRegionLocation, ClientService.Interface, REQ, Converter, Converter)","increment(Increment)","call(HBaseRpcController, HRegionLocation, ClientService.Interface, REQ, Converter, RpcCall, Converter)","get(Get)","delete(List)","checkAndMutate(byte[], byte[])","getRpcTimeout(TimeUnit)","getWriteRpcTimeout(TimeUnit)"],"org.apache.hadoop.hbase.regionserver.RegionServicesForStores":["getNumStores()","blockUpdates()","getWAL()","getInMemoryCompactionPool()","addMemStoreSize(long, long, long, int)","getMemStoreSize()","getInMemoryCompactionPoolForTest()","unblockUpdates()","getRegionInfo()","getMemStoreFlushSize()"],"org.apache.hadoop.hbase.ipc.RpcServer":["getMinSizeForReservoirUse(ByteBufferPool)","setRsRpcServices(RSRpcServices)","getRemoteIp()","getServiceInterface(List, String)","refreshAuthManager(PolicyProvider)","getServiceAndInterface(List, String)","getRemoteAddress()","getConf()","call(RpcCall, MonitoredRPCHandler)","getScheduler()","getRequestUser()","getService(List, String)","getSecretManager()","getStatus()","addCallSize(long)","createSecretManager()","isInRpcCallContext()","setSecretManager(SecretManager)","isStarted()","channelIO(ReadableByteChannel, WritableByteChannel, ByteBuffer)","initReconfigurable(Configuration)","setErrorHandler(HBaseRPCErrorHandler)","authorize(UserGroupInformation, ConnectionHeader, InetAddress)","getRequestUserName()","channelRead(ReadableByteChannel, ByteBuffer)","onConfigurationChange(Configuration)","allocateByteBuffToReadInto(ByteBufferPool, int, int)","getErrorHandler()","getMetrics()","getCurrentCall()","truncateTraceLog(String)","logResponse(Message, String, String, String, String, long, int, int, long)"],"org.apache.hadoop.hbase.protobuf.ReplicationProtbufUtil":["replicateWALEntry(AdminService.BlockingInterface, Entry[], String, Path, Path)","getCellScanner(List, int)","buildReplicateWALEntryRequest(Entry[])","buildReplicateWALEntryRequest(Entry[], byte[], String, Path, Path)"],"org.apache.hadoop.hbase.master.replication.ModifyPeerProcedure":["enablePeerBeforeFinish()","suspend(long)","getState(int)","releaseLatch()","executeFromState(MasterProcedureEnv, PeerModificationState)","refreshPeer(MasterProcedureEnv, PeerOperationType)","getNewPeerConfig()","enablePeer(MasterProcedureEnv)","needReopen(TableStateManager, TableName)","nextStateAfterRefresh()","getOldPeerConfig()","getInitialState()","needSetLastPushedSequenceId(TableStateManager, TableName)","setLastPushedSequenceId(MasterProcedureEnv, ReplicationPeerConfig)","rollbackState(MasterProcedureEnv, PeerModificationState)","reopenRegions(MasterProcedureEnv)","getStateId(PeerModificationState)","setLastPushedSequenceIdForTable(MasterProcedureEnv, TableName, Map)","setTimeoutFailure(MasterProcedureEnv)","addToMap(Map, String, long, ReplicationQueueStorage)","updateLastPushedSequenceIdForSerialPeer(MasterProcedureEnv)"],"org.apache.hadoop.hbase.coordination.ZkCoordinatedStateManager":["getSplitLogManagerCoordination()","getSplitLogWorkerCoordination()","getProcedureCoordinatorRpcs(String, String)","getProcedureMemberRpcs(String)"],"org.apache.hadoop.hbase.io.hfile.HFileBlock.Writer":["getOnDiskSizeWithoutHeader()","getEncodingState()","beforeShipped()","write(Cell)","getBlockForCaching(CacheConfig)","expectState(State)","putHeader(byte[], int, int, int, int)","cloneUncompressedBufferWithHeader()","ensureBlockReady()","blockSizeWritten()","release()","encodedBlockSizeWritten()","finishBlock()","startWriting(BlockType)","getUncompressedSizeWithoutHeader()","getUncompressedSizeWithHeader()","writeBlock(BlockWritable, FSDataOutputStream)","cloneOnDiskBufferWithHeader()","getHeaderAndDataForTest()","putHeader(ByteArrayOutputStream, int, int, int)","finishBlockAndWriteHeaderAndData(DataOutputStream)","writeHeaderAndData(FSDataOutputStream)","getOnDiskSizeWithHeader()","isWriting()","getUserDataStream()"],"org.apache.hadoop.hbase.util.FSHDFSUtils":["checkIfTimedout(Configuration, long, int, Path, long)","getLogMessageDetail(int, Path, long)","recoverDFSFileLease(DistributedFileSystem, Path, Configuration, CancelableProgressable)","isFileClosed(DistributedFileSystem, Method, Path)","isSameHdfs(Configuration, FileSystem, FileSystem)","checkIfCancelled(CancelableProgressable)","getNNAddresses(DistributedFileSystem, Configuration)","recoverFileLease(FileSystem, Path, Configuration, CancelableProgressable)","recoverLease(DistributedFileSystem, int, Path, long)"],"org.apache.hadoop.hbase.regionserver.MemStoreFlusher":["flushRegion(HRegion, boolean, boolean, FlushLifeCycleTracker)","getBiggestMemStoreOfRegionReplica(SortedMap, Set)","join()","isTooManyStoreFiles(Region)","start(UncaughtExceptionHandler)","wakeUpIfBlocking()","requestFlush(HRegion, boolean, FlushLifeCycleTracker)","getMemStoreDataSize(HRegion)","isAboveHighWaterMark()","unregisterFlushRequestListener(FlushRequestListener)","getMemStoreOffHeapSize(HRegion)","getStoreFileCount(Region)","isAboveLowWaterMark()","reclaimMemStoreMemory()","refreshStoreFilesAndReclaimMemory(Region)","notifyFlushRequest(Region, boolean)","flushOneForGlobalPressure()","logMsg(String, long, long)","interruptIfNecessary()","toString()","setGlobalMemStoreLimit(long)","wakeupFlushThread()","getUpdatesBlockedMsHighWater()","dumpQueue()","isAlive()","flushRegion(FlushRegionEntry)","getMemStoreHeapSize(HRegion)","requestDelayedFlush(HRegion, long, boolean)","getBiggestMemStoreRegion(SortedMap, Set, boolean)","registerFlushRequestListener(FlushRequestListener)","setFlushType(FlushType)","getFlushQueueSize()"],"org.apache.hadoop.hbase.security.access.UserPermission":["getUser()","isGlobal()","equals(Object)","toString()","write(DataOutput)","readFields(DataInput)","hashCode()"],"org.apache.hadoop.hbase.io.hfile.HFileReaderImpl":["loadFileInfo()","getFileContext()","indexSize()","getBloomFilterMetadata(BlockType)","getPathOffsetEndStr(Path, long, long)","length()","getFirstKey()","getConf()","getEffectiveEncodingInCache(boolean)","getDataBlockIndexReader()","getScanner(boolean, boolean, boolean)","getCachedBlock(BlockCacheKey, boolean, boolean, boolean, boolean, BlockType, DataBlockEncoding)","getName()","unbufferStream()","returnBlock(HFileBlock)","getMetaBlock(String, boolean)","validateBlockType(HFileBlock, BlockType)","getCompressionAlgorithm()","getEntries()","getFirstRowKey()","getPath()","close()","readBlock(long, long, boolean, boolean, boolean, boolean, BlockType, DataBlockEncoding)","toString()","getGeneralBloomFilterMetadata()","getDeleteBloomFilterMetadata()","shouldIncludeMemStoreTS()","hasMVCCInfo()","checkFileVersion()","setConf(Configuration)","prefetchComplete()","getScanner(boolean, boolean)","toStringLastKey()","isDecodeMemStoreTS()","isFileInfoLoaded()","toStringFirstKey()","getLastRowKey()","createHFileContext(FSDataInputStreamWrapper, long, HFileSystem, Path, FixedFileTrailer)","getComparator()","getDataBlockEncoding()","getLastKey()","close(boolean)","midKey()","isPrimaryReplicaReader()","getMajorVersion()","getTrailer()","getUncachedBlockReader()"],"org.apache.hadoop.hbase.regionserver.Leases.LeaseStillHeldException":["getName()"],"org.apache.hadoop.hbase.wal.WALSplitter.RegionEntryBuffer":["appendEntry(Entry)","getTableName()","getEncodedRegionName()","heapSize()","getEntryBuffer()","internify(Entry)"],"org.apache.hadoop.hbase.master.procedure.CreateTableProcedure":["executeFromState(MasterProcedureEnv, CreateTableState)","addRegionsToMeta(MasterProcedureEnv, TableDescriptor, List)","getTableOperationType()","createFsLayout(MasterProcedureEnv, TableDescriptor, List, CreateHdfsRegions)","setEnabledState(MasterProcedureEnv, TableName)","isRollbackSupported(CreateTableState)","prepareCreate(MasterProcedureEnv)","getFirstRegionInfo()","serializeStateData(ProcedureStateSerializer)","preCreate(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, CreateTableState)","moveTempDirectoryToHBaseRoot(MasterProcedureEnv, TableDescriptor, Path)","postCreate(MasterProcedureEnv)","waitInitialized(MasterProcedureEnv)","getStateId(CreateTableState)","getState(int)","acquireLock(MasterProcedureEnv)","getInitialState()","createFsLayout(MasterProcedureEnv, TableDescriptor, List)","getTableName()","setEnablingState(MasterProcedureEnv, TableName)","deserializeStateData(ProcedureStateSerializer)","updateTableDescCache(MasterProcedureEnv, TableName)","shouldWaitClientAck(MasterProcedureEnv)","addTableToMeta(MasterProcedureEnv, TableDescriptor, List)"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketCache.RAMQueueEntry":["getData()","getBucketEntry(IOEngine, long, int)","getKey()","access(long)","writeToCache(IOEngine, BucketAllocator, UniqueIndexMap, LongAdder)"],"org.apache.hadoop.hbase.wal.WALSplitter.MutationReplay":["equals(Object)","compareTo(MutationReplay)","hashCode()"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationLoad":["getReplicationLoadSink()","buildReplicationLoad(List, MetricsSink)","sourceToString()","toString()","sinkToString()","calculateReplicationDelay(long, long, int)","getReplicationLoadSourceList()"],"org.apache.hadoop.hbase.security.access.AccessControlUtil":["toUserPermission(AccessControlProtos.UserPermission)","grant(RpcController, AccessControlService.BlockingInterface, String, TableName, byte[], byte[], boolean, Permission.Action[])","toUsersAndPermissions(String, Permission)","toPermission(Permission)","toUserTablePermissions(ListMultimap)","revoke(RpcController, AccessControlService.BlockingInterface, String, TableName, byte[], byte[], Permission.Action[])","buildRevokeRequest(String, TableName, byte[], byte[], AccessControlProtos.Permission.Action[])","toUsersAndPermissions(AccessControlProtos.UsersAndPermissions)","getUserPermissions(RpcController, AccessControlService.BlockingInterface, TableName)","grant(RpcController, AccessControlService.BlockingInterface, String, boolean, Permission.Action[])","revoke(RpcController, AccessControlService.BlockingInterface, String, String, Permission.Action[])","getUserPermissions(RpcController, AccessControlService.BlockingInterface)","toPermissionAction(AccessControlProtos.Permission.Action)","revoke(RpcController, AccessControlService.BlockingInterface, String, Permission.Action[])","buildGrantRequest(String, TableName, byte[], byte[], boolean, AccessControlProtos.Permission.Action[])","buildRevokeRequest(String, AccessControlProtos.Permission.Action[])","buildGrantRequest(String, String, boolean, AccessControlProtos.Permission.Action[])","toUserPermission(UserPermission)","getUserPermissions(RpcController, AccessControlService.BlockingInterface, byte[])","grant(RpcController, AccessControlService.BlockingInterface, String, String, boolean, Permission.Action[])","toUserTablePermissions(AccessControlProtos.UsersAndPermissions)","buildGetUserPermissionsResponse(List)","toPermissionAction(Permission.Action)","buildRevokeRequest(String, String, AccessControlProtos.Permission.Action[])","toPermission(AccessControlProtos.Permission)","toUsersAndPermissions(ListMultimap)","buildGrantRequest(String, boolean, AccessControlProtos.Permission.Action[])","toTablePermission(AccessControlProtos.Permission)","toPermissionActions(List)"],"org.apache.hadoop.hbase.executor.EventHandler":["run()","toString()","handleException(Throwable)","getInformativeName()","compareTo(Runnable)","getSeqid()","getPriority()","getEventType()","prepare()"],"org.apache.hadoop.hbase.master.procedure.DisableTableProcedure":["getState(int)","getTableOperationType()","preDisable(MasterProcedureEnv, DisableTableState)","isTraceEnabled()","isRollbackSupported(DisableTableState)","setTableStateToDisabled(MasterProcedureEnv, TableName)","getInitialState()","getTableName()","prepareDisable(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","postDisable(MasterProcedureEnv, DisableTableState)","runCoprocessorAction(MasterProcedureEnv, DisableTableState)","rollbackState(MasterProcedureEnv, DisableTableState)","getStateId(DisableTableState)","setTableStateToDisabling(MasterProcedureEnv, TableName)","executeFromState(MasterProcedureEnv, DisableTableState)"],"org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer":["setMasterServices(MasterServices)","areSomeRegionReplicasColocated(Cluster)","updateMetricsSize(int)","balanceCluster(Map)","updateCostsWithAction(Cluster, Action)","needsBalance(Cluster)","composeAttributeName(String, String)","setConf(Configuration)","updateStochasticCosts(TableName, Double, Double[])","createRegionPlans(Cluster)","initCosts(Cluster)","setClusterMetrics(ClusterMetrics)","getCostFunctionNames()","computeCost(Cluster, double)","nextAction(Cluster)","functionCost()","setCandidateGenerators(List)","updateRegionLoad()","onConfigurationChange(Configuration)","setSlop(Configuration)","balanceCluster(TableName, Map)"],"org.apache.hadoop.hbase.master.DeadServer":["copyDeadServersSince(long)","isEmpty()","add(ServerName)","isProcessingServer(ServerName)","toString()","getTimeOfDeath(ServerName)","cleanPreviousInstance(ServerName)","isDeadServer(ServerName)","add(ServerName, boolean)","removeDeadServer(ServerName)","areDeadServersInProgress()","copyServerNames()","finish(ServerName)","cleanAllPreviousInstances(ServerName)","notifyServer(ServerName)","size()"],"org.apache.hadoop.hbase.regionserver.HStoreFile":["markCompactedAway()","getQualifiedPath()","isBulkLoadResult()","open()","getFirstKey()","isSkipResetSeqId(byte[])","getMinimumTimestamp()","isCompactedAway()","getRefCount()","createStreamReader(boolean)","isMajorCompactionResult()","toStringDetailed()","getReader()","getCacheConf()","getMetadataValue(byte[])","getModificationTimestamp()","initReader()","deleteStoreFile()","isHFile()","closeStoreFile(boolean)","getPath()","getEncodedPath()","getMaxMemStoreTS()","getMaxSequenceId()","isReferencedInReads()","getStreamScanner(boolean, boolean, boolean, long, long, boolean)","toString()","getPreadScanner(boolean, long, long, boolean)","excludeFromMinorCompaction()","closeStreamReaders(boolean)","getBulkLoadTimestamp()","getComparator()","getFileInfo()","getHDFSBlockDistribution()","getLastKey()","getMaximumTimestamp()","storeFileReaderClosed(StoreFileReader)","getModificationTimeStamp()","isReference()"],"org.apache.hadoop.hbase.master.normalizer.SimpleRegionNormalizer":["setMasterServices(MasterServices)","getSkippedCount(NormalizationPlan.PlanType)","setMasterRpcServices(MasterRpcServices)","computePlanForTable(TableName)","getRegionSize(RegionInfo)","planSkipped(RegionInfo, PlanType)"],"org.apache.hadoop.hbase.wal.WALKeyImpl":["setSequenceId(long)","getMvcc()","getNonceGroup()","readFieldsFromPb(WALProtos.WALKey, WALCellCodec.ByteStringUncompressor)","getEncodedRegionName()","setWriteEntry(MultiVersionConcurrencyControl.WriteEntry)","getLogSeqNum()","getWriteTime()","hashCode()","setCompressionContext(CompressionContext)","init(byte[], TableName, long, long, List, long, long, MultiVersionConcurrencyControl, NavigableMap)","setOrigLogSeqNum(long)","internEncodedRegionName(byte[])","getNonce()","clearReplicationScope()","getClusterIds()","getSequenceId()","equals(Object)","addClusterId(UUID)","estimatedSerializedSizeOf()","toString()","getOrigLogSeqNum()","internTableName(TableName)","getReplicationScopes()","setReplicationScope(NavigableMap)","getTableName()","getOriginatingClusterId()","getBuilder(WALCellCodec.ByteStringCompressor)","compareTo(WALKey)","getWriteEntry()"]}