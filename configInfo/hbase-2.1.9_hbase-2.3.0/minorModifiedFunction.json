{"org.apache.hadoop.hbase.RegionMetricsBuilder":["setStoreFileIndexSize(Size)","toRegionMetrics(AdminProtos.GetRegionLoadResponse)","setStoreFileUncompressedDataIndexSize(Size)","toRegionLoad(RegionMetrics)","setStoreFileCount(int)","setCompactedCellCount(long)","toRegionMetrics(ClusterStatusProtos.RegionLoad)","setWriteRequestCount(long)","setStoreCount(int)","setCompletedSequenceId(long)","setCompactingCellCount(long)","setLastMajorCompactionTimestamp(long)","setUncompressedStoreFileSize(Size)","setBloomFilterSize(Size)","build()","setFilteredReadRequestCount(long)","setReadRequestCount(long)","setDataLocality(float)","newBuilder(byte[])","setStoreFileRootLevelIndexSize(Size)","setMemStoreSize(Size)","setStoreSequenceIds(Map)","toStoreSequenceId(Map)","setStoreFileSize(Size)"],"org.apache.hadoop.hbase.client.ConnectionImplementation":["finalize()","locateRegion(TableName, byte[])","clearCaches(ServerName)","shutdownBatchPool(ExecutorService)","getAdmin()","locateRegion(byte[])","getAdminForMaster()","cacheLocation(TableName, RegionLocations)","getRpcControllerFactory()","getClient(ServerName)","getKeepAliveMasterService()","locateRegion(TableName, byte[], boolean, boolean, int)","getRegionLocation(TableName, byte[], boolean)","getNewRpcRetryingCallerFactory(Configuration)","hasCellBlockSupport()","getBufferedMutator(BufferedMutatorParams)","getHbck(ServerName)","getConnectionMetrics()","shutdownPools()","clearRegionCache(TableName)","checkClosed()","getNonceGenerator()","getRpcClient()","getMaster()","toString()","getMetaLookupPool()","getCurrentBatchPool()","relocateRegion(TableName, byte[], int)","getTableState(TableName)","isDeadServer(ServerName)","locateRegions(TableName, boolean, boolean)","getTableBuilder(TableName, ExecutorService)","getStatisticsTracker()","relocateRegion(TableName, byte[])","clearRegionCache(TableName, byte[])","clearRegionCache()","getThreadPool(int, int, String, BlockingQueue)","getConnectionConfiguration()","abort(String, Throwable)","retrieveClusterId()","isTableAvailable(TableName, byte[][])","getBackoffPolicy()","isTableEnabled(TableName)","deleteCachedRegionLocation(HRegionLocation)","getTable(TableName)","release(MasterServiceState)","getRpcRetryingCallerFactory()","isMasterRunning()","releaseMaster(MasterServiceState)","isTableDisabled(TableName)","getConfiguration()","isAborted()","setUseMetaReplicas(boolean)","locateRegionInMeta(TableName, byte[], boolean, boolean, int)","locateRegions(TableName)","closeMasterService(MasterServiceState)","injectNonceGeneratorForTesting(ClusterConnection, NonceGenerator)","resetMasterServiceState(MasterServiceState)","getBufferedMutator(TableName)","getAsyncProcess()","getRegionLocator(TableName)","close()","updateCachedLocations(TableName, byte[], byte[], Object, ServerName)","getBatchPool()","get(CompletableFuture)","cacheLocation(TableName, ServerName, HRegionLocation)","getNumberOfCachedRegionLocations(TableName)","locateRegion(TableName, byte[], boolean, boolean)","isClosed()","isKeepAliveMasterConnectedAndRunning(MasterServiceState)","closeMaster()","getCachedLocation(TableName, byte[])","getAdmin(ServerName)","getHbck()","updateCachedLocation(RegionInfo, ServerName, ServerName, long)","getCurrentMetaLookupPool()","locateMeta(TableName, boolean, int)"],"org.apache.hadoop.hbase.client.AsyncTableRegionLocatorImpl":["getName()","getRegionLocation(byte[], int, boolean)"],"org.apache.hadoop.hbase.regionserver.StoreFileWriter.Builder":["withMaxKeyCount(long)","withShouldDropCacheBehind(boolean)","withOutputDir(Path)","withComparator(CellComparator)","withFileContext(HFileContext)","withFilePath(Path)","build()","withBloomType(BloomType)","withFavoredNodes(InetSocketAddress[])"],"org.apache.hadoop.hbase.fs.HFileSystem":["createNonRecursive(Path, boolean, int, short, long, Progressable)","createReorderingProxy(ClientProtocol, ReorderBlocks, Configuration)","getLocalFs(Configuration)","setStoragePolicy(Path, String)","newInstanceFileSystem(Configuration)","getBackingFs()","getStoragePolicyName(Path)","useHBaseChecksum()","addLocationsOrderInterceptor(Configuration, ReorderBlocks)","addLocationsOrderInterceptor(Configuration)","getNoChecksumFs()","getStoragePolicyForOldHDFSVersion(Path)","get(Configuration)","close()","maybeWrapFileSystem(FileSystem, Configuration)"],"org.apache.hadoop.hbase.regionserver.compactions.StripeCompactor":["commitWriter(StripeMultiFileWriter, FileDetails, CompactionRequestImpl)","compact(CompactionRequestImpl, int, long, byte[], byte[], byte[], byte[], ThroughputController, User)","compact(CompactionRequestImpl, List, byte[], byte[], ThroughputController, User)"],"org.apache.hadoop.hbase.regionserver.RSRpcServices.RegionScannerShippedCallBack":["run()"],"org.apache.hadoop.hbase.quotas.ThrottleSettings":["getProto()","getThrottleType()","getTimeUnit()","getQuotaType()","getSoftLimit()","validateTimedQuota(TimedQuota)","fromTimedQuota(String, TableName, String, ThrottleType, QuotaProtos.TimedQuota)","toString()","merge(QuotaSettings)","setupSetQuotaRequest(SetQuotaRequest.Builder)"],"org.apache.hadoop.hbase.master.procedure.ModifyTableProcedure":["getState(int)","addRegionsToMeta(MasterProcedureEnv, TableDescriptor, List)","getTableOperationType()","completionCleanup(MasterProcedureEnv)","updateTableDescriptor(MasterProcedureEnv)","getStateId(ModifyTableState)","getInitialState()","getTableName()","initilize()","deleteFromFs(MasterProcedureEnv, TableDescriptor, TableDescriptor)","updateReplicaColumnsIfNeeded(MasterProcedureEnv, TableDescriptor, TableDescriptor)","getRegionInfoList(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","preModify(MasterProcedureEnv, ModifyTableState)","prepareModify(MasterProcedureEnv)","postModify(MasterProcedureEnv, ModifyTableState)","isRollbackSupported(ModifyTableState)","executeFromState(MasterProcedureEnv, ModifyTableState)","runCoprocessorAction(MasterProcedureEnv, ModifyTableState)","rollbackState(MasterProcedureEnv, ModifyTableState)"],"org.apache.hadoop.hbase.backup.example.HFileArchiveManager":["disableHFileBackup(byte[])","enableHFileBackup(byte[])","enable(ZKWatcher, byte[])","disable(ZKWatcher, byte[])","stop()","getTableNode(byte[])","disableHFileBackup()","isArchivingEnabled(byte[])"],"org.apache.hadoop.hbase.security.access.TablePermission":["hasTable()","implies(TableName, KeyValue, Action)","equals(Object)","matchesFamilyQualifier(TableName, byte[], byte[], Action)","toString()","implies(TableName, byte[], byte[], Action)","hasQualifier()","readFields(DataInput)","getQualifier()","hashCode()","getTableName()","getFamily()","implies(String, Action)","hasNamespace()","write(DataOutput)","hasFamily()","tableFieldsEqual(TablePermission)","setTableName(TableName)","matchesFamily(TableName, byte[], Action)","getNamespace()"],"org.apache.hadoop.hbase.regionserver.MemStoreLABImpl":["createChunkCell(ByteBuffer, int, int, int, long)","tryRetireChunk(Chunk)","isOffHeap()","getNewExternalChunk(int)","copyCellInto(Cell)","copyCellInto(Cell, int)","getNewExternalChunk(ChunkCreator.ChunkType)","incScannerCount()","getOrMakeChunk()","getCurrentChunk()","copyBBECellInto(ByteBufferExtendedCell, int)","forceCopyOfBigCellInto(Cell)","isOnHeap()","decScannerCount()","recycleChunks()","getNumOfChunksReturnedToPool()","getOpenScannerCount()","getPooledChunks()","copyToChunkCell(Cell, ByteBuffer, int, int)","copyBBECToChunkCell(ByteBufferExtendedCell, ByteBuffer, int, int)","close()"],"org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource":["locateRecoveredPaths(PriorityBlockingQueue)","init(Configuration, FileSystem, ReplicationSourceManager, ReplicationQueueStorage, ReplicationPeer, Server, String, UUID, WALFileLengthProvider, MetricsSource)","getReplSyncUpPath(Path)","getPeerId()","getServerWALsBelongTo()","isRecovered()","createNewShipper(String, PriorityBlockingQueue)","tryFinish()"],"org.apache.hadoop.hbase.regionserver.HRegionServer":["closeRegionIgnoreErrors(RegionInfo, boolean)","canCreateBaseZNode()","reportRegionStateTransition(RegionStateTransitionContext)","getRegionServerSpaceQuotaManager()","getRpcServer()","getConfigurationManager()","getRegion(String)","initializeZooKeeper()","getWalRoller()","closeRegion(String, boolean, ServerName)","isShutDown()","waitForMasterActive()","getRegionServerCoprocessors()","execRegionServerService(RpcController, CoprocessorServiceRequest)","getFsTableDescriptors()","getCompactSplitThread()","startHeapMemoryManager()","getUseThisHostnameInstead(Configuration)","setupNetty(Configuration)","tryRegionServerReport(long, long)","getOnlineRegionsAsPrintableString()","getCoordinatedStateManager()","createClusterConnection()","getWriteRequestCount()","reportRegionSizesForQuotas(RegionSizeStore)","getExecutorService()","remoteProcedureComplete(long, Throwable)","getRegionServerAccounting()","createRegionServerStatusStub()","removeRegion(HRegion, ServerName)","getLeases()","setupClusterConnection()","sleep(long)","keepLooping()","movedRegionCleanerPeriod()","getOnlineRegion(byte[])","getRegion(byte[])","getWriteLock()","getWAL(RegionInfo)","setupWALAndReplication()","waitForServerOnline()","setAbortRequested()","getTableDescriptors()","getClusterConnection()","getMetaTableObserver()","createRpcServices()","checkFileSystem()","setupWindows(Configuration, ConfigurationManager)","getRegionByEncodedName(byte[], String)","updateRegionFavoredNodesMapping(String, List)","cleanMovedRegions()","getConnection()","getCacheConfig()","isAborted()","getMovedRegion(String)","createConnection(Configuration)","stopServiceThreads()","getWALFileSystem()","getRegionServerCoprocessorHost()","registerService(com.google.protobuf.Service)","getMasterAddressTracker()","kill()","isOnline()","stop(String, boolean, User)","getNumberOfOnlineRegions()","getRegions()","getOnlineTables()","getOnlineRegionsLocalContext()","unassign(byte[])","main(String[])","getServerName()","getReplicationSinkService()","getWALs()","shutdownWAL(boolean)","getLastSequenceId(byte[])","preRegistrationInitialization()","walRollRequestFinished()","removeFromMovedRegions(String)","sendShutdownInterrupt()","convertThrowableToIOE(Throwable, String)","closeMetaTableRegions(boolean)","onConfigurationChange(Configuration)","containsMetaTableRegions()","initializeThreads()","createRegionServerStatusStub(boolean)","getMetrics()","getCopyOfOnlineRegionsSortedByOffHeapSize()","reportFileArchivalForQuotas(TableName, Collection)","getCopyOfOnlineRegionsSortedByOnHeapSize()","getFlushPressure()","getRegionBlockLocations(String)","convertRegionSize(RegionInfo, Long)","createRegionLoad(HRegion, RegionLoad.Builder, RegionSpecifier.Builder)","closeUserRegions(boolean)","constructRegionServer(Class, Configuration)","getSecureBulkLoadManager()","getClusterId()","isClusterUp()","stop(String)","createRegionLoad(String)","isOnlineRegionsEmpty()","getCompactionPressure()","triggerFlushInPrimaryRegion(HRegion)","addRegion(HRegion)","reportForDuty()","getMyEphemeralNodePath()","getHeapMemoryManager()","getCompactionRequestor()","getRegionByEncodedName(String)","startServices()","putUpWebUI()","getRegions(TableName)","getThreadWakeFrequency()","getNonceManager()","updateConfiguration()","getFileSystem()","getFlushRequester()","toString()","isHealthy()","executeProcedure(long, RSProcedureCallable)","startReplicationService()","buildServerLoad(long, long)","run()","getRegionServerRpcQuotaManager()","abort(String, Throwable)","registerConfigurationObservers()","getWalGroupsReplicationStatus()","initializeMemStoreChunkCreator()","canUpdateTableDescriptor()","closeAndOfflineRegionForSplitOrMerge(List)","deleteMyEphemeralNode()","getReplicationSourceService()","getStartcode()","getChoreService()","createMyEphemeralNode()","getConfiguration()","isStopped()","cleanup(Throwable, String)","isHealthCheckerConfigured()","getRegionServerMetrics()","postOpenDeployTasks(PostOpenDeployContext)","getInfoServer()","handleReportForDutyResponse(RegionServerStartupResponse)","newReplicationInstance(String, Class, Configuration, HRegionServer, FileSystem, Path, Path, WALProvider)","isStopping()","getEventLoopGroupConfig()","blockAndCheckIfStopped(ZKNodeTracker)","clearRegionBlockCache(Region)","regionLock(List, String, Abortable)","abort(String)","getFlushThroughputController()","buildReportAndSend(RegionServerStatusService.BlockingInterface, RegionSizeStore)","waitOnAllRegionsToClose(boolean)","getRSRpcServices()","closeAllRegions(boolean)","getRootDir()","getWALRootDir()","getRegionsInTransitionInRS()","getZooKeeper()","getMetaTableLocator()","getProcessName()","configureInfoServer()","createNewReplicationInstance(Configuration, HRegionServer, FileSystem, Path, Path, WALProvider)","getDumpServlet()","getFavoredNodesForRegion(String)","initializeFileSystem()","login(UserProvider, String)","checkCodecs(Configuration)","buildRegionSpaceUseReportRequest(RegionSizeStore)","areAllUserRegionsOffline()","reportProcedureDone(ReportProcedureDoneRequest)","addToMovedRegions(String, ServerName, long)"],"org.apache.hadoop.hbase.replication.regionserver.Replication":["addHFileRefsToQueue(TableName, byte[], List)","replicateLogEntries(List, CellScanner, String, String, String)","join()","stopReplicationService()","startReplicationService()","getReplicationManager()","refreshAndGetReplicationLoad()","getPeerProcedureHandler()","buildReplicationLoad()","initialize(Server, FileSystem, Path, Path, WALProvider)"],"org.apache.hadoop.hbase.master.balancer.BaseLoadBalancer":["getRegionAssignmentsByServer(Collection)","setRackManager(RackManager)","stop(String)","updateBalancerStatus(boolean)","isStopped()","getConf()","balanceMasterRegions(Map)","assignMasterSystemRegions(Collection, List)","setMasterServices(MasterServices)","areSomeRegionReplicasColocated(Cluster)","regionOnline(RegionInfo, ServerName)","createRegionFinder()","createCluster(List, Collection, boolean)","needsBalance(Cluster)","shouldBeOnMaster(RegionInfo)","retainAssignment(Map, List)","randomAssignment(Cluster, RegionInfo, List)","randomAssignment(RegionInfo, List)","setConf(Configuration)","setClusterMetrics(ClusterMetrics)","roundRobinAssignment(List, List)","postMasterStartupInitialize()","onConfigurationChange(Configuration)","setSlop(Configuration)","setClusterLoad(Map)","initialize()","regionOffline(RegionInfo)","roundRobinAssignment(Cluster, List, List, List, Map)","findIdleServers(List)"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketCache.BucketEntryGroup":["free(long)","add(Map.Entry)","overflow()","totalSize()"],"org.apache.hadoop.hbase.ServerMetricsBuilder":["setVersionNumber(int)","of(ServerName, int, String)","toServerLoad(ServerMetrics)","toServerMetrics(ServerName, int, String, ClusterStatusProtos.ServerLoad)","newBuilder(ServerName)","setInfoServerPort(int)","setVersion(String)","setUsedHeapSize(Size)","build()","setReportTimestamp(long)","of(ServerName)","setRequestCountPerSecond(long)","toCoprocessor(Collection)","setMaxHeapSize(Size)","setRegionMetrics(List)","setCoprocessorNames(List)","toServerMetrics(ClusterStatusProtos.LiveServerInfo)","setRequestCount(long)","setReplicationLoadSources(List)","setLastReportTimestamp(long)","toServerMetrics(ServerName, ClusterStatusProtos.ServerLoad)","setReplicationLoadSink(ReplicationLoadSink)"],"org.apache.hadoop.hbase.regionserver.MemStoreSize":["getHeapSize()","equals(Object)","isEmpty()","getDataSize()","getCellsCount()","toString()","getOffHeapSize()","hashCode()"],"org.apache.hadoop.hbase.regionserver.BaseRowProcessor":["postProcess(HRegion, WALEdit, boolean)","getName()","preProcess(HRegion, WALEdit)","preBatchMutate(HRegion, WALEdit)","getClusterIds()","useDurability()","postBatchMutate(HRegion)"],"org.apache.hadoop.hbase.snapshot.SnapshotManifestV2":["loadRegionManifests(Configuration, Executor, FileSystem, Path, SnapshotDescription, int)","deleteRegionManifest(FileSystem, Path, SnapshotRegionManifest)","getRegionManifestPath(Path, SnapshotRegionManifest)"],"org.apache.hadoop.hbase.tool.CanaryTool.RegionMonitor":["run()","checkWriteTableDistribution()","sniff(TaskType, RegionStdOutSink)","getSink()","createWriteTable(int)","generateMonitorTables(String[])"],"org.apache.hadoop.hbase.snapshot.SnapshotManifestV1":["buildManifestFromDisk(Configuration, FileSystem, Path, RegionInfo)","deleteRegionManifest(FileSystem, Path, SnapshotRegionManifest)","loadRegionManifests(Configuration, Executor, FileSystem, Path, SnapshotDescription)"],"org.apache.hadoop.hbase.mob.MobUtils":["getMobFamilyPath(Configuration, TableName, String)","createMobRefCell(Cell, byte[], Tag)","commitFile(Configuration, FileSystem, Path, Path, CacheConfig)","getTableLockName(TableName)","formatDate(Date)","getFirstDayOfMonth(Calendar, Date)","getMobRegionPath(Configuration, TableName)","doMobCompaction(Configuration, FileSystem, TableName, ColumnFamilyDescriptor, ExecutorService, boolean, LockManager.MasterLock)","setCacheMobBlocks(Scan, boolean)","cleanExpiredMobFiles(FileSystem, Configuration, TableName, ColumnFamilyDescriptor, CacheConfig, long)","isMobReferenceCell(Cell)","getMobRegionPath(Path, TableName)","parseDate(String)","getTableNameTag(Cell)","getMobHome(Configuration)","getMobRegionInfo(TableName)","fillPartitionId(CompactionPartitionId, Date, Date, String, MobCompactPartitionPolicy, Calendar, long)","getFirstDayOfWeek(Calendar, Date)","createDelFileWriter(Configuration, FileSystem, ColumnFamilyDescriptor, String, Path, long, Compression.Algorithm, byte[], CacheConfig, Encryption.Context)","getQualifiedMobRootDir(Configuration)","removeMobFiles(Configuration, FileSystem, TableName, Path, byte[], Collection)","createMobRefDeleteMarker(Cell)","isMobRegionInfo(RegionInfo)","isMobFileExpired(ColumnFamilyDescriptor, long, String)","createWriter(Configuration, FileSystem, ColumnFamilyDescriptor, MobFileName, Path, long, Compression.Algorithm, CacheConfig, Encryption.Context, boolean)","hasMobColumns(TableDescriptor)","getMobFamilyPath(Path, String)","getCompactionWorkingPath(Path, String)","createWriter(Configuration, FileSystem, ColumnFamilyDescriptor, String, Path, long, Compression.Algorithm, byte[], CacheConfig, Encryption.Context, boolean)","hasValidMobRefCellValue(Cell)","isRefOnlyScan(Scan)","getMobFileName(Cell)","getMobTableDir(Path, TableName)","hasMobReferenceTag(List)","createWriter(Configuration, FileSystem, ColumnFamilyDescriptor, String, Path, long, Compression.Algorithm, String, CacheConfig, Encryption.Context, boolean)","validateMobFile(Configuration, FileSystem, Path, CacheConfig, boolean)","createMobCompactorThreadPool(Configuration)","getMobValueLength(Cell)","getMobHome(Path)","createRefFileWriter(Configuration, FileSystem, ColumnFamilyDescriptor, Path, long, CacheConfig, Encryption.Context, boolean)","createWriter(Configuration, FileSystem, ColumnFamilyDescriptor, Path, long, Compression.Algorithm, CacheConfig, Encryption.Context, ChecksumType, int, int, BloomType, boolean)","isCacheMobBlocks(Scan)","isReadEmptyValueOnMobCellMiss(Scan)","createMobRefCell(Cell, byte[], byte[])","isRawMobScan(Scan)","isMobRegionName(TableName, byte[])"],"org.apache.hadoop.hbase.master.assignment.UnassignProcedure":["toStringClassDetails(StringBuilder)","remoteCallFailed(MasterProcedureEnv, RegionStateNode, IOException)","getTableOperationType()","updateTransition(MasterProcedureEnv, RegionStateNode)","getServer(MasterProcedureEnv)","reportTransition(MasterProcedureEnv, RegionStateNode, TransitionCode, long)","remoteCallBuild(MasterProcedureEnv, ServerName)","finishTransition(MasterProcedureEnv, RegionStateNode)","proceed(MasterProcedureEnv, RegionStateNode)","isRollbackSupported(RegionTransitionState)","isSafeToProceed(MasterProcedureEnv, RegionStateNode, IOException)","getProcedureMetrics(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","startTransition(MasterProcedureEnv, RegionStateNode)"],"org.apache.hadoop.hbase.quotas.DefaultOperationQuota":["estimateConsume(OperationType, int, long)","checkQuota(int, int, int)","addScanResult(List)","addGetResult(Result)","addMutation(Mutation)","getReadAvailable()","getWriteAvailable()","close()"],"org.apache.hadoop.hbase.regionserver.wal.WALUtil":["writeBulkLoadMarkerAndSync(WAL, NavigableMap, RegionInfo, WALProtos.BulkLoadDescriptor, MultiVersionConcurrencyControl)","writeMarker(WAL, NavigableMap, RegionInfo, WALEdit, MultiVersionConcurrencyControl)","writeCompactionMarker(WAL, NavigableMap, RegionInfo, CompactionDescriptor, MultiVersionConcurrencyControl)","writeFlushMarker(WAL, NavigableMap, RegionInfo, FlushDescriptor, boolean, MultiVersionConcurrencyControl)","getWALBlockSize(Configuration, FileSystem, Path)","writeRegionEventMarker(WAL, NavigableMap, RegionInfo, RegionEventDescriptor, MultiVersionConcurrencyControl)","doFullMarkerAppendTransaction(WAL, NavigableMap, RegionInfo, WALEdit, MultiVersionConcurrencyControl, boolean)","getWALBlockSize(Configuration, FileSystem, Path, boolean)"],"org.apache.hadoop.hbase.master.procedure.ProcedureSyncWait.ProcedureFuture":["cancel(boolean)","get(long, TimeUnit)","isDone()","get()","isCancelled()"],"org.apache.hadoop.hbase.util.RegionMover.MoveWithAck":["call()"],"org.apache.hadoop.hbase.RegionLoad":["getTotalStaticIndexSizeKB()","getWriteRequestsCount()","getUncompressedStoreFileSize()","getCompactedCellCount()","getStorefileSizeMB()","getRegionName()","getStoreFileRootLevelIndexSize()","getLastMajorCompactionTimestamp()","getStoreFileUncompressedDataIndexSize()","getName()","getStoreCompleteSequenceId()","getStoreSequenceId()","getMemStoreSize()","getFilteredReadRequestCount()","getTotalStaticBloomSizeKB()","getStoreFileCount()","getStoreFileSize()","getStores()","getReadRequestCount()","getStorefileIndexSizeKB()","getWriteRequestCount()","getMemStoreSizeMB()","getStoreUncompressedSizeMB()","toString()","getStorefileIndexSizeMB()","getFilteredReadRequestsCount()","getCurrentCompactedKVs()","getCompleteSequenceId()","getCompletedSequenceId()","getLastMajorCompactionTs()","getStoreFileIndexSize()","getRootIndexSizeKB()","getCompactingCellCount()","getReadRequestsCount()","getRequestsCount()","getStoreCount()","getBloomFilterSize()","getStorefiles()","getTotalCompactingKVs()","getDataLocality()"],"org.apache.hadoop.hbase.io.hfile.LruBlockCache":["calculateOverhead(long, long, int)","getBlockCaches()","assertCounterSanity(long, long)","singleSize()","isEvictionInProgress()","updateSizeMetrics(LruCachedBlock, boolean)","getCachedFileNamesForTest()","getFreeSize()","heapSize()","cacheBlock(BlockCacheKey, Cacheable, boolean)","evictBlock(LruCachedBlock, boolean)","getBlockCount()","getStats()","logStats()","getEncodingCountsForTest()","getCurrentSize()","getDataBlockCount()","getBlockTypeCountsForTest()","getOverhead()","getMaxSize()","getMapForTests()","toString()","getCurrentDataSize()","getEvictionThread()","acceptableSize()","shutdown()","memorySize()","evict()","setVictimCache(BlockCache)","containsBlock(BlockCacheKey)","clearCache()","evictBlocksByHfileName(String)","multiSize()","iterator()","setMaxSize(long)","cacheBlock(BlockCacheKey, Cacheable)","minSize()","runEviction()","evictBlock(BlockCacheKey)","getBlock(BlockCacheKey, boolean, boolean, boolean)","size()"],"org.apache.hadoop.hbase.regionserver.wal.FSHLog.RingBufferEventHandler":["attainSafePoint(long)","cleanupOutstandingSyncsOnException(long, Exception)","append(FSWALEntry)","attainSafePoint()","onStart()","isOutstandingSyncsFromRunners()","onShutdown()","isOutstandingSyncs()","onEvent(RingBufferTruck, long, boolean)"],"org.apache.hadoop.hbase.regionserver.HRegion":["preProcess(RowProcessor, WALEdit)","requestCompaction(byte[], String, int, boolean, CompactionLifeCycleTracker)","flush(boolean)","getRegionDir(Path, String)","getMemStoreFlushSize()","checkMutationType(Mutation, byte[])","computeHDFSBlocksDistribution(Configuration, TableDescriptor, RegionInfo, Path)","openReadOnlyFileSystemHRegion(Configuration, FileSystem, Path, RegionInfo, TableDescriptor)","getTableDescriptor()","doAbortFlushToWAL(WAL, long, Map)","replayWALRegionEventMarker(RegionEventDescriptor)","equals(Object)","getHDFSBlocksDistribution()","rowIsInRange(RegionInfo, byte[], int, short)","getFilesystem()","refreshStoreFiles()","increment(Increment)","processRowsWithLocks(RowProcessor, long, long)","increment(Increment, long, long)","getCellComparator()","instantiateRegionScanner(Scan, List, long, long)","getReadRequestsCount()","close(boolean)","decrementCompactionsQueuedCount()","getScanner(Scan, List)","getWriteRequestsCount()","processRowsWithLocks(RowProcessor, long, long, long)","replayRecoveredEditsForPaths(long, FileSystem, NavigableSet, CancelableProgressable, Path)","getMemStoreHeapSize()","closeRegionOperation(Operation)","checkResources()","heapSize()","requestFlush0(FlushLifeCycleTracker)","replayRecoveredEditsIfAny(Map, CancelableProgressable, MonitoredTask)","registerService(com.google.protobuf.Service)","hashCode()","writeRegionCloseMarker(WAL)","restoreEdit(HStore, Cell, MemStoreSizing)","openHRegion(HRegion, CancelableProgressable)","getStoreFileList(byte[][])","getReplicationScope()","incMemStoreSize(long, long, long, int)","checkSplit()","getRowLock(byte[], boolean)","applyToMemStore(HStore, Cell, MemStoreSizing)","createRegionDir(Configuration, RegionInfo, Path)","getStore(Cell)","initializeRegionInternals(CancelableProgressable, MonitoredTask)","initialize(CancelableProgressable)","internalFlushCacheAndCommit(WAL, MonitoredTask, PrepareFlushResult, Collection)","onConfigurationChange(Configuration)","internalFlushcache(MonitoredTask)","checkReadsEnabled()","logFatLineOnFlush(Collection, long)","compactStore(byte[], ThroughputController)","warmupHRegion(RegionInfo, TableDescriptor, WAL, Configuration, RegionServerServices, CancelableProgressable)","isLoadingCfsOnDemandDefault()","hasMultipleColumnFamilies(Collection)","forceSplit(byte[])","lock(Lock, int)","getRowLockInternal(byte[], boolean, RowLock)","throwException(String, String)","setTableDescriptor(TableDescriptor)","getStoreFileOpenAndCloseThreadPool(String)","logRegionFiles()","replayFlushInStores(FlushDescriptor, PrepareFlushResult, boolean)","instantiateHStore(ColumnFamilyDescriptor)","getEffectiveDurability(Durability)","shouldFlushStore(HStore)","getMVCC()","getMemStoreDataSize()","getCompactionState()","setTimeoutForWriteLock(long)","batchMutate(Mutation[], long, long)","unblockUpdates()","recordMutationWithoutWal(Map)","checkFamilies(Collection)","getBaseConf()","doClose(boolean, MonitoredTask)","batchMutate(Mutation[], boolean, long, long)","getMemStoreOffHeapSize()","setCoprocessorHost(RegionCoprocessorHost)","bulkLoadHFiles(Collection, boolean, BulkLoadListener, boolean, List, boolean)","mutateRowsWithLocks(Collection, Collection, long, long)","requestFlush(FlushLifeCycleTracker)","getLockedRows()","startRegionOperation(Operation)","getCheckAndMutateChecksFailed()","openHRegion(Configuration, FileSystem, Path, Path, RegionInfo, TableDescriptor, WAL, RegionServerServices, CancelableProgressable)","initialize()","requestCompaction(String, int, boolean, CompactionLifeCycleTracker)","matches(CompareOperator, int)","compactStores()","doDropStoreMemStoreContentsForSeqId(HStore, long)","openHRegion(Path, RegionInfo, TableDescriptor, WAL, Configuration, RegionServerServices, CancelableProgressable)","openHRegion(CancelableProgressable)","incMemStoreSize(MemStoreSize)","prepareDeleteTimestamps(Mutation, Map, byte[])","checkEncryption()","writeRegionOpenMarker(WAL, long)","getCompactPriority()","checkReadOnly()","batchMutate(BatchOperation)","startBulkRegionOperation(boolean)","isFlushSize(MemStoreSize)","getScanner(Scan, List, long, long)","replayWALFlushStartMarker(FlushDescriptor)","getReadPoint(IsolationLevel)","getRegionServicesForStores()","isMergeable()","doWALAppend(WALEdit, Durability, List, long, long, long, long)","execService(com.google.protobuf.RpcController, CoprocessorServiceCall)","compact(CompactionContext, HStore, ThroughputController)","prepareDelete(Delete)","getWAL()","flushcache(boolean, boolean, FlushLifeCycleTracker)","dropPrepareFlushIfPossible()","decorateRegionConfiguration(Configuration)","reportCompactionRequestFailure()","doRegionCompactionPrep()","processRowsWithLocks(RowProcessor)","openHRegion(Configuration, FileSystem, Path, RegionInfo, TableDescriptor, WAL)","addRegionToSnapshot(SnapshotDescription, ForeignExceptionSnare)","get(Get)","updateDeleteLatestVersionTimestamp(Cell, Get, int, byte[])","replayRecoveredEdits(Path, Map, CancelableProgressable, FileSystem)","shouldForceSplit()","getStoreOpenAndCloseThreadPool(String)","checkTimestamps(Map, long)","updateCellTimestamps(Iterable, byte[])","get(Get, boolean, long, long)","incrementCompactionsQueuedCount()","setReadsEnabled(boolean)","doCheckAndRowMutate(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, RowMutations, Mutation)","closeRegionOperation()","getRegionInfo()","replayWALFlushCommitMarker(FlushDescriptor)","startRegionOperation()","setHTableSpecificConf()","worthPreFlushing()","getReadPoint()","checkAndMutate(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, Mutation)","doCoprocessorPreCall(Operation, Mutation)","decrMemStoreSize(long, long, long, int)","compact(CompactionContext, HStore, ThroughputController, User)","replayWALCompactionMarker(CompactionDescriptor, boolean, boolean, long)","reckonDelta(Cell, Cell, byte[], long, Mutation, Function)","get(Get, boolean)","checkNegativeMemStoreDataSize(long, long)","registerChildren(ConfigurationManager)","getWALRegionDir()","getScanner(Scan)","reportCompactionRequestEnd(boolean, int, long)","openHRegion(Configuration, FileSystem, Path, RegionInfo, TableDescriptor, WAL, RegionServerServices, CancelableProgressable)","shouldSyncWAL()","getSplitPolicy()","append(Append, long, long)","replayWALFlushMarker(FlushDescriptor, long)","rowIsInRange(RegionInfo, byte[])","initializeWarmup(CancelableProgressable)","isSplittable()","updateSequenceId(Iterable, long)","waitForFlushesAndCompactions()","openHRegion(RegionInfo, TableDescriptor, WAL, Configuration)","getBlockedRequestsCount()","instantiateRegionScanner(Scan, List)","openHRegion(Region, CancelableProgressable)","requestFlushIfNeeded()","getDataInMemoryWithoutWAL()","newHRegion(Path, WAL, FileSystem, Configuration, RegionInfo, TableDescriptor, RegionServerServices)","doProcessRowWithTimeout(RowProcessor, long, HRegion, List, WALEdit, long)","getOldestHfileTs(boolean)","setClosing(boolean)","getLongValue(Cell)","replayWALBulkLoadEventMarker(WALProtos.BulkLoadDescriptor)","getOpenSeqNum()","reckonDeltas(Operation, Mutation, Durability, Map, List)","close()","getOldestSeqIdOfStore(byte[])","getCheckAndMutateChecksPassed()","checkCompressionCodecs()","decrMemStoreSize(MemStoreSize)","batchMutate(Mutation[])","getRegionServerServices()","dropMemStoreContents()","createHRegion(RegionInfo, Path, Configuration, TableDescriptor, WAL)","getFilteredReadRequestsCount()","dropMemStoreContentsForSeqId(long, HStore)","getRegionFileSystem()","internalPrepareFlushCache(WAL, long, Collection, MonitoredTask, boolean, FlushLifeCycleTracker)","isClosed()","getPrepareFlushResult()","computeHDFSBlocksDistribution(Configuration, TableDescriptor, RegionInfo)","shouldFlush(StringBuilder)","prepareGet(Get)","getMaxStoreSeqId()","getMetrics()","getWalFileSystem()","reckonDeltasByStore(HStore, Operation, Mutation, Durability, long, List, List)","internalFlushcache(Collection, MonitoredTask, boolean, FlushLifeCycleTracker)","getEarliestFlushTimeForAllStores()","sort(List, CellComparator)","doDelta(Operation, Mutation, long, long, boolean)","requestFlush()","rewriteCellTags(Map, Mutation)","doBatchMutate(Mutation)","setCompleteSequenceId(RegionLoad.Builder)","doWALAppend(WALEdit, Durability, List, long, long, long)","isAllFamilies(Collection)","getCoprocessorHost()","isZeroLengthThenDelete(FileSystem, Path)","append(Append)","doWALAppend(WALEdit, Durability, long, long)","getOpenAndCloseThreadPool(int, String)","checkRow(byte[], String)","lock(Lock)","put(Put)","bulkLoadHFiles(Collection, boolean, BulkLoadListener)","hasReferences()","getStores()","getLoadStatistics()","waitForFlushes(long)","blockUpdates()","getMaxFlushedSeqId()","toString()","mutateRow(RowMutations)","getRowLock(byte[])","deregisterChildren(ConfigurationManager)","put(byte[], byte[], List)","sync(long, Durability)","waitForFlushes()","getReadLockCount()","checkClassLoading()","internalFlushcache(WAL, long, Collection, MonitoredTask, boolean, FlushLifeCycleTracker)","getNumMutationsWithoutWAL()","getStoreFiles()","get(Mutation, HStore, List, IsolationLevel, TimeRange)","clearSplit()","writeFlushRequestMarkerToWAL(WAL, boolean)","doSyncOfUnflushedWALChanges(WAL, RegionInfo)","replayWALFlushCannotFlushMarker(FlushDescriptor, long)","isClosing()","incrementFlushesQueuedCount()","delete(Delete)","createHRegion(RegionInfo, Path, Configuration, TableDescriptor, WAL, boolean)","delete(NavigableMap, Durability)","checkFamily(byte[])","isReadOnly()","openHRegion(Path, RegionInfo, TableDescriptor, WAL, Configuration)","applyToMemStore(HStore, List, boolean, MemStoreSizing)","refreshStoreFiles(boolean)","initializeStores(CancelableProgressable, MonitoredTask)","doMiniBatchMutate(BatchOperation)","getRegionWALFileSystem()","checkAndRowMutate(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, RowMutations)","checkTargetRegion(byte[], String, Object)","getSmallestReadPoint()","closeBulkRegionOperation()","batchReplay(MutationReplay[], long)","replayWALFlushAbortMarker(FlushDescriptor)","releaseRowLocks(List)","getStore(byte[])","areWritesEnabled()","metricsUpdateForGet(List, long)","getExplicitSplitPoint()","openHRegion(RegionInfo, TableDescriptor, WAL, Configuration, RegionServerServices, CancelableProgressable)","isAvailable()","reportCompactionRequestStart(boolean)","compact(boolean)","getNextSequenceId(WAL)"],"org.apache.hadoop.hbase.client.AsyncBatchRpcRetryingCaller":["removeErrors(Action)","getExtraContextForError(ServerName)","buildReq(Map, List, Map)","onComplete(Action, RegionRequest, int, ServerName, RegionResult, List, Throwable, MutableBoolean)","call()","addError(Action, Throwable, ServerName)","onError(Map, int, Throwable, ServerName)","send(Map, int)","failOne(Action, int, Throwable, long, String)","onComplete(Map, int, ServerName, MultiResponse)","tryResubmit(Stream, int, boolean)","addError(Iterable, Throwable, ServerName)","failAll(Stream, int, Throwable, ServerName)","remainingTimeNs()","failAll(Stream, int)","logException(int, Supplier, Throwable, ServerName)","groupAndSend(Stream, int)"],"org.apache.hadoop.hbase.client.TableDescriptorBuilder.ModifyableTableDescriptor":["isMetaRegion()","hasRegionMemStoreReplication()","setValue(String, String)","toStringCustomizedValues()","getPriority()","getNormalizerTargetRegionSize()","setPriority(int)","getMemStoreFlushSize()","getValues(boolean)","setRegionMemStoreReplication(boolean)","removeCoprocessor(String)","isNormalizationEnabled()","setMemStoreFlushSize(long)","setMaxFileSize(long)","setRegionSplitPolicyClassName(String)","setNormalizerTargetRegionSize(long)","setValue(byte[], byte[])","setDurability(Durability)","getRegionReplication()","equals(Object)","toBytesOrNull(T, Function)","setValue(Bytes, Bytes)","setColumnFamily(ColumnFamilyDescriptor)","toString()","hasColumnFamily(byte[])","getDurability()","toByteArray()","setNormalizerTargetRegionCount(int)","getCoprocessorDescriptors()","setRegionReplication(int)","parseFrom(byte[])","setOwnerString(String)","setNormalizationEnabled(boolean)","getColumnFamilies()","getOwnerString()","setReadOnly(boolean)","getNormalizerTargetRegionCount()","getColumnFamilyCount()","getValue(Bytes)","removeValue(byte[])","setCoprocessor(String)","setValue(Bytes, String)","isMetaTable()","getRegionSplitPolicyClassName()","hashCode()","setFlushPolicyClassName(String)","hasCoprocessor(String)","modifyColumnFamily(ColumnFamilyDescriptor)","getValues()","setOwner(User)","setCompactionEnabled(boolean)","putColumnFamily(ColumnFamilyDescriptor)","checkHasCoprocessor(String)","getOrDefault(Bytes, Function, T)","isReadOnly()","toStringTableAttributes()","removeColumnFamily(byte[])","isCompactionEnabled()","getMaxFileSize()","getColumnFamily(byte[])","setCoprocessor(CoprocessorDescriptor)","compareTo(ModifyableTableDescriptor)","getValue(byte[])","getTableName()","setCoprocessorToMap(String)","removeValue(Bytes)","getColumnFamilyNames()","getValue(String)","getFlushPolicyClassName()","setCoprocessorWithSpec(String)"],"org.apache.hadoop.hbase.wal.WALPrettyPrinter":["setSequenceFilter(long)","setPosition(long)","setTableFilter(String)","disableValues()","run(String[])","setRegionFilter(String)","beginPersistentOutput()","toStringMap(Cell)","endPersistentOutput()","disableJSON()","setRowFilter(String)","processFile(Configuration, Path)","enableValues()","main(String[])","enableJSON()"],"org.apache.hadoop.hbase.master.snapshot.SnapshotHFileCleaner":["getDeletableFiles(Iterable)","isFileDeletable(FileStatus)","stop(String)","setConf(Configuration)","isStopped()","getFileCacheForTesting()","init(Map)"],"org.apache.hadoop.hbase.quotas.QuotaSettingsFactory":["fromUserQuotas(String, Quotas)","throttleUser(String, TableName, ThrottleType, long, TimeUnit)","fromSpace(TableName, String, SpaceQuota)","throttleUser(String, ThrottleType, long, TimeUnit)","limitNamespaceSpace(String, long, SpaceViolationPolicy)","fromTableQuotas(TableName, Quotas)","limitTableSpace(TableName, long, SpaceViolationPolicy)","fromUserQuotas(String, TableName, Quotas)","fromUserQuotas(String, String, Quotas)","fromQuotas(String, TableName, String, Quotas)","removeTableSpaceLimit(TableName)","unthrottleNamespace(String)","unthrottleUser(String)","unthrottleUser(String, String)","fromNamespaceQuotas(String, Quotas)","bypassGlobals(String, boolean)","unthrottleUser(String, TableName)","removeNamespaceSpaceLimit(String)","throttle(String, TableName, String, ThrottleType, long, TimeUnit)","throttleNamespace(String, ThrottleType, long, TimeUnit)","fromThrottle(String, TableName, String, QuotaProtos.Throttle)","throttleUser(String, String, ThrottleType, long, TimeUnit)","throttleTable(TableName, ThrottleType, long, TimeUnit)","unthrottleTable(TableName)"],"org.apache.hadoop.hbase.master.MasterCoprocessorHost":["postListSnapshot(SnapshotDescription)","postGetClusterMetrics(ClusterMetrics)","preSetSplitOrMergeEnabled(boolean, MasterSwitchType)","postSnapshot(SnapshotDescription, TableDescriptor)","postAddRSGroup(String)","preTableFlush(TableName)","preGetLocks()","preCloneSnapshot(SnapshotDescription, TableDescriptor)","preTruncateTableAction(TableName, User)","postRollBackMergeRegionsAction(RegionInfo[], User)","postRemoveReplicationPeer(String)","postCompletedDeleteTableAction(TableName, User)","preBalance()","preDisableTableAction(TableName, User)","postStartMaster()","postGetTableNames(List, String)","postBalanceSwitch(boolean, boolean)","preDisableReplicationPeer(String)","preCreateNamespace(NamespaceDescriptor)","postSetUserQuota(String, String, GlobalQuotaSettings)","preRequestLock(String, TableName, RegionInfo[], LockType, String)","preGetClusterMetrics()","preGetProcedures()","postDeleteNamespace(String)","preSplitAfterMETAAction(User)","preGetTableDescriptors(List, List, String)","preRestoreSnapshot(SnapshotDescription, TableDescriptor)","preRemoveReplicationPeer(String)","postListReplicationPeers(String)","preClearDeadServers()","preDeleteSnapshot(SnapshotDescription)","preUpdateReplicationPeerConfig(String, ReplicationPeerConfig)","postCompletedDisableTableAction(TableName, User)","postTruncateTable(TableName)","preListReplicationPeers(String)","postCompletedCreateTableAction(TableDescriptor, RegionInfo[], User)","preUnassign(RegionInfo, boolean)","preCreateTableAction(TableDescriptor, RegionInfo[], User)","preRemoveServers(Set)","postCompletedEnableTableAction(TableName, User)","preModifyTableAction(TableName, TableDescriptor, TableDescriptor, User)","preSetUserQuota(String, String, GlobalQuotaSettings)","preMergeRegionsAction(RegionInfo[], User)","postGetProcedures(List)","postCreateTable(TableDescriptor, RegionInfo[])","postDeleteSnapshot(SnapshotDescription)","preMergeRegions(RegionInfo[])","preMasterInitialization()","postAssign(RegionInfo)","postUpdateReplicationPeerConfig(String, ReplicationPeerConfig)","preGetNamespaceDescriptor(String)","postSetUserQuota(String, TableName, GlobalQuotaSettings)","preMoveServers(Set, String)","postRemoveRSGroup(String)","preMoveServersAndTables(Set, Set, String)","preSetNamespaceQuota(String, GlobalQuotaSettings)","preDisableTable(TableName)","postCompletedSplitRegionAction(RegionInfo, RegionInfo, User)","preRemoveRSGroup(String)","postClearDeadServers(List, List)","postRecommissionRegionServer(ServerName, List)","postMoveServersAndTables(Set, Set, String)","preRegionOffline(RegionInfo)","postCreateNamespace(NamespaceDescriptor)","postListDecommissionedRegionServers()","preAddReplicationPeer(String, ReplicationPeerConfig)","postSetSplitOrMergeEnabled(boolean, MasterSwitchType)","postMoveTables(Set, String)","postModifyTable(TableName, TableDescriptor, TableDescriptor)","postDisableReplicationPeer(String)","preStopMaster()","postAddReplicationPeer(String, ReplicationPeerConfig)","postModifyNamespace(NamespaceDescriptor, NamespaceDescriptor)","postRestoreSnapshot(SnapshotDescription, TableDescriptor)","postSetUserQuota(String, GlobalQuotaSettings)","postTableFlush(TableName)","postGetReplicationPeerConfig(String)","preSplitBeforeMETAAction(byte[], List, User)","preDeleteTableAction(TableName, User)","preMove(RegionInfo, ServerName, ServerName)","postBalanceRSGroup(String, boolean)","preRecommissionRegionServer(ServerName, List)","postMove(RegionInfo, ServerName, ServerName)","postRemoveServers(Set)","preMergeRegionsCommit(RegionInfo[], List, User)","preSplitRegionAction(TableName, byte[], User)","checkAndGetInstance(Class)","postListNamespaceDescriptors(List)","preAbortProcedure(ProcedureExecutor, long)","preCreateTable(TableDescriptor, RegionInfo[])","postMoveServers(Set, String)","preShutdown()","preSetUserQuota(String, GlobalQuotaSettings)","preLockHeartbeat(LockProcedure, boolean)","preMoveTables(Set, String)","postMergeRegionsCommit(RegionInfo[], RegionInfo, User)","preDeleteNamespace(String)","postEnableReplicationPeer(String)","postSetTableQuota(TableName, GlobalQuotaSettings)","postCompletedTruncateTableAction(TableName, User)","postRegionOffline(RegionInfo)","postGetTableDescriptors(List, List, String)","postEnableTable(TableName)","preSnapshot(SnapshotDescription, TableDescriptor)","postCompletedModifyTableAction(TableName, TableDescriptor, TableDescriptor, User)","preSplitRegion(TableName, byte[])","postGetLocks(List)","preListSnapshot(SnapshotDescription)","postAbortProcedure()","preEnableTable(TableName)","preSetUserQuota(String, TableName, GlobalQuotaSettings)","postCloneSnapshot(SnapshotDescription, TableDescriptor)","postSetNamespaceQuota(String, GlobalQuotaSettings)","createEnvironment(MasterCoprocessor, int, int, Configuration)","postDeleteTable(TableName)","postLockHeartbeat(LockProcedure, boolean)","postDisableTable(TableName)","postDecommissionRegionServers(List, boolean)","preModifyNamespace(NamespaceDescriptor, NamespaceDescriptor)","preAddRSGroup(String)","postUnassign(RegionInfo, boolean)","postGetNamespaceDescriptor(NamespaceDescriptor)","preDeleteTable(TableName)","postMergeRegions(RegionInfo[])","preDecommissionRegionServers(List, boolean)","preEnableTableAction(TableName, User)","preSetTableQuota(TableName, GlobalQuotaSettings)","preModifyTable(TableName, TableDescriptor, TableDescriptor)","preListNamespaceDescriptors(List)","postBalance(List)","preBalanceSwitch(boolean)","preGetReplicationPeerConfig(String)","postRollBackSplitRegionAction(User)","postRequestLock(String, TableName, RegionInfo[], LockType, String)","preAssign(RegionInfo)","postCompletedMergeRegionsAction(RegionInfo[], RegionInfo, User)","preGetTableNames(List, String)","preBalanceRSGroup(String)","preTruncateTable(TableName)","preEnableReplicationPeer(String)","preListDecommissionedRegionServers()"],"org.apache.hadoop.hbase.backup.HFileArchiver.FileablePath":["isFile()","getName()","delete()","getChildren()","close()","getPath()"],"org.apache.hadoop.hbase.coprocessor.MasterObserver":["preDisableTable(ObserverContext, TableName)","preMergeRegionsAction(ObserverContext, RegionInfo[])","postRemoveRSGroup(ObserverContext, String)","preGetNamespaceDescriptor(ObserverContext, String)","postBalanceSwitch(ObserverContext, boolean, boolean)","postCompletedDeleteTableAction(ObserverContext, TableName)","postCompletedModifyTableAction(ObserverContext, TableName, TableDescriptor)","postListDecommissionedRegionServers(ObserverContext)","postDisableTable(ObserverContext, TableName)","preEnableTable(ObserverContext, TableName)","preGetProcedures(ObserverContext)","postRemoveServers(ObserverContext, Set)","postModifyTable(ObserverContext, TableName, TableDescriptor)","preSetUserQuota(ObserverContext, String, String, GlobalQuotaSettings)","postEnableReplicationPeer(ObserverContext, String)","postMoveServers(ObserverContext, Set, String)","preLockHeartbeat(ObserverContext, TableName, String)","preModifyTableAction(ObserverContext, TableName, TableDescriptor)","preDisableReplicationPeer(ObserverContext, String)","postGetLocks(ObserverContext)","preMoveServers(ObserverContext, Set, String)","preSetTableQuota(ObserverContext, TableName, GlobalQuotaSettings)","postListSnapshot(ObserverContext, SnapshotDescription)","preShutdown(ObserverContext)","preDeleteTable(ObserverContext, TableName)","preSplitRegionAction(ObserverContext, TableName, byte[])","preListDecommissionedRegionServers(ObserverContext)","preSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","postMoveTables(ObserverContext, Set, String)","postUnassign(ObserverContext, RegionInfo, boolean)","preListSnapshot(ObserverContext, SnapshotDescription)","postGetTableDescriptors(ObserverContext, List, List, String)","postRecommissionRegionServer(ObserverContext, ServerName, List)","preSetUserQuota(ObserverContext, String, GlobalQuotaSettings)","postMoveServersAndTables(ObserverContext, Set, Set, String)","postClearDeadServers(ObserverContext, List, List)","postRollBackSplitRegionAction(ObserverContext)","postCompletedTruncateTableAction(ObserverContext, TableName)","preMoveTables(ObserverContext, Set, String)","preTableFlush(ObserverContext, TableName)","preModifyNamespace(ObserverContext, NamespaceDescriptor)","preSetNamespaceQuota(ObserverContext, String, GlobalQuotaSettings)","preCreateTable(ObserverContext, TableDescriptor, RegionInfo[])","preModifyTableAction(ObserverContext, TableName, TableDescriptor, TableDescriptor)","preBalance(ObserverContext)","postRemoveReplicationPeer(ObserverContext, String)","postModifyNamespace(ObserverContext, NamespaceDescriptor)","preClearDeadServers(ObserverContext)","postMergeRegions(ObserverContext, RegionInfo[])","preDisableTableAction(ObserverContext, TableName)","postCompletedMergeRegionsAction(ObserverContext, RegionInfo[], RegionInfo)","preGetTableNames(ObserverContext, List, String)","preMasterInitialization(ObserverContext)","preGetReplicationPeerConfig(ObserverContext, String)","postCompletedModifyTableAction(ObserverContext, TableName, TableDescriptor, TableDescriptor)","postSetUserQuota(ObserverContext, String, GlobalQuotaSettings)","postTruncateTable(ObserverContext, TableName)","preListReplicationPeers(ObserverContext, String)","preRequestLock(ObserverContext, String, TableName, RegionInfo[], String)","preCloneSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","postCompletedEnableTableAction(ObserverContext, TableName)","postRollBackMergeRegionsAction(ObserverContext, RegionInfo[])","preCreateNamespace(ObserverContext, NamespaceDescriptor)","postListNamespaceDescriptors(ObserverContext, List)","preAssign(ObserverContext, RegionInfo)","preBalanceRSGroup(ObserverContext, String)","preGetClusterMetrics(ObserverContext)","postDeleteTable(ObserverContext, TableName)","postBalanceRSGroup(ObserverContext, String, boolean)","postGetReplicationPeerConfig(ObserverContext, String)","preSetSplitOrMergeEnabled(ObserverContext, boolean, MasterSwitchType)","postSetUserQuota(ObserverContext, String, String, GlobalQuotaSettings)","postSetNamespaceQuota(ObserverContext, String, GlobalQuotaSettings)","postDecommissionRegionServers(ObserverContext, List, boolean)","preModifyNamespace(ObserverContext, NamespaceDescriptor, NamespaceDescriptor)","postSetUserQuota(ObserverContext, String, TableName, GlobalQuotaSettings)","preRestoreSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","postDeleteSnapshot(ObserverContext, SnapshotDescription)","postAddReplicationPeer(ObserverContext, String, ReplicationPeerConfig)","preMergeRegionsCommitAction(ObserverContext, RegionInfo[], List)","preAddReplicationPeer(ObserverContext, String, ReplicationPeerConfig)","preModifyTable(ObserverContext, TableName, TableDescriptor)","postRegionOffline(ObserverContext, RegionInfo)","postSetSplitOrMergeEnabled(ObserverContext, boolean, MasterSwitchType)","preAbortProcedure(ObserverContext, long)","preGetLocks(ObserverContext)","postListReplicationPeers(ObserverContext, String)","preDeleteTableAction(ObserverContext, TableName)","preUpdateReplicationPeerConfig(ObserverContext, String, ReplicationPeerConfig)","preDecommissionRegionServers(ObserverContext, List, boolean)","preSetUserQuota(ObserverContext, String, TableName, GlobalQuotaSettings)","preGetTableDescriptors(ObserverContext, List, List, String)","postSetTableQuota(ObserverContext, TableName, GlobalQuotaSettings)","postSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","postTableFlush(ObserverContext, TableName)","postCreateTable(ObserverContext, TableDescriptor, RegionInfo[])","postAssign(ObserverContext, RegionInfo)","preRemoveRSGroup(ObserverContext, String)","preListNamespaceDescriptors(ObserverContext, List)","postAddRSGroup(ObserverContext, String)","postDeleteNamespace(ObserverContext, String)","postBalance(ObserverContext, List)","preRemoveReplicationPeer(ObserverContext, String)","preCreateTableAction(ObserverContext, TableDescriptor, RegionInfo[])","postModifyTable(ObserverContext, TableName, TableDescriptor, TableDescriptor)","postAbortProcedure(ObserverContext)","postModifyNamespace(ObserverContext, NamespaceDescriptor, NamespaceDescriptor)","postCompletedDisableTableAction(ObserverContext, TableName)","preDeleteNamespace(ObserverContext, String)","preTruncateTableAction(ObserverContext, TableName)","preUnassign(ObserverContext, RegionInfo, boolean)","preRecommissionRegionServer(ObserverContext, ServerName, List)","postUpdateReplicationPeerConfig(ObserverContext, String, ReplicationPeerConfig)","postMergeRegionsCommitAction(ObserverContext, RegionInfo[], RegionInfo)","preEnableTableAction(ObserverContext, TableName)","postGetTableNames(ObserverContext, List, String)","preSplitRegionAfterMETAAction(ObserverContext)","postMove(ObserverContext, RegionInfo, ServerName, ServerName)","postCompletedSplitRegionAction(ObserverContext, RegionInfo, RegionInfo)","preDeleteSnapshot(ObserverContext, SnapshotDescription)","postGetClusterMetrics(ObserverContext, ClusterMetrics)","preTruncateTable(ObserverContext, TableName)","postGetNamespaceDescriptor(ObserverContext, NamespaceDescriptor)","preMergeRegions(ObserverContext, RegionInfo[])","preSplitRegionBeforeMETAAction(ObserverContext, byte[], List)","postDisableReplicationPeer(ObserverContext, String)","preStopMaster(ObserverContext)","preMove(ObserverContext, RegionInfo, ServerName, ServerName)","postStartMaster(ObserverContext)","postCloneSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","preAddRSGroup(ObserverContext, String)","preSplitRegion(ObserverContext, TableName, byte[])","postGetProcedures(ObserverContext)","preMoveServersAndTables(ObserverContext, Set, Set, String)","preRemoveServers(ObserverContext, Set)","preBalanceSwitch(ObserverContext, boolean)","postEnableTable(ObserverContext, TableName)","postCompletedCreateTableAction(ObserverContext, TableDescriptor, RegionInfo[])","preEnableReplicationPeer(ObserverContext, String)","preModifyTable(ObserverContext, TableName, TableDescriptor, TableDescriptor)","postRequestLock(ObserverContext, String, TableName, RegionInfo[], String)","postRestoreSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","postLockHeartbeat(ObserverContext)","postCreateNamespace(ObserverContext, NamespaceDescriptor)","preRegionOffline(ObserverContext, RegionInfo)"],"org.apache.hadoop.hbase.coprocessor.CoprocessorHost":["checkAndLoadInstance(Class, int, Configuration)","load(Path, String, int, Configuration, String[])","load(Class, int, Configuration)","findCoprocessor(String)","findCoprocessors(Class)","handleCoprocessorThrowable(E, Throwable)","getLoadedCoprocessors()","abortServer(E, Throwable)","loadSystemCoprocessors(Configuration, String)","load(Path, String, int, Configuration)","shutdown(E)","abortServer(String, Throwable)","findCoprocessor(Class)","getCoprocessors()","execOperationWithResult(ObserverOperationWithResult)","getExternalClassLoaders()","execOperation(ObserverOperation)","execShutdown(ObserverOperation)","findCoprocessorEnvironment(String)"],"org.apache.hadoop.hbase.client.AsyncRpcRetryingCaller":["elapsedMs()","getTableName()","resetCallTimeout()","completeExceptionally()","onError(Throwable, Supplier, Consumer)","call()","remainingTimeNs()","tryScheduleRetry(Throwable)"],"org.apache.hadoop.hbase.master.procedure.TruncateTableProcedure":["toStringClassDetails(StringBuilder)","recreateRegionInfo(List)","preTruncate(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, TruncateTableState)","getState(int)","getTableOperationType()","completionCleanup(MasterProcedureEnv)","prepareTruncate(MasterProcedureEnv)","isRollbackSupported(TruncateTableState)","getInitialState()","getTableName()","postTruncate(MasterProcedureEnv)","getFirstRegionInfo()","deserializeStateData(ProcedureStateSerializer)","executeFromState(MasterProcedureEnv, TruncateTableState)","serializeStateData(ProcedureStateSerializer)","getStateId(TruncateTableState)"],"org.apache.hadoop.hbase.util.RegionMover":["loadRegions(List)","stripMaster(List)","readExcludes(String)","isSameServer(RegionInfo, ServerName)","getServerNameForRegion(RegionInfo)","readRegionsFromFile(String)","unload()","stripServer(List, String, int)","doWork()","getTargetServer()","writeFile(String, List)","waitTaskToFinish(ExecutorService, Future, String)","deleteFile(String)","load()","waitMoveTasksToFinish(ExecutorService, List, long)","unloadRegions(ServerName, List, List)","addOptions()","stripExcludes(List)","isSuccessfulScan(RegionInfo)","processOptions(CommandLine)","main(String[])","close()"],"org.apache.hadoop.hbase.client.Result":["binarySearch(Cell[], byte[], int, int, byte[], int, int)","createCursorResult(Cursor)","getExists()","create(Cell[])","getColumnLatestCell(byte[], byte[])","current()","containsColumn(byte[], int, int, byte[], int, int)","isStale()","getColumnCells(byte[], byte[])","checkReadonly()","create(List)","containsNonEmptyColumn(byte[], int, int, byte[], int, int)","cellScanner()","create(Cell[], Boolean, boolean)","getStats()","mayHaveMoreCellsInRow()","copyFrom(Result)","loadValue(byte[], int, int, byte[], int, int, ByteBuffer)","getColumnLatestCell(byte[], int, int, byte[], int, int)","isEmpty()","toString()","setExists(Boolean)","containsEmptyColumn(byte[], int, int, byte[], int, int)","listCells()","isCursor()","create(Cell[], Boolean, boolean, boolean)","getValueAsByteBuffer(byte[], byte[])","create(List, Boolean, boolean, boolean)","getRow()","createCompleteResult(Iterable)","getValue(byte[], byte[])","compareResults(Result, Result)","containsColumn(byte[], byte[])","advance()","rawCells()","getTotalSizeOfCells(Result)","getFamilyMap(byte[])","containsEmptyColumn(byte[], byte[])","isPartial()","create(List, Boolean)","notNullBytes(byte[])","getNoVersionMap()","setStatistics(RegionLoadStats)","create(List, Boolean, boolean)","getMap()","binarySearch(Cell[], byte[], byte[])","containsNonEmptyColumn(byte[], byte[])","getValueAsByteBuffer(byte[], int, int, byte[], int, int)","loadValue(byte[], byte[], ByteBuffer)","getCursor()","value()","size()"],"org.apache.hadoop.hbase.security.token.AuthenticationTokenSecretManager":["getCurrentKey()","createPassword(AuthenticationTokenIdentifier)","getLastKeyUpdate()","start()","isCurrentKeyRolled()","rollCurrentKey()","createIdentifier()","createSecretKey(byte[])","isMaster()","generateToken(String)","removeKey(Integer)","getName()","getKey(int)","stop()","addKey(AuthenticationKey)","retrievePassword(AuthenticationTokenIdentifier)","removeExpiredKeys()"],"org.apache.hadoop.hbase.regionserver.compactions.DateTieredCompactionPolicy":["shouldPerformMajorCompaction(Collection)","generateCompactionRequest(ArrayList, CompactionWindow, boolean, boolean, int)","selectMajorCompaction(ArrayList)","selectMinorCompaction(ArrayList, boolean, boolean)","getOldestToCompact(long, long)","getIncomingWindow(long)","createCompactionRequest(ArrayList, boolean, boolean, boolean)","needsCompaction(Collection, List)","getCompactBoundariesForMajor(Collection, long)","getCompactionBoundariesForMinor(CompactionWindow, boolean)"],"org.apache.hadoop.hbase.master.ServerManager":["getMinToStart()","getAverageLoad()","checkAndRecordNewServer(ServerName, ServerMetrics)","getVersionNumber(ServerName)","removeServerFromDrainList(ServerName)","clearDeadServersWithSameHostNameAndPortOfOnlineServer()","isRegionInServerManagerStates(RegionInfo)","getDrainingServersList()","recordNewServerWithLock(ServerName, ServerMetrics)","isClusterShutdown()","moveFromOnlineToDeadServers(ServerName)","updateLastFlushedSequenceIds(ServerName, ServerMetrics)","shutdownCluster()","letRegionServersShutdown()","waitForRegionServers(MonitoredTask)","getOnlineServers()","removeRegion(RegionInfo)","createDestinationServersList(List)","getOnlineServersList()","findDeadServersAndProcess(Set, Set)","getVersion(ServerName)","isServerDead(ServerName)","getLoad(ServerName)","expire(ServerName)","unregisterListener(ServerListener)","isServerOnline(ServerName)","checkClockSkew(ServerName, long)","countOfRegionServers()","removeRegions(List)","createDestinationServersList()","expireServer(ServerName)","checkIsDead(ServerName, String)","stop()","newRpcController()","getLastFlushedSequenceId(byte[])","sendRegionWarmup(ServerName, RegionInfo)","getOnlineServersListWithPredicator(List, Predicate)","getStrForMax(int)","addServerToDrainList(ServerName)","closeRegionSilentlyAndWait(ClusterConnection, ServerName, RegionInfo, long)","regionServerReport(ServerName, ServerMetrics)","getRsAdmin(ServerName)","regionServerStartup(RegionServerStartupRequest, int, String, InetAddress)","registerListener(ServerListener)","areDeadServersInProgress()","getRegionServersInZK(ZKWatcher)","findServerWithSameHostnamePortWithLock(ServerName)","getInfoPort(ServerName)","getDeadServers()"],"org.apache.hadoop.hbase.master.replication.RefreshPeerProcedure":["getPeerId()","abort(MasterProcedureEnv)","waitInitialized(MasterProcedureEnv)","toPeerOperationType(PeerModificationType)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","complete(MasterProcedureEnv, Throwable)","getPeerOperationType()","remoteCallBuild(MasterProcedureEnv, ServerName)","rollback(MasterProcedureEnv)","toPeerModificationType(PeerOperationType)"],"org.apache.hadoop.hbase.regionserver.StoreFlusher":["createScanner(List, long, FlushLifeCycleTracker)","finalizeWriter(StoreFileWriter, long, MonitoredTask)","performFlush(InternalScanner, CellSink, long, ThroughputController)"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketAllocator":["getUsedSize()","getLeastFilledBuckets(Set, int)","grabGlobalCompletelyFreeBucket()","toString()","allocateBlock(int)","getFreeSize()","freeBlock(long)","getIndexStatistics()","getIndexStatistics(IndexStatistics)","freeBlock(long[])","sizeIndexOfAllocation(long)","roundUpToBucketSizeInfo(int)","getTotalSize()","getBucketIndex(long)","getBuckets()","logStatistics()","sizeOfAllocation(long)"],"org.apache.hadoop.hbase.regionserver.MetricsRegionServerWrapperImpl":["getL2CacheHitRatio()","getTotalRowActionRequestCount()","getMaxStoreFileAge()","getL2CacheMissRatio()","getPercentFileLocal()","getMobScanCellsSize()","getMobFileCacheEvictedCount()","getBlockCacheCount()","getHedgedReadOps()","getMetaMissCount()","getIntermediateIndexHitCount()","getCellsCountCompactedToMob()","getMemStoreLimit()","getZookeeperQuorum()","getStoreFileIndexSize()","getReadRequestsCount()","getBloomChunkMissCount()","getTotalStaticBloomSize()","getFlushQueueSize()","getGeneralBloomMetaMissCount()","getWriteRequestsCount()","getBlockedRequestsCount()","getNumWALFiles()","getCellsSizeCompactedFromMob()","getL1CacheHitRatio()","getRpcGetRequestsCount()","getDataInMemoryWithoutWAL()","getMobFileCacheAccessCount()","getMobScanCellsCount()","getRootIndexHitCount()","getBlockCacheHitPercent()","getL1CacheMissRatio()","forceRecompute()","getMobFileCacheCount()","getSplitQueueSize()","getNumWALSlowAppend()","getServerName()","getSmallCompactionQueueSize()","getCheckAndMutateChecksPassed()","getCompactedCellsCount()","getMobFileCacheHitPercent()","getDataHitCount()","getFilteredReadRequestsCount()","getFlushedCellsCount()","getBlockCachePrimaryEvictedCount()","getNumReferenceFiles()","getMinStoreFileAge()","getBlockCachePrimaryHitCount()","getBlockCacheFailedInsertions()","getNumStoreFiles()","initBlockCache()","getBlockCacheHitCachingPercent()","getRootIndexMissCount()","getBlockCacheFreeSize()","getL2CacheHitCount()","getBloomChunkHitCount()","getCellsSizeCompactedToMob()","getStartCode()","getAvgStoreFileAge()","getFileInfoMissCount()","getClusterId()","getBlockCacheMissCount()","getMobFileCacheMissCount()","getUpdatesBlockedTime()","getRpcScanRequestsCount()","getBlockCacheEvictedCount()","initMobFileCache()","getFlushedCellsSize()","getCoprocessors()","getDataMissCount()","getTrailerHitCount()","getPercentFileLocalSecondaryRegions()","getNumStores()","getCompactedCellsSize()","getLeafIndexMissCount()","getAverageRegionSize()","getLargeCompactionQueueSize()","getBlockCacheHitCount()","getMajorCompactedCellsCount()","getTrailerMissCount()","getCellsCountCompactedFromMob()","getNumOnlineRegions()","getCheckAndMutateChecksFailed()","getTotalStaticIndexSize()","getL2CacheMissCount()","getDeleteFamilyBloomMissCount()","getLeafIndexHitCount()","getDeleteFamilyBloomHitCount()","getRequestsPerSecond()","getTotalRequestCount()","getCompactionQueueSize()","getL1CacheMissCount()","getNumMutationsWithoutWAL()","getMajorCompactedCellsSize()","getBlockCachePrimaryMissCount()","getL1CacheHitCount()","getFileInfoHitCount()","getWALFileSize()","getMobFlushedCellsSize()","getMemStoreSize()","getStoreFileSize()","getMobFlushCount()","getBlockCacheSize()","getRpcMultiRequestsCount()","getMetaHitCount()","getHedgedReadWins()","getGeneralBloomMetaHitCount()","getRpcMutateRequestsCount()","getMobFlushedCellsCount()","getIntermediateIndexMissCount()"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.RegionCloseOperation":["getDestinationServer()","setClosed(boolean)","buildCloseRegionRequest(ServerName)","isClosed()"],"org.apache.hadoop.hbase.snapshot.SnapshotInfo":["printUsage()","loadSnapshotInfo(String)","printInfo()","doWork()","getSnapshotFilesMap(Configuration, SnapshotDescription, ExecutorService, ConcurrentHashMap, AtomicLong, AtomicLong, AtomicLong)","getSnapshotStats(Configuration, SnapshotDescription)","getSnapshotList(Configuration)","addOptions()","printFiles(boolean, boolean)","printSchema()","processOptions(CommandLine)","getSnapshotsFilesMap(Configuration, AtomicLong, AtomicLong, AtomicLong)","main(String[])","fileSizeToString(long)","getSnapshotStats(Configuration, SnapshotProtos.SnapshotDescription, Map)"],"org.apache.hadoop.hbase.master.MasterAnnotationReadingPriorityFunction":["getPriority(RPCProtos.RequestHeader, Message, User)"],"org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil":["mergeFrom(Message.Builder, InputStream)","toCacheEvictionStats(HBaseProtos.CacheEvictionStats)","toMutationNoData(MutationType, Mutation)","toRegionLocation(HRegionLocation)","mergeFrom(Message.Builder, CodedInputStream, int)","toMutationNoData(MutationType, Mutation, MutationProto.Builder)","toDelta(Function, ConsumerWithException, MutationProto, CellScanner)","toGet(MutationProto, CellScanner)","toPut(MutationProto)","createSnapshotType(SnapshotProtos.SnapshotDescription.Type)","toConsistency(Consistency)","toCellVisibility(byte[])","toRegionInfo(HBaseProtos.RegionInfo)","isPBMagicPrefix(byte[], int, int)","getStoreFiles(AdminService.BlockingInterface, byte[], byte[])","toComparator(ComparatorProtos.Comparator)","toReplicationLoadSource(ReplicationLoadSource)","getOnlineRegions(RpcController, AdminService.BlockingInterface)","toColumnFamilySchema(ColumnFamilyDescriptor)","toDelimitedByteArray(Message)","toViolationPolicy(QuotaProtos.SpaceViolationPolicy)","getMutationBuilderAndSetCommonFields(MutationType, Mutation, MutationProto.Builder)","toCellVisibility(CellVisibility)","toDelete(MutationProto, CellScanner)","toTableName(HBaseProtos.TableName)","toAuthorizations(ClientProtos.Authorizations)","toRegionInfo(org.apache.hadoop.hbase.client.RegionInfo)","toReplicationLoadSink(ReplicationLoadSink)","toCursor(Cursor)","toProtoQuotaScope(QuotaType)","toProtoViolationPolicy(SpaceViolationPolicy)","toMutation(MutationType, Mutation)","toDelete(MutationProto)","mergeFrom(Message.Builder, byte[])","closeRegion(RpcController, AdminService.BlockingInterface, ServerName, byte[])","toFilter(Filter)","toTableDescriptorList(ListTableDescriptorsByNamespaceResponse)","toTableNameList(List)","createCompactionState(CompactionState)","toText(Message)","toCompactionDescriptor(org.apache.hadoop.hbase.client.RegionInfo, byte[], byte[], List, List, Path)","toResult(ClientProtos.Result, CellScanner)","fromDeleteType(DeleteType)","toBytes(ByteString)","toResult(ClientProtos.Result)","toException(NameBytesPair)","getStoreFiles(RpcController, AdminService.BlockingInterface, byte[], byte[])","mergeFrom(Message.Builder, ByteString)","parseServerNameFrom(byte[])","toMutation(MutationType, Mutation, long)","toReplicationLoadSource(ClusterStatusProtos.ReplicationLoadSource)","getShortTextFormat(Message)","toThrottleType(QuotaProtos.ThrottleType)","mergeFrom(Message.Builder, InputStream, int)","toScanMetrics(ScanMetrics, boolean)","toPut(MutationProto, CellScanner)","wrap(ByteBuffer, int, int)","toIncrement(MutationProto, CellScanner)","getRegionLoadInfo(GetRegionLoadResponse)","createRegionLoadStats(ClientProtos.RegionLoadStats)","toTableSchema(TableDescriptor)","toMutation(MutationProto)","toProtoNamespaceDescriptor(NamespaceDescriptor)","toAuthorizations(byte[])","toResult(boolean, boolean)","getVersionInfo()","toComparator(ByteArrayComparable)","getSplitKeysArray(CreateTableRequest)","toSecurityCapabilityList(List)","createSnapshotDesc(SnapshotProtos.SnapshotDescription)","openRegion(RpcController, AdminService.BlockingInterface, ServerName, org.apache.hadoop.hbase.client.RegionInfo)","buildCloseRegionRequest(ServerName, byte[], ServerName)","toResultNoData(Result)","toMutation(MutationType, Mutation, MutationProto.Builder)","getOnlineRegions(AdminService.BlockingInterface)","toRegionEventDescriptor(EventType, org.apache.hadoop.hbase.client.RegionInfo, long, ServerName, Map)","createHBaseProtosSnapshotDesc(SnapshotDescription)","toCell(Cell)","toProtoTableName(TableName)","getTableNameArray(List)","createProtosSnapShotDescType(String)","toAppend(MutationProto, CellScanner)","toGet(Get)","toTimeRange(HBaseProtos.TimeRange)","toNamespaceDescriptorList(ListNamespaceDescriptorsResponse)","toMutationNoData(MutationType, Mutation, MutationProto.Builder, long)","toIOException(ServiceException)","buildProcedureDescription(String, String, Map)","lengthOfPBMagic()","getTotalRequestsCount(RegionLoad)","toServerNameList(List)","call(Callable)","toReadType(Scan.ReadType)","toCellVisibility(ClientProtos.CellVisibility)","toRegionLocation(HBaseProtos.RegionLocation)","toQuotaScope(QuotaProtos.QuotaType)","toTimeUnit(HBaseProtos.TimeUnit)","toLockJson(List)","toCursor(ClientProtos.Cursor)","expectPBMagicPrefix(byte[])","getStringForByteString(ByteString)","toTableRegionStatesCount(RegionStatesCount)","toServerName(ServerName)","toScanMetrics(byte[])","toServerName(HBaseProtos.ServerName)","toProtoTimeUnit(TimeUnit)","prependPBMagic(byte[])","toConsistency(ClientProtos.Consistency)","toAuthorizations(Authorizations)","toGet(ClientProtos.Get)","toReplicationLoadSink(ClusterStatusProtos.ReplicationLoadSink)","toSnapshotDescriptionList(GetCompletedSnapshotsResponse, Pattern)","handleRemoteException(Exception)","getRegionEncodedName(RegionSpecifier)","getRemoteException(ServiceException)","makeIOExceptionOfException(Exception)","isClassLoaderLoaded()","toScan(Scan)","toShortString(MutationProto)","toProtoThrottleType(ThrottleType)","toBulkLoadDescriptor(TableName, ByteString, Map, Map, long)","getRegionInfo(RpcController, AdminService.BlockingInterface, byte[])","getRegionInfos(GetOnlineRegionResponse)","toCompactionDescriptor(org.apache.hadoop.hbase.client.RegionInfo, byte[], List, List, Path)","toTableRegionStatesCount(ClusterStatusProtos.RegionStatesCount)","buildGetStoreFileRequest(byte[], byte[])","toQuotaScope(QuotaProtos.QuotaScope)","toTimeRange(TimeRange)","newServiceStub(Class, RpcChannel)","toCursor(Cell)","toScan(ClientProtos.Scan)","toFlushDescriptor(FlushAction, org.apache.hadoop.hbase.client.RegionInfo, long, Map)","getServerInfo(RpcController, AdminService.BlockingInterface)","toNamespaceDescriptor(HBaseProtos.NamespaceDescriptor)","toProtoSpaceQuota(long, SpaceViolationPolicy)","createCompactionState(GetRegionInfoResponse.CompactionState)","toDurability(ClientProtos.MutationProto.Durability)","toResult(Result)","warmupRegion(RpcController, AdminService.BlockingInterface, org.apache.hadoop.hbase.client.RegionInfo)","toOptionalTimestamp(MajorCompactionTimestampResponse)","isPBMagicPrefix(byte[])","toFilter(FilterProtos.Filter)","toBulkLoadDescriptor(TableName, ByteString, Map, Map, long, List, boolean)","toDurability(Durability)","toProtoQuotaScope(QuotaScope)","toDeleteType(KeyValue.Type)","toColumnFamilyDescriptor(ColumnFamilySchema)","createProtosSnapShotDescType(SnapshotType)","toByteArrayComparable(byte[])","toReadType(ClientProtos.Scan.ReadType)","toTableDescriptorList(GetTableDescriptorsResponse)","toRegionEventDescriptor(EventType, byte[], byte[], byte[], long, ServerName, Map)","mergeFrom(Message.Builder, byte[], int, int)","toCell(ExtendedCellBuilder, CellProtos.Cell)","toMutation(MutationType, Mutation, MutationProto.Builder, long)","toCacheEvictionStats(CacheEvictionStats)","toProcedureJson(List)","toTimedQuota(long, TimeUnit, QuotaScope)","mergeDelimitedFrom(Message.Builder, InputStream)","toTableDescriptor(TableSchema)","buildCloseRegionRequest(ServerName, byte[])"],"org.apache.hadoop.hbase.io.hfile.HFileReaderImpl.HFileScannerImpl":["updateCurrBlockRef(HFileBlock)","isSeeked()","next()","loadBlockAndSeekToKey(HFileBlock, Cell, boolean, Cell, boolean)","shipped()","readMvccVersion(int)","returnBlockToCache(HFileBlock)","getEffectiveDataBlockEncoding()","getKeyString()","getKVBufSize()","getCell()","isNextBlock()","compareKey(CellComparator, Cell)","getCurCellSerializedSize()","processFirstDataBlock()","positionThisBlockBuffer()","updateCurrentBlock(HFileBlock)","getValueString()","getReader()","getNextIndexedKey()","assertSeeked()","seekBefore(Cell)","getKey()","seekTo(Cell, boolean)","blockSeek(Cell, boolean)","checkKeyValueLen()","close()","seekTo(Cell)","toString()","positionForNextBlock()","getValue()","checkTagsLen()","reseekTo(Cell)","_readMvccVersion(int)","checkLen(int)","reset()","getFirstKeyCellInBlock(HFileBlock)","returnBlocks(boolean)","seekTo()","checkKeyLen(int)","readNextDataBlock()","readAndUpdateNewBlock(long)","setNonSeekedState()","readKeyValueLen()","_next()"],"org.apache.hadoop.hbase.regionserver.CompactingMemStore":["pushActiveToPipeline(MutableSegment)","isMemStoreFlushingInMemory()","getNextRow(Cell)","isSloppy()","getImmutableSegments()","heapSize()","setIndexType(IndexType)","hasImmutableSegments()","preFlushSeqIDEstimation()","getRegionServices()","getInmemoryFlushSize()","getStore()","getScanners(long)","getIndexType()","initInmemoryFlushSize(Configuration)","getPool()","swapCompactedSegments(VersionedSegmentsList, ImmutableSegment, boolean)","snapshot()","pushPipelineToSnapshot()","startReplayingFromWAL()","updateLowestUnflushedSequenceIdInWAL(boolean)","pushTailToSnapshot()","createList(int)","setCompositeSnapshot(boolean)","keySize()","checkActiveSize()","getSmallestReadPoint()","getFamilyNameInBytes()","getSegments()","getFamilyName()","getLastSegment()","pushToSnapshot(List)","debug()","shouldFlushInMemory()","stopReplayingFromWAL()","flattenOneSegment(long, MemStoreCompactionStrategy.Action)","flushInMemory()","createMemStoreCompactor(MemoryCompactionPolicy)","getFlushableSize()","stopCompaction()","size()"],"org.apache.hadoop.hbase.master.cleaner.HFileLinkCleaner":["isFileDeletable(FileStatus)","setConf(Configuration)"],"org.apache.hadoop.hbase.client.AsyncBufferedMutatorImpl":["internalFlush()","getWriteBufferSize()","getName()","getPeriodicalFlushTimeout(TimeUnit)","mutate(List)","flush()","getConfiguration()","close()"],"org.apache.hadoop.hbase.client.AsyncAdmin":["snapshot(String, TableName, SnapshotType)","compact(TableName, byte[])","snapshot(String, TableName)","getCompactionState(TableName)","listTableNames()","majorCompact(TableName, byte[])","addReplicationPeer(String, ReplicationPeerConfig)","balance()","getRegionServers()","getMasterCoprocessorNames()","getMasterInfoPort()","listDeadServers()","listTableDescriptors()","majorCompact(TableName)","compact(TableName)","getBackupMasters()","getMaster()"],"org.apache.hadoop.hbase.security.token.TokenProvider":["getServices()","whoAmI(RpcController, AuthenticationProtos.WhoAmIRequest, RpcCallback)","isAllowedDelegationTokenOp(UserGroupInformation)","getAuthenticationToken(RpcController, AuthenticationProtos.GetAuthenticationTokenRequest, RpcCallback)","stop(CoprocessorEnvironment)","start(CoprocessorEnvironment)"],"org.apache.hadoop.hbase.quotas.SnapshotQuotaObserverChore":["computeSnapshotSizes(Multimap)","removeExistingSnapshotSizes(List)","getTimeUnit(Configuration)","chore()","getNotifierForTable(TableName)","getSnapshotsToComputeSize()","pruneTableSnapshots(Multimap)","removeExistingTableSnapshotSizes(Multimap)","getSnapshotsFromTables(Admin, Set)","getPeriod(Configuration)","getInitialDelay(Configuration)","removeExistingNamespaceSnapshotSizes(Set)","_chore()","pruneNamespaceSnapshots(Multimap)","persistSnapshotSizesForNamespaces(Map)"],"org.apache.hadoop.hbase.master.procedure.AbstractStateMachineTableProcedure":["toStringClassDetails(StringBuilder)","getUser()","waitInitialized(MasterProcedureEnv)","checkOnline(MasterProcedureEnv, RegionInfo)","checkTableModifiable(MasterProcedureEnv)","setUser(User)","getWALRegionDir(MasterProcedureEnv, RegionInfo)","releaseSyncLatch()","preflightChecks(MasterProcedureEnv, Boolean)","acquireLock(MasterProcedureEnv)","releaseLock(MasterProcedureEnv)"],"org.apache.hadoop.hbase.ServerMetricsBuilder.ServerMetricsImpl":["getReplicationLoadSink()","toString()","getVersion()","getReplicationLoadSourceList()","getVersionNumber()","getInfoServerPort()","getCoprocessorNames()","getUsedHeapSize()","getRequestCountPerSecond()","getLastReportTimestamp()","getRequestCount()","getRegionMetrics()","getReportTimestamp()","getServerName()","getMaxHeapSize()"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationSourceManager":["cleanOldLogs(String, boolean, String, boolean)","join()","getAllQueues()","postLogRoll(Path)","removeSource(ReplicationSourceInterface)","logPositionAndCleanOldLogs(String, boolean, WALEntryBatch)","activeFailoverTaskCount()","abortWhenFail(ReplicationQueueOperation)","getOldSources()","getStats()","abortAndThrowIOExceptionWhenFail(ReplicationQueueOperation)","interruptOrAbortWhenFail(ReplicationQueueOperation)","cleanOldLogs(NavigableSet, String, boolean, String)","transferQueues(ServerName)","regionServerRemoved(String)","getSizeOfLatestPath()","refreshSources(String)","adoptAbandonedQueues()","removePeer(String)","getTotalBufferUsed()","throwIOExceptionWhenFail(ReplicationQueueOperation)","cleanUpHFileRefs(String, List)","getWALs()","createSource(String, ReplicationPeer)","getOldLogDir()","getWalsByIdRecoveredQueues()","removeRecoveredSource(ReplicationSourceInterface)","getSources()","addHFileRefs(TableName, byte[], List)","addPeer(String)","getSource(String)","getReplicationPeers()","deleteQueue(String)","preLogRoll(Path)","getFs()","init()","addSource(String)","getLogDir()"],"org.apache.hadoop.hbase.monitoring.MonitoredTaskImpl":["pause(String)","getDescription()","toMap()","getStatusTime()","getCompletionTimestamp()","setWarnTime(long)","enableStatusJournal(boolean)","setState(State)","resume(String)","getStatus()","prettyPrintJournal()","disableStatusJournal()","getState()","abort(String)","toString()","markComplete(String)","getStartTime()","setStatus(String)","expireNow()","getStatusJournal()","cleanup()","setDescription(String)","clone()","getWarnTime()","toJSON()","getStateTime()"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationSource":["sleepForRetries(String, int)","initializeWALEntryFilter(UUID)","terminate(String, Exception, boolean, boolean)","getServerWALsBelongTo()","decorateConf()","uncaughtException(Thread, Throwable)","initAndStartReplicationEndpoint(ReplicationEndpoint)","createNewWALReader(String, PriorityBlockingQueue, long)","getReplicationEndpoint()","logPeerId()","getFileSize(Path)","getStats()","isPeerEnabled()","getWALFileLengthProvider()","startup()","createReplicationEndpoint()","getCurrentBandwidth()","init(Configuration, FileSystem, ReplicationSourceManager, ReplicationQueueStorage, ReplicationPeer, Server, String, UUID, WALFileLengthProvider, MetricsSource)","getPeerId()","terminate(String, Exception, boolean)","getCurrentPath()","enqueueLog(Path)","getSourceManager()","createNewShipper(String, PriorityBlockingQueue)","getWalGroupStatus()","tryStartNewShipper(String, PriorityBlockingQueue)","checkBandwidthChangeAndResetThrottler()","getQueueId()","terminate(String, Exception)","getSourceMetrics()","getQueueStorage()","addHFileRefs(TableName, byte[], List)","initialize()","postShipEdits(List, int)","getServer()","tryThrottle(int)","terminate(String)","isSourceActive()"],"org.apache.hadoop.hbase.io.hfile.HFilePrettyPrinter":["processFile(Path, boolean)","evictMobFilesIfNecessary(Set, int)","mobFileExists(FileSystem, TableName, String, String, Set, Set)","setPrintStreams(PrintStream, PrintStream)","run(String[])","scanKeysValues(Path, KeyValueStatsCollector, HFileScanner, byte[])","parseOptions(String[])","init()","printMeta(HFile.Reader, Map)","asSeparateLines(String)","main(String[])"],"org.apache.hadoop.hbase.tool.CanaryTool.RegionServerMonitor":["run()","filterRegionServerByName()","doFilterRegionServerByName(Map)","getSink()","checkNoTableNames()","getAllRegionServerByName()","monitorRegionServers(Map, RegionServerStdOutSink)"],"org.apache.hadoop.hbase.wal.DisabledWALProvider.DisabledWAL":["append(RegionInfo, WALKeyImpl, WALEdit, boolean)","completeCacheFlush(byte[])","sync()","toString()","shutdown()","appendData(RegionInfo, WALKeyImpl, WALEdit)","sync(long)","startCacheFlush(byte[], Set)","unregisterWALActionsListener(WALActionsListener)","abortCacheFlush(byte[])","rollWriter(boolean)","getCoprocessorHost()","startCacheFlush(byte[], Map)","updateStore(byte[], byte[], Long, boolean)","getLogFileSizeIfBeingWritten(Path)","registerWALActionsListener(WALActionsListener)","getEarliestMemStoreSeqNum(byte[])","rollWriter()","getEarliestMemStoreSeqNum(byte[], byte[])","close()","appendMarker(RegionInfo, WALKeyImpl, WALEdit)"],"org.apache.hadoop.hbase.regionserver.CellChunkImmutableSegment":["allocIndexChunks(int)","indexEntryOffHeapSize(boolean)","reinitializeCellSet(int, KeyValueScanner, CellSet, MemStoreCompactionStrategy.Action)","indexEntrySize()","initializeCellSet(int, MemStoreSegmentsIterator, MemStoreCompactionStrategy.Action)","canBeFlattened()","useIndexChunks(int)","copyCellIntoMSLAB(Cell)","calculateNumberOfChunks(int, int)","calcNumOfCellsInChunk(int)","createCellReference(ByteBufferKeyValue, ByteBuffer, int)","indexEntryOnHeapSize(boolean)"],"org.apache.hadoop.hbase.backup.example.LongTermArchivingHFileCleaner":["isFileDeletable(FileStatus)","stop(String)","setConf(Configuration)"],"org.apache.hadoop.hbase.regionserver.HMobStore":["updateMobFlushedCellsSize(long)","readCell(List, String, Cell, boolean, long, boolean)","updateMobFlushedCellsCount(long)","getConfiguration()","getCellsSizeCompactedFromMob()","updateMobFlushCount()","getMobScanCellsCount()","updateMobScanCellsCount(long)","getMobScanCellsSize()","updateCellsSizeCompactedFromMob(long)","createDelFileWriterInTmp(Date, long, Compression.Algorithm, byte[])","getMobFlushedCellsSize()","createWriterInTmp(Date, long, Compression.Algorithm, byte[], boolean)","createStoreEngine(HStore, Configuration, CellComparator)","createWriterInTmp(String, Path, long, Compression.Algorithm, byte[], boolean)","getMobFlushCount()","createScanner(Scan, ScanInfo, NavigableSet, long)","getPath()","updateCellsCountCompactedFromMob(long)","resolve(Cell, boolean)","validateMobFile(Path)","createCacheConf(ColumnFamilyDescriptor)","getCellsCountCompactedToMob()","createWriterInTmp(MobFileName, Path, long, Compression.Algorithm, boolean)","commitFile(Path, Path)","getCellsCountCompactedFromMob()","updateCellsSizeCompactedToMob(long)","getMobFlushedCellsCount()","resolve(Cell, boolean, long, boolean)","getTempDir()","getCellsSizeCompactedToMob()","updateMobScanCellsSize(long)","getRefCellTags()","updateCellsCountCompactedToMob(long)"],"org.apache.hadoop.hbase.io.hfile.HFileBlockIndex.BlockIndexReader":["binarySearchNonRootIndex(Cell, ByteBuff, CellComparator)","readRootIndex(HFileBlock, int)","getRootBlockCount()","rootBlockContainingKey(byte[], int, int)","readMultiLevelIndexRoot(HFileBlock, int)","heapSize()","seekToDataBlock(Cell, HFileBlock, boolean, boolean, boolean, DataBlockEncoding)","readRootIndex(DataInput, int)","ensureNonEmpty()","getNonRootIndexedKey(ByteBuff, int)","getRootBlockDataSize(int)","locateNonRootIndexEntry(ByteBuff, Cell, CellComparator)","getRootBlockOffset(int)"],"org.apache.hadoop.hbase.regionserver.LogRoller":["run()","scheduleFlush(String)","checkLowReplication(long)","abort(String, Throwable)","addWAL(WAL)","walRollFinished()","requestRollAll()","close()"],"org.apache.hadoop.hbase.quotas.QuotaUtil":["fetchNamespaceQuotas(Connection, List)","fetchGlobalQuotas(String, Connection, List, KeyFromRow)","deleteTableQuota(Connection, TableName)","calculateResultSize(List)","addTableQuota(Connection, TableName, Quotas)","doPut(Connection, Put)","deleteQuotas(Connection, byte[], byte[])","deleteUserQuota(Connection, String, TableName)","calculateResultSize(Result)","isQuotaEnabled(Configuration)","doDelete(Connection, Delete)","addNamespaceQuota(Connection, String, Quotas)","fetchUserQuotas(Connection, List)","disableTableIfNotDisabled(Connection, TableName)","deleteNamespaceQuota(Connection, String)","fetchTableQuotas(Connection, List)","calculateMutationSize(Mutation)","deleteUserQuota(Connection, String)","deleteQuotas(Connection, byte[])","addUserQuota(Connection, String, String, Quotas)","deleteUserQuota(Connection, String, String)","addUserQuota(Connection, String, Quotas)","addUserQuota(Connection, String, TableName, Quotas)","addQuotas(Connection, byte[], byte[], Quotas)","enableTableIfNotEnabled(Connection, TableName)","addQuotas(Connection, byte[], Quotas)"],"org.apache.hadoop.hbase.security.access.AccessControlClient":["isAuthorizationEnabled(Connection)","grant(Connection, TableName, String, byte[], byte[], Permission.Action[])","grant(Connection, String, String, boolean, Permission.Action[])","grant(Connection, String, Permission.Action[])","grant(Connection, TableName, String, byte[], byte[], boolean, Permission.Action[])","getAccessControlServiceStub(Table)","isAccessControllerRunning(Connection)","revoke(Connection, String, Permission.Action[])","isCellAuthorizationEnabled(Connection)","revoke(Connection, TableName, String, byte[], byte[], Permission.Action[])","getUserPermissions(Connection, String)","grant(Connection, String, boolean, Permission.Action[])","revoke(Connection, String, String, Permission.Action[])","grant(Connection, String, String, Permission.Action[])"],"org.apache.hadoop.hbase.ipc.SimpleServerRpcConnection":["read4Bytes()","createCall(int, BlockingService, MethodDescriptor, RequestHeader, Message, CellScanner, long, InetAddress, int, CallCleanup)","setLastContact(long)","channelDataRead(ReadableByteChannel, ByteBuff)","initByteBuffToReadInto(int)","process()","readAndProcess()","readPreamble()","isIdle()","isConnectionOpen()","doRespond(RpcResponse)","incRpcCount()","decRpcCount()","getLastContact()","close()"],"org.apache.hadoop.hbase.util.FSVisitor":["visitRegionStoreFiles(FileSystem, Path, StoreFileVisitor)","visitTableStoreFiles(FileSystem, Path, StoreFileVisitor)"],"org.apache.hadoop.hbase.quotas.MasterQuotaManager":["checkAndUpdateNamespaceRegionQuota(TableName, int)","removeTableFromNamespaceQuota(TableName)","processFileArchivals(FileArchiveNotificationRequest, Connection, Configuration, FileSystem)","start()","isQuotaInitialized()","getRegionCountOfTable(TableName)","setQuota(SetQuotaRequest, SetQuotaOperations)","isInViolationAndPolicyDisable(TableName, QuotaObserverChore)","createQuotaTable()","removeNamespaceQuota(String)","stop()","pruneEntriesOlderThan(long, QuotaObserverChore)","setQuota(SetQuotaRequest)","initializeRegionSizes()","setUserQuota(String, SetQuotaRequest)","setUserQuota(String, String, SetQuotaRequest)","onRegionSplitReverted(RegionInfo)","setNamespaceQuota(String, SetQuotaRequest)","setNamespaceQuota(NamespaceDescriptor)","onRegionSplit(RegionInfo)","getNamespaceQuotaManager()","setTableQuota(TableName, SetQuotaRequest)","onRegionMerged(RegionInfo)","checkNamespaceTableAndRegionQuota(TableName, int)","snapshotRegionSizes()","checkQuotaSupport()","setUserQuota(String, TableName, SetQuotaRequest)","addRegionSize(RegionInfo, long, long)","removeRegionSizesForTable(TableName)"],"org.apache.hadoop.hbase.regionserver.CompactionPipeline":["getSegmentsOffHeapSize(List)","validateSuffixList(LinkedList)","isEmpty()","replaceAtIndex(int, ImmutableSegment)","swap(VersionedSegmentsList, ImmutableSegment, boolean, boolean)","getMinSequenceId()","getSegments()","getVersionedList()","getPipelineSize()","getVersionedTail()","getSegmentsKeySize(List)","flattenOneSegment(long, CompactingMemStore.IndexType, MemStoreCompactionStrategy.Action)","swapSuffix(List, ImmutableSegment, boolean)","getSegmentsHeapSize(List)","getTail()","pushHead(MutableSegment)","getSegmentsCellsCount(List)","getTailSize()","addFirst(ImmutableSegment)","size()"],"org.apache.hadoop.hbase.util.HBaseFsck.WorkItemHdfsDir":["call()"],"org.apache.hadoop.hbase.master.RegionServerTracker":["getServerInfo(String)","refresh()","stop()","start(Set, Set, Set)","nodeChildrenChanged(String)"],"org.apache.hadoop.hbase.master.MetaFixer":["getRegionInfoWithLargestEndKey(RegionInfo, RegionInfo)","getHoleCover(Pair)","fix()","buildRegionInfo(TableName, byte[], byte[])","calculateMerges(int, List)","isOverlap(RegionInfo, Pair)","fixHoles(CatalogJanitor.Report)","fixOverlaps(CatalogJanitor.Report)"],"org.apache.hadoop.hbase.master.procedure.ProcedureSyncWait":["submitProcedure(ProcedureExecutor, Procedure)","waitForProcedureToCompleteIOE(ProcedureExecutor, Procedure, long)","waitForProcedureToComplete(ProcedureExecutor, Procedure, long)","waitFor(MasterProcedureEnv, String, Predicate)","waitRegionInTransition(MasterProcedureEnv, List)","waitFor(MasterProcedureEnv, long, long, String, Predicate)","getMasterQuotaManager(MasterProcedureEnv)","submitAndWaitProcedure(ProcedureExecutor, Procedure)","waitMetaRegions(MasterProcedureEnv)"],"org.apache.hadoop.hbase.client.AsyncRpcRetryingCallerFactory.MasterRequestCallerBuilder":["rpcTimeout(long, TimeUnit)","pause(long, TimeUnit)","call()","maxAttempts(int)","startLogErrorsCnt(int)","operationTimeout(long, TimeUnit)","build()","action(AsyncMasterRequestRpcRetryingCaller.Callable)"],"org.apache.hadoop.hbase.regionserver.SecureBulkLoadManager":["secureBulkLoadHFiles(HRegion, BulkLoadHFileRequest)","prepareBulkLoad(HRegion, PrepareBulkLoadRequest)","setFsCreatedListener(Consumer)","isUserReferenced(UserGroupInformation)","start()","createStagingDir(Path, User, String)","getActiveUser()","cleanupBulkLoad(HRegion, CleanupBulkLoadRequest)","decrementUgiReference(UserGroupInformation)","stop()","incrementUgiReference(UserGroupInformation)","secureBulkLoadHFiles(HRegion, BulkLoadHFileRequest, List)","createStagingDir(Path, User, TableName)"],"org.apache.hadoop.hbase.master.assignment.AssignProcedure":["toStringClassDetails(StringBuilder)","remoteCallFailed(MasterProcedureEnv, RegionStateNode, IOException)","getTableOperationType()","updateTransition(MasterProcedureEnv, RegionStateNode)","getServer(MasterProcedureEnv)","incrementAndCheckMaxAttempts(MasterProcedureEnv, RegionStateNode)","reportTransition(MasterProcedureEnv, RegionStateNode, TransitionCode, long)","remoteCallBuild(MasterProcedureEnv, ServerName)","finishTransition(MasterProcedureEnv, RegionStateNode)","handleFailure(MasterProcedureEnv, RegionStateNode)","isRollbackSupported(RegionTransitionState)","getProcedureMetrics(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","assign(MasterServices, RegionInfo)","assign(MasterServices, RegionStateNode)","startTransition(MasterProcedureEnv, RegionStateNode)"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher":["splitAndResolveOperation(ServerName, Set, RemoteProcedureResolver)","buildOpenRegionRequest(MasterProcedureEnv, ServerName, List)","getUncaughtExceptionHandler()","stop()","abortPendingOperations(ServerName, Set)","serverRemoved(ServerName)","start()","serverAdded(ServerName)","remoteDispatch(ServerName, Set)"],"org.apache.hadoop.hbase.client.AsyncRegionLocatorHelper":["removeRegionLocation(RegionLocations, int)","replaceRegionLocation(RegionLocations, HRegionLocation)","createRegionLocations(HRegionLocation)","isGood(RegionLocations, int)","canUpdateOnError(HRegionLocation, HRegionLocation)","updateCachedLocationOnError(HRegionLocation, Throwable, Function, Consumer, Consumer)"],"org.apache.hadoop.hbase.io.hfile.bucket.FileIOEngine":["getFileNum(long)","isPersistent()","sync()","toString()","write(ByteBuffer, long)","shutdown()","getAbsoluteOffsetInFile(int, long)","read(long, int, CacheableDeserializer)","refreshFileConnection(int, IOException)","closeFileChannels()","write(ByteBuff, long)","accessFile(FileAccessor, ByteBuffer, long)","getFileChannels()"],"org.apache.hadoop.hbase.client.Mutation":["toCellVisibility(ClientProtos.CellVisibility)","getACL()","setReturnResults(boolean)","setTTL(long)","has(byte[], byte[], long, byte[], boolean, boolean)","heapSize()","has(byte[], byte[], long)","toCellVisibility(byte[])","setACL(String, Permission)","getTTL()","cellScanner()","getCellVisibility()","add(Cell)","createPutKeyValue(byte[], byte[], long, byte[], Tag[])","toCellVisibility(CellVisibility)","cellToStringMap(Cell)","getTimestamp()","numFamilies()","checkRow(byte[], int, int)","getClusterIds()","setClusterIds(List)","checkRow(ByteBuffer)","has(byte[], byte[], byte[])","setDurability(Durability)","has(byte[], byte[])","isEmpty()","setACL(Map)","getFamilyCellMap()","has(byte[], byte[], long, byte[])","getFingerprint()","getDurability()","compareTo(Row)","setFamilyCellMap(NavigableMap)","setCellVisibility(CellVisibility)","toMap(int)","isReturnResults()","getTimeStamp()","setTimestamp(long)","checkRow(byte[])","get(byte[], byte[])","createPutKeyValue(byte[], byte[], long, byte[])","getRow()","createPutKeyValue(byte[], ByteBuffer, long, ByteBuffer, Tag[])","extraHeapSize()","getCellList(byte[])","size()"],"org.apache.hadoop.hbase.client.ClusterStatusListener.MulticastListener":["connect(Configuration)","close()"],"org.apache.hadoop.hbase.ipc.NettyRpcClientConfigHelper":["setEventLoopConfig(Configuration, EventLoopGroup, Class)","createEventLoopPerClient(Configuration)","getEventLoopConfig(Configuration)"],"org.apache.hadoop.hbase.master.assignment.GCRegionProcedure":["getStateId(GCRegionState)","getState(int)","getTableOperationType()","executeFromState(MasterProcedureEnv, GCRegionState)","rollbackState(MasterProcedureEnv, GCRegionState)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","getInitialState()"],"org.apache.hadoop.hbase.client.HTableMultiplexer":["put(TableName, Put, int)","put(byte[], List)","getQueue(HRegionLocation)","put(TableName, Put)","getConnection()","put(TableName, List)","getHTableMultiplexerStatus()","close()","put(byte[], Put, int)","put(byte[], Put)"],"org.apache.hadoop.hbase.regionserver.HRegionServer.PeriodicMemStoreFlusher":["chore()"],"org.apache.hadoop.hbase.regionserver.CustomizedScanInfoBuilder":["getTTL()","getMaxVersions()","toString()","setMaxVersions(int)","setTTL(long)","build()","getKeepDeletedCells()","setKeepDeletedCells(KeepDeletedCells)"],"org.apache.hadoop.hbase.io.FSDataInputStreamWrapper":["getStream(boolean)","prepareForBlockReader(boolean)","checksumOk()","unbuffer()","getHfs()","setStreamOptions(FSDataInputStream)","fallbackToFsChecksum(int)","shouldUseHBaseChecksum()","close()"],"org.apache.hadoop.hbase.io.hfile.InclusiveCombinedBlockCache":["evictBlock(BlockCacheKey)","getBlock(BlockCacheKey, boolean, boolean, boolean)","cacheBlock(BlockCacheKey, Cacheable, boolean)"],"org.apache.hadoop.hbase.replication.master.ReplicationHFileCleaner":["getDeletableFiles(Iterable)","isFileDeletable(FileStatus)","initReplicationQueueStorage(Configuration, ZKWatcher)","stop(String)","setConf(Configuration, ZKWatcher)","setConf(Configuration)","isStopped()"],"org.apache.hadoop.hbase.util.FSTableDescriptors":["writeTableDescriptor(FileSystem, TableDescriptor, Path, FileStatus)","createMetaTableDescriptorBuilder(Configuration)","getTableInfoPath(FileSystem, Path, boolean)","readTableDescriptor(FileSystem, FileStatus)","createTableDescriptor(TableDescriptor)","createMetaTableDescriptor(Configuration)","getAll()","getByNamespace(String)","deleteTableDescriptorFiles(FileSystem, Path, int)","createTableDescriptorForTableDirectory(Path, TableDescriptor, boolean)","get(TableName)","getTableInfoPath(Path)","deleteTableDescriptorIfExists(TableName)","getCurrentTableInfoStatus(FileSystem, Path, boolean)","getTableInfoSequenceId(Path)","getTableDir(TableName)","getTableDescriptorFromFs(FileSystem, Path, TableName)","isUsecache()","setCacheOff()","createTableDescriptor(TableDescriptor, boolean)","formatTableInfoSequenceId(int)","getTableInfoPath(TableName)","writeTD(FileSystem, Path, TableDescriptor)","remove(TableName)","add(TableDescriptor)","getTableInfoPath(FileSystem, Path)","getTableDescriptorFromFs(FileSystem, Path)","updateTableDescriptor(TableDescriptor)","getTableInfoFileName(int)","setCacheOn()","isTableInfoExists(TableName)"],"org.apache.hadoop.hbase.master.snapshot.DisabledTableSnapshotHandler":["snapshotRegions(List)","prepare()","downgradeToSharedTableLock()"],"org.apache.hadoop.hbase.ClusterMetricsBuilder":["setMasterName(ServerName)","setMasterInfoPort(int)","toOptions(EnumSet)","setHBaseVersion(String)","setClusterId(String)","setDeadServerNames(List)","toOption(ClusterMetrics.Option)","setBackerMasterNames(List)","build()","toOption(ClusterStatusProtos.Option)","setBalancerOn(Boolean)","toClusterStatus(ClusterMetrics)","setMasterCoprocessorNames(List)","setRegionsInTransition(List)","setLiveServerMetrics(Map)","setTableRegionStatesCount(Map)","newBuilder()","toClusterMetrics(ClusterStatusProtos.ClusterStatus)","toOptions(List)"],"org.apache.hadoop.hbase.regionserver.wal.AsyncFSWAL":["writerBroken(int)","isHsync(long, long)","appendAndSync()","sync()","syncCompleted(AsyncWriter, long, long)","syncFailed(long, Throwable)","getPipeline()","waitingRoll(int)","finishSync(boolean)","sync(AsyncWriter)","doCheckLogLowReplication()","consume()","closeWriter()","doShutdown()","append(RegionInfo, WALKeyImpl, WALEdit, boolean)","doAppend(AsyncWriter, FSWALEntry)","finishSyncLowerThanTxid(long, boolean)","sync(long)","epoch(int)","sync(boolean)","createWriterInstance(Path)","doReplaceWriter(Path, Path, AsyncWriter)","getLogReplication()","trySetReadyForRolling()","waitForSafePoint()","addTimeAnnotation(SyncFuture, String)","sync(long, boolean)","shouldScheduleConsumer()"],"org.apache.hadoop.hbase.regionserver.compactions.DefaultCompactor":["compact(CompactionRequestImpl, ThroughputController, User)","abortWriter(StoreFileWriter)","compactForTesting(Collection, boolean)","commitWriter(StoreFileWriter, FileDetails, CompactionRequestImpl)"],"org.apache.hadoop.hbase.regionserver.RSRpcServices":["doNonAtomicRegionMutation(HRegion, OperationQuota, RegionAction, CellScanner, RegionActionResult.Builder, List, long, RegionScannersCloseCallBack, RpcCallContext, ActivePolicyEnforcement)","start(ZKWatcher)","mutate(RpcController, MutateRequest)","rpcPreCheck(String)","cleanupBulkLoad(RpcController, CleanupBulkLoadRequest)","multi(RpcController, MultiRequest)","getRpcScheduler()","skipCellsForMutation(Action, CellScanner)","doReplayBatchOp(HRegion, List, long)","checkAndRowMutate(HRegion, List, CellScanner, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, RegionActionResult.Builder, ActivePolicyEnforcement)","getServerInfo(RpcController, GetServerInfoRequest)","getResultOrException(Exception, int)","getPriority()","replicateWALEntry(RpcController, ReplicateWALEntryRequest)","updateConfiguration(RpcController, UpdateConfigurationRequest)","getScannerVirtualTime(long)","stopServer(RpcController, StopServerRequest)","getSocketAddress()","getRegionInfo(RpcController, GetRegionInfoRequest)","updateFavoredNodes(RpcController, UpdateFavoredNodesRequest)","execRegionServerService(RpcController, CoprocessorServiceRequest)","getTimeLimit(HBaseRpcController, boolean)","execServiceOnRegion(HRegion, ClientProtos.CoprocessorServiceCall)","checkScanNextCallSeq(ScanRequest, RegionScannerHolder)","getScanner(long)","scan(RpcController, ScanRequest)","closeScanner(HRegion, RegionScanner, String, RpcCallContext)","doBatchOp(RegionActionResult.Builder, HRegion, OperationQuota, List, CellScanner, ActivePolicyEnforcement, boolean)","getRpcQuotaManager()","closeRegion(RpcController, CloseRegionRequest)","checkBatchSizeAndLogLargeSize(MultiRequest)","addScannerLeaseBack(Leases.Lease)","updateMutationMetrics(HRegion, long, boolean, boolean)","getServices()","newRegionScanner(ScanRequest, ScanResponse.Builder)","getHostname(Configuration, boolean)","getResultOrException(ClientProtos.Result, int)","addScanner(String, RegionScanner, Shipper, HRegion, boolean)","getRegionLoad(RpcController, GetRegionLoadRequest)","bulkLoadHFile(RpcController, BulkLoadHFileRequest)","openRegion(RpcController, OpenRegionRequest)","getOnlineRegion(RpcController, GetOnlineRegionRequest)","get(Get, HRegion, RegionScannersCloseCallBack, RpcCallContext)","startNonceOperation(MutationProto, long)","requirePermission(String, Permission.Action)","rollWALWriter(RpcController, RollWALWriterRequest)","skipCellsForMutations(List, CellScanner)","get(RpcController, GetRequest)","executeProcedures(RpcController, ExecuteProceduresRequest)","getScannersCount()","doNonAtomicBatchOp(RegionActionResult.Builder, HRegion, OperationQuota, List, CellScanner, ActivePolicyEnforcement)","closeAllScanners()","addSize(RpcCallContext, Result, Object)","addResults(ScanResponse.Builder, List, HBaseRpcController, boolean, boolean)","getConfiguration()","getStoreFile(RpcController, GetStoreFileRequest)","checkOpen()","flushRegion(RpcController, FlushRegionRequest)","getRegionScanner(ScanRequest)","prepareBulkLoad(RpcController, PrepareBulkLoadRequest)","replay(RpcController, ReplicateWALEntryRequest)","getRegion(RegionSpecifier)","createRpcServer(Server, Configuration, RpcSchedulerFactory, InetSocketAddress, String)","endNonceOperation(MutationProto, long, boolean)","stop()","scan(HBaseRpcController, ScanRequest, RegionScannerHolder, long, int, int, List, ScanResponse.Builder, MutableObject, RpcCallContext)","execService(RpcController, CoprocessorServiceRequest)","warmupRegion(RpcController, WarmupRegionRequest)","createPriority()","getDeadline(RequestHeader, Message)","getRpcSchedulerFactoryClass()","clearRegionBlockCache(RpcController, ClearRegionBlockCacheRequest)","getSpaceQuotaManager()","getSpaceQuotaSnapshots(RpcController, GetSpaceQuotaSnapshotsRequest)","getResultOrException(ResultOrException.Builder, int)","doAtomicBatchOp(RegionActionResult.Builder, HRegion, OperationQuota, List, CellScanner, ActivePolicyEnforcement)","getRegions(List, CacheEvictionStatsBuilder)","getPriority(RequestHeader, Message, User)","getScanDetailsWithId(long)","compactRegion(RpcController, CompactRegionRequest)","increment(HRegion, OperationQuota, MutationProto, CellScanner, long, ActivePolicyEnforcement)","onConfigurationChange(Configuration)","addResult(MutateResponse.Builder, Result, HBaseRpcController, boolean)","checkOOME(Throwable)","checkLimitOfRows(int, int, boolean, ScannerContext, ScanResponse.Builder)","append(HRegion, OperationQuota, MutationProto, CellScanner, long, ActivePolicyEnforcement)","checkCellSizeLimit(HRegion, Mutation)","isClientCellBlockSupport(RpcCallContext)","clearCompactionQueues(RpcController, ClearCompactionQueuesRequest)","exitIfOOME(Throwable)"],"org.apache.hadoop.hbase.util.FSUtils":["setupShortCircuitRead(Configuration)","parseVersionFrom(byte[])","getTableFragmentation(HMaster)","getInstance(FileSystem, Configuration)","setVersion(FileSystem, Path)","computeHDFSBlocksDistribution(FileSystem, FileStatus, long, long)","checkClusterIdExists(FileSystem, Path, long)","getDFSHedgedReadMetrics(Configuration)","getRegionDirFromRootDir(Path, RegionInfo)","checkVersion(FileSystem, Path, boolean, int, int)","getLocalTableDirs(FileSystem, Path)","isInSafeMode(DistributedFileSystem)","getReferenceFilePaths(FileSystem, Path)","getRegionReferenceFileCount(FileSystem, Path)","getTableDirs(FileSystem, Path)","checkVersion(FileSystem, Path, boolean)","listStatusWithStatusFilter(FileSystem, Path, FileStatusFilter)","isMatchingTail(Path, Path)","create(Configuration, FileSystem, Path, FsPermission, InetSocketAddress[])","setVersion(FileSystem, Path, String, int, int)","isDistributedFileSystem(FileSystem)","getTableStoreFilePathMap(FileSystem, Path, PathFilter, ExecutorService, HbckErrorReporter)","rewriteAsPb(FileSystem, Path, Path, ClusterId)","getTableFragmentation(FileSystem, Path)","getRegionLocalityMappingFromFS(Configuration, String, int, Map)","filterFileStatuses(FileStatus[], FileStatusFilter)","toVersionByteArray(String)","metaRegionExists(FileSystem, Path)","setVersion(FileSystem, Path, int, int)","filterFileStatuses(Iterator, FileStatusFilter)","deleteRegionDir(Configuration, HRegionInfo)","setClusterId(FileSystem, Path, ClusterId, int)","getVersion(FileSystem, Path)","addToHDFSBlocksDistribution(HDFSBlocksDistribution, BlockLocation[])","getRegionDegreeLocalityMappingFromFS(Configuration)","copyFiles(FileSystem, Path, FileSystem, Path, Configuration, ExecutorService, List)","checkAccess(UserGroupInformation, FileStatus, FsAction)","getTableStoreFilePathMap(Map, FileSystem, Path, TableName, PathFilter, ExecutorService, ProgressReporter)","getTableStoreFilePathMap(FileSystem, Path, PathFilter, ExecutorService, ProgressReporter)","getRegionDegreeLocalityMappingFromFS(Configuration, String, int)","getRegionDirFromTableDir(Path, RegionInfo)","getTableStoreFilePathMap(FileSystem, Path)","getRegionDirs(FileSystem, Path)","waitOnSafeMode(Configuration, long)","copyFilesParallel(FileSystem, Path, FileSystem, Path, Configuration, int)","checkDfsSafeMode(Configuration)","getTableStoreFilePathMap(Map, FileSystem, Path, TableName, PathFilter, ExecutorService, HbckErrorReporter)","checkFileSystemAvailable(FileSystem)","getTableStoreFilePathMap(Map, FileSystem, Path, TableName)","getClusterId(FileSystem, Path)","checkShortCircuitReadBufferSize(Configuration)","getTotalTableFragmentation(HMaster)","getFamilyDirs(FileSystem, Path)"],"org.apache.hadoop.hbase.util.CompressionTest":["testCompression(Compression.Algorithm)","doSmokeTest(FileSystem, Path, String)","testCompression(String)","main(String[])","usage()"],"org.apache.hadoop.hbase.regionserver.wal.ProtobufLogReader":["initAfterCompression(String)","getCodec(Configuration, String, CompressionContext)","hasCompression()","initAfterCompression()","setTrailerIfPresent()","initInternal(FSDataInputStream, boolean)","getPosition()","seekOnFs(long)","getWriterClsNames()","reset()","initReader(FSDataInputStream)","trailerSize()","init(FileSystem, Path, Configuration, FSDataInputStream)","readHeader(Builder, FSDataInputStream)","hasTagCompression()","readNext(Entry)","extractHiddenEof(Exception)","getCodecClsName()","close()"],"org.apache.hadoop.hbase.io.hfile.CompoundBloomFilter":["getNumQueriesForTesting(int)","enableTestingStats()","getNumPositivesForTesting(int)","contains(byte[], int, int, ByteBuff)","formatTestingStats()","toString()","supportsAutoLoading()","contains(Cell, ByteBuff, BloomType)","getNumChunks()","getBloomBlock(int)"],"org.apache.hadoop.hbase.master.assignment.AssignmentManager":["markRegionAsSplit(RegionInfo, ServerName, RegionInfo, RegionInfo)","markRegionAsClosing(RegionStateNode)","start()","getSnapShotOfAssignment(Collection)","isCarryingRegion(ServerName, RegionInfo)","shouldAssignFavoredNodes(RegionInfo)","addToPendingAssignment(HashMap, Collection)","isMetaAssigned()","isMetaRegionInTransition()","createAssignProcedure(RegionInfo, ServerName, boolean)","sendRegionClosedNotification(RegionInfo)","waitMetaLoaded(Procedure)","getAssignedRegions()","getTableStateManager()","updateRegionTransition(ServerName, TransitionCode, RegionInfo, long)","createAssignProcedure(RegionInfo)","markRegionAsMerged(RegionInfo, ServerName, RegionInfo[])","getMetaRegionFromName(byte[])","deleteTable(TableName)","updateRegionMergeTransition(ServerName, TransitionCode, RegionInfo, RegionInfo, RegionInfo)","markRegionAsOpening(RegionStateNode)","getRegionInfo(byte[])","registerListener(AssignmentListener)","unregisterListener(AssignmentListener)","assign(RegionInfo, ServerName)","getFavoredNodes(RegionInfo)","checkOnlineRegionsReportForMeta(ServerName, Set)","markRegionAsOpened(RegionStateNode)","isTableDisabled(TableName)","getRSReports()","hasRegionsInTransition()","checkMetaLoaded(RegionInfo)","getBalancer()","offlineRegion(RegionInfo)","moveAsync(RegionPlan)","getRegionsInTransition()","unassign(RegionInfo)","reportRegionStateTransition(ReportRegionStateTransitionRequest)","stop()","isMetaRegion(byte[])","createAssignProcedure(RegionInfo, boolean)","submitServerCrash(ServerName, boolean)","serverAdded(ServerName)","loadMeta()","killRegionServer(ServerName)","reportTransition(RegionStateNode, ServerName, TransitionCode, long)","processOfflineRegions()","sendRegionOpenedNotification(RegionInfo, ServerName)","processAssignQueue()","updateRegionsInTransitionMetrics(RegionInTransitionStat)","getProcedureEnvironment()","setMetaAssigned(RegionInfo, boolean)","queueAssign(RegionStateNode)","getReopenStatus(TableName)","move(RegionInfo)","createAssignProcedures(Map, int)","getMetaForRegion(RegionInfo)","createAssignProcedures(List)","stopAssignmentThread()","assignQueueSignal()","assign(RegionInfo)","getRegionStates()","createUnassignProcedure(RegionInfo, ServerName, boolean, boolean)","createRoundRobinAssignProcedures(List)","createUnassignProcedures(TableName)","undoRegionAsClosing(RegionStateNode)","handleRegionOverStuckWarningThreshold(RegionInfo)","getAssignmentManagerMetrics()","getRegionStateStore()","computeRegionInTransitionStat()","wakeServerReportEvent(ServerStateNode)","addRegionInTransition(RegionStateNode, RegionTransitionProcedure)","createAssignProcedure(RegionInfo, ServerName)","getMaster()","isMetaLoaded()","updateRegionSplitTransition(ServerName, TransitionCode, RegionInfo, RegionInfo, RegionInfo)","isCarryingMeta(ServerName)","serverRemoved(ServerName)","waitOnAssignQueue()","getMetaRegionSet()","getNumRegionsOpened()","unassign(RegionInfo, boolean)","getAssignMaxAttempts()","markRegionAsClosed(RegionStateNode)","wakeMetaLoadedEvent()","acceptPlan(HashMap, Map)","isTableEnabled(TableName)","waitServerReportEvent(ServerName, Procedure)","createUnassignProcedure(RegionInfo)","getConfiguration()","isRunning()","getRegionStatesCount(TableName)","processAssignmentPlans(HashMap, HashMap, List, List)","getExcludedServersForSystemTable()","removeRegionInTransition(RegionStateNode, RegionTransitionProcedure)","createMergeProcedure(RegionInfo[])","createUnassignProcedure(RegionInfo, ServerName, boolean)","startAssignmentThread()","checkOnlineRegionsReport(ServerStateNode, Set)","joinCluster()","createUnassignProcedures(Collection)","createUnassignProcedure(RegionInfo, boolean)","getSystemTables(ServerName)","isMetaRegion(RegionInfo)","createSplitProcedure(RegionInfo, byte[])","isLogSplittingDone(ServerName, boolean)","reportOnlineRegions(ServerName, Set)","createMoveRegionProcedure(RegionPlan)","waitMetaAssigned(Procedure, RegionInfo)","checkIfShouldMoveSystemRegionAsync()","createRoundRobinAssignProcedures(List, List)","onlineRegion(RegionInfo, ServerName)","undoRegionAsOpening(RegionStateNode)","getProcedureScheduler()","getMetaAssignEvent(RegionInfo)"],"org.apache.hadoop.hbase.master.snapshot.TakeSnapshotHandler":["hasException()","getSnapshot()","isFinished()","completeSnapshot(Path, Path, FileSystem)","getException()","getCompletionTimestamp()","cancel(String)","process()","loadTableDescriptor()","getExceptionIfFailed()","rethrowExceptionIfFailed()","rethrowException()","snapshotDisabledRegion(RegionInfo)","prepare()"],"org.apache.hadoop.hbase.master.procedure.CreateNamespaceProcedure":["waitInitialized(MasterProcedureEnv)","updateZKNamespaceManager(MasterProcedureEnv, NamespaceDescriptor)","getTableNamespaceManager(MasterProcedureEnv)","getState(int)","rollbackState(MasterProcedureEnv, CreateNamespaceState)","getTableOperationType()","executeFromState(MasterProcedureEnv, CreateNamespaceState)","createDirectory(MasterProcedureEnv, NamespaceDescriptor)","acquireLock(MasterProcedureEnv)","prepareCreate(MasterProcedureEnv)","isTraceEnabled()","isRollbackSupported(CreateNamespaceState)","getInitialState()","insertIntoNSTable(MasterProcedureEnv, NamespaceDescriptor)","deserializeStateData(ProcedureStateSerializer)","setNamespaceQuota(MasterProcedureEnv, NamespaceDescriptor)","serializeStateData(ProcedureStateSerializer)","shouldWaitClientAck(MasterProcedureEnv)","getStateId(CreateNamespaceState)","isBootstrapNamespace()","getNamespaceName()"],"org.apache.hadoop.hbase.master.SplitLogManager.TimeoutMonitor":["chore()"],"org.apache.hadoop.hbase.quotas.TableQuotaSnapshotStore":["getCurrentState(TableName)","getSnapshotSizesForTable(TableName)","filterBySubject(TableName)","getTargetState(TableName, SpaceQuota)","setCurrentState(TableName, SpaceQuotaSnapshot)","getQuotaForTable(TableName)","getSpaceQuota(TableName)","setRegionUsage(Map)"],"org.apache.hadoop.hbase.io.hfile.HFileBlock.FSReaderImpl":["readBlockData(long, long, boolean, boolean)","readAtOffset(FSDataInputStream, byte[], int, int, boolean, long, boolean)","toString()","verifyOnDiskSizeMatchesHeader(int, ByteBuffer, long, boolean)","blockRange(long, long)","getCachedHeader(long)","cacheNextBlockHeader(long, byte[], int, int)","getDefaultBlockDecodingContext()","readBlockDataInternal(FSDataInputStream, long, long, boolean, boolean, boolean)","unbufferStream()","closeStreams()","setIncludesMemStoreTS(boolean)","setDataBlockEncoder(HFileDataBlockEncoder)","checkAndGetSizeAsInt(long, int)","getBlockDecodingContext()","validateChecksum(long, ByteBuffer, int)"],"org.apache.hadoop.hbase.master.MasterFileSystem":["checkRootDir(Path, Configuration, FileSystem)","deleteFamilyFromFS(RegionInfo, byte[])","createInitialFileSystemLayout()","getFileSystem()","checkTempDir(Path, Configuration, FileSystem)","checkStagingDir()","bootstrap(Path, Configuration)","getClusterId()","getRootDir()","getWALRootDir()","logFileSystemState(Logger)","getConfiguration()","getWALFileSystem()","deleteFamilyFromFS(Path, RegionInfo, byte[])","setInfoFamilyCachingForMeta(TableDescriptor, boolean)","getRegionDir(RegionInfo)","stop()","getTempDir()","checkSubDir(Path, String)"],"org.apache.hadoop.hbase.ipc.NettyRpcFrameDecoder":["readRawVarint32(ByteBuf)","decode(ChannelHandlerContext, ByteBuf, List)","setConnection(NettyServerRpcConnection)","getHeader(ByteBuf, int)","handleTooBigRequest(ByteBuf)"],"org.apache.hadoop.hbase.regionserver.throttle.PressureAwareCompactionThroughputController":["tune(double)","toString()","setConf(Configuration)","setup(RegionServerServices)"],"org.apache.hadoop.hbase.master.procedure.MasterProcedureUtil":["getTablePriority(TableName)","toProtoUserInfo(User)","toUserInfo(UserInformation)","getServerPriority(ServerProcedureInterface)","submitProcedure(NonceProcedureRunnable)","validateProcedureWALFilename(String)","unwrapRemoteIOException(Procedure)"],"org.apache.hadoop.hbase.regionserver.StoreFileInfo":["open(FileSystem, CacheConfig, boolean, long, boolean, AtomicInteger, boolean)","getReferredToFile(Path)","computeRefFileHDFSBlockDistribution(FileSystem, Reference, FileStatus)","getReference()","getModificationTime()","computeHDFSBlocksDistributionInternal(FileSystem)","hashCode()","isDelFile(String)","isReference(String)","getPath()","isReference(Path)","equals(Object)","isTopReference()","validateStoreFileName(String)","computeHDFSBlocksDistribution(FileSystem)","toString()","isDelFile(Path)","getReferencedFileStatus(FileSystem)","getSize()","setRegionCoprocessorHost(RegionCoprocessorHost)","getFileStatus()","getActiveFileName()","isLink()","getHDFSBlockDistribution()","getCreatedTimestamp()","isHFile(Path)","isHFile(String)","isValid(FileStatus)","isReference()"],"org.apache.hadoop.hbase.util.JVMClusterUtil":["createRegionServerThread(Configuration, Class, int)","waitForEvent(long, String, Supplier)","startup(List, List)","findActiveMaster(List)","shutdown(List, List)","createMasterThread(Configuration, Class, int)"],"org.apache.hadoop.hbase.regionserver.MetricsRegionServerWrapperImpl.RegionServerMetricsWrapperRunnable":["run()"],"org.apache.hadoop.hbase.client.AsyncRpcRetryingCallerFactory.ScanSingleRegionCallerBuilder":["stub(ClientService.Interface)","rpcTimeout(long, TimeUnit)","scannerLeaseTimeoutPeriod(long, TimeUnit)","remote(boolean)","location(HRegionLocation)","startLogErrorsCnt(int)","resultCache(ScanResultCache)","start(HBaseRpcController, ScanResponse)","scanTimeout(long, TimeUnit)","build()","metrics(ScanMetrics)","consumer(AdvancedScanResultConsumer)","id(long)","pause(long, TimeUnit)","maxAttempts(int)","setScan(Scan)"],"org.apache.hadoop.hbase.tool.CanaryTool.Monitor":["initAdmin()","finalCheckForErrors()","hasError()","isDone()","close()"],"org.apache.hadoop.hbase.client.BufferedMutatorImpl":["getCurrentWriteBufferSize()","getWriteBufferSize()","getUnflushedSize()","getConfiguration()","setOperationTimeout(int)","getWriteBufferPeriodicFlushTimerTickMs()","getName()","getPool()","mutate(List)","makeException(List)","checkClose()","getAsyncProcess()","close()","doFlush(boolean)","getWriteBufferPeriodicFlushTimeoutMs()","flush()","getExecutedWriteBufferPeriodicFlushes()","timerCallbackForWriteBufferPeriodicFlush()","setRpcTimeout(int)","mutate(Mutation)","createTask(QueueRowAccess)","setWriteBufferPeriodicFlush(long, long)","createQueueRowAccess()","size()"],"org.apache.hadoop.hbase.quotas.QuotaRetriever":["iterator()","next()","init(Connection, Scan)","open(Configuration, QuotaFilter)","init(Configuration, Scan)","open(Configuration)","close()"],"org.apache.hadoop.hbase.quotas.SpaceViolationPolicyEnforcementFactory":["create(RegionServerServices, TableName, SpaceQuotaSnapshot)","createWithoutViolation(RegionServerServices, TableName, SpaceQuotaSnapshot)","getInstance()"],"org.apache.hadoop.hbase.io.hfile.HFileBlock":["getOffset()","getSerializedLength()","totalChecksumBytes()","init(BlockType, int, int, long, long, int, int, HFileContext)","getDummyHeaderForVersion(boolean)","getOnDiskSizeWithoutHeader()","overwriteHeader()","getHFileContext()","heapSize()","getDeserializer()","usesSharedMemory()","unpack(HFileContext, FSReader)","sanityCheckUncompressed()","hashCode()","serialize(ByteBuffer, boolean)","sanityCheckAssertion(BlockType, BlockType)","headerSize()","getMemoryType()","readWithExtra(InputStream, byte[], int, int, int)","getChecksumType()","positionalReadWithExtra(FSDataInputStream, long, byte[], int, int, int)","addMetaData(ByteBuffer, boolean)","equals(Object)","getNextBlockOnDiskSize()","allocateBuffer()","getDataBlockEncodingId()","getOnDiskSizeWithHeader(ByteBuffer, boolean)","toString()","getMetaData()","getUncompressedSizeWithoutHeader()","sanityCheck()","getPrevBlockOffset()","getOnDiskDataSizeWithHeader()","sanityCheckUncompressedSize()","sanityCheckAssertion(long, long, String)","getByteStream()","toStringHeader(ByteBuff)","getBufferReadOnly()","getDataBlockEncoding()","isUnpacked()","getDummyHeaderForVersion()","getBlockType()","getOnDiskSizeWithHeader()","getBufferWithoutHeader()","getBytesPerChecksum()","deepClone()","headerSize(boolean)"],"org.apache.hadoop.hbase.io.hfile.HFileReaderImpl.EncodedScanner":["isSeeked()","getValue()","next()","loadBlockAndSeekToKey(HFileBlock, Cell, boolean, Cell, boolean)","getKeyString()","assertValidSeek()","getCell()","compareKey(CellComparator, Cell)","processFirstDataBlock()","updateCurrentBlock(HFileBlock)","getFirstKeyCellInBlock(HFileBlock)","getValueString()","getEncodedBuffer(HFileBlock)","setNonSeekedState()","getKey()"],"org.apache.hadoop.hbase.procedure.flush.MasterFlushTableProcedureManager":["getProcedureSignature()","initialize(MasterServices, MetricsMaster)","isProcedureDone(ProcedureDescription)","stop(String)","isStopped()","execProcedure(ProcedureDescription)","checkPermissions(ProcedureDescription, AccessChecker, User)"],"org.apache.hadoop.hbase.quotas.SpaceQuotaSnapshot.SpaceQuotaStatus":["toProto(SpaceQuotaStatus)","toStatus(QuotaProtos.SpaceQuotaStatus)","equals(Object)","notInViolation()","toString()","getPolicy()","isInViolation()","hashCode()"],"org.apache.hadoop.hbase.quotas.TimeBasedLimiter":["checkQuota(long, long, long, long)","grabQuota(long, long, long, long)","setFromTimedQuota(RateLimiter, TimedQuota)","toString()","update(TimeBasedLimiter)","consumeWrite(long)","fromThrottle(Throttle)","isBypass()","getReadAvailable()","getWriteAvailable()","consumeRead(long)"],"org.apache.hadoop.hbase.regionserver.wal.FSHLog":["append(RegionInfo, WALKeyImpl, WALEdit, boolean)","preemptiveSync(ProtobufLogWriter)","sync()","getOutputStream()","afterCreatingZigZagLatch()","sync(long)","beforeWaitOnSafePoint()","getPipeline()","createWriterInstance(Path)","doReplaceWriter(Path, Path, Writer)","publishSyncOnRingBuffer(boolean)","publishSyncOnRingBuffer(long, boolean)","sync(boolean)","isLowReplicationRollEnabled()","publishSyncThenBlockOnCompletion(TraceScope, boolean)","checkLogRoll()","doAppend(Writer, FSWALEntry)","doCheckLogLowReplication()","getLogReplication()","sync(long, boolean)","doShutdown()","getSequenceOnRingBuffer()"],"org.apache.hadoop.hbase.client.AsyncRpcRetryingCallerFactory.ServerRequestCallerBuilder":["rpcTimeout(long, TimeUnit)","pause(long, TimeUnit)","action(AsyncServerRequestRpcRetryingCaller.Callable)","call()","maxAttempts(int)","startLogErrorsCnt(int)","operationTimeout(long, TimeUnit)","serverName(ServerName)","build()"],"org.apache.hadoop.hbase.regionserver.ThreadSafeMemStoreSizing":["getHeapSize()","incMemStoreSize(long, long, long, int)","getDataSize()","getCellsCount()","toString()","getMemStoreSize()","getOffHeapSize()"],"org.apache.hadoop.hbase.master.cleaner.HFileCleaner":["validate(Path)","getCleanerThreadCheckIntervalMsec()","deleteFile(FileStatus)","getSmallQueueInitSize()","checkAndUpdateConfigurations(Configuration)","dispatch(HFileDeleteTask)","consumerLoop(BlockingQueue)","getThrottlePoint()","getDelegatesForTesting()","getNumOfDeletedLargeFiles()","getCleanerThreadTimeoutMsec()","stopHFileDeleteThreads()","getNumOfDeletedSmallFiles()","onConfigurationChange(Configuration)","cleanup()","getLargeQueueInitSize()","cancel(boolean)","startHFileDeleteThreads()","countDeletedFiles(boolean, boolean)","getCleanerThreads()","deleteFiles(Iterable)"],"org.apache.hadoop.hbase.master.SplitLogManager":["getSplitLogManagerCoordination()","handleDeadWorkers(Set)","activeTasks(TaskBatch)","splitLogDistributed(List)","handleDeadWorker(ServerName)","getFileList(List, PathFilter)","getFileList(Configuration, List, PathFilter)","enqueueSplitTask(String, TaskBatch)","getTasks()","stop()","createTaskIfAbsent(String, TaskBatch)","splitLogDistributed(Path)","splitLogDistributed(Set, List, PathFilter)","waitForSplittingCompletion(TaskBatch, MonitoredTask)"],"org.apache.hadoop.hbase.io.hfile.bucket.ByteBufferIOEngine":["read(long, int, CacheableDeserializer)","isPersistent()","sync()","toString()","write(ByteBuffer, long)","shutdown()","usesSharedMemory()","write(ByteBuff, long)"],"org.apache.hadoop.hbase.master.zksyncer.MetaLocationSyncer":["getNodesToWatch()","validate(String)"],"org.apache.hadoop.hbase.master.cleaner.ReplicationBarrierCleaner":["chore()"],"org.apache.hadoop.hbase.regionserver.StoreUtils":["getSplitPoint(Collection, CellComparator)","getDeterministicRandomSeed(Collection)","getLowestTimestamp(Collection)","getLargestFile(Collection)","getMaxMemStoreTSInList(Collection)","getMaxSequenceIdInList(Collection)","getFileSplitPoint(HStoreFile, CellComparator)","hasReferences(Collection)"],"org.apache.hadoop.hbase.client.HTable.CheckAndMutateBuilderImpl":["ifNotExists()","timeRange(TimeRange)","thenPut(Put)","qualifier(byte[])","ifMatches(CompareOperator, byte[])","preCheck()","thenMutate(RowMutations)","thenDelete(Delete)"],"org.apache.hadoop.hbase.master.MasterWalManager":["getSplittingServersFromWALDir()","getWALDirPaths(PathFilter)","getServerNamesFromWALDirPath(PathFilter)","getWALDirectoryName(ServerName)","getWALDirPath()","getFileSystem()","getLiveServersFromWALDir()","getSplitLogManager()","createAndGetLogDirs(Set)","archiveMetaLog(ServerName)","getOldLogDir()","splitLog(Set, PathFilter)","splitLog(ServerName)","stop()","splitMetaLog(ServerName)","isWALDirectoryNameWithWALs(ServerName)","getFailedServersFromLogFolders()","splitLog(Set)","splitMetaLog(Set)","checkFileSystem()"],"org.apache.hadoop.hbase.backup.example.TableHFileArchiveTracker":["getMonitor()","checkEnabledAndUpdate()","start()","getZooKeeperWatcher()","nodeChildrenChanged(String)","keepHFiles(String)","safeStopTrackingTable(String)","nodeCreated(String)","clearTables()","create(ZKWatcher, HFileArchiveTableMonitor)","stop()","create(Configuration)","addAndReWatchTable(String)","updateWatchedTables()","nodeDeleted(String)"],"org.apache.hadoop.hbase.client.MetricsConnection":["updateRpc(MethodDescriptor, Message, CallStats)","newCallStats()","incrMetaCacheNumClearRegion()","getExecutorPoolName()","getMetaPoolName()","shutdown()","incrMetaCacheHit()","getMetricRegistry()","incrHedgedReadWin()","incrDelayRunners()","updateDelayInterval(long)","updateServerStats(ServerName, byte[], Object)","getMetric(String, ConcurrentMap, NewMetric)","updateRegionStats(ServerName, byte[], RegionLoadStats)","incrMetaCacheNumClearServer()","incrMetaCacheMiss()","incrCacheDroppingExceptions(Object)","incrHedgedReadOps()","incrNormalRunners()","updateRpcGeneric(MethodDescriptor, CallStats)"],"org.apache.hadoop.hbase.master.procedure.CloneSnapshotProcedure":["toStringClassDetails(StringBuilder)","getStateId(CloneSnapshotState)","getState(int)","getTableOperationType()","createFsLayout(MasterProcedureEnv, TableDescriptor, List, CreateHdfsRegions)","prepareClone(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, CloneSnapshotState)","executeFromState(MasterProcedureEnv, CloneSnapshotState)","addRegionsToMeta(MasterProcedureEnv)","createFilesystemLayout(MasterProcedureEnv, TableDescriptor, List)","getInitialState()","getTableName()","deserializeStateData(ProcedureStateSerializer)","preCloneSnapshot(MasterProcedureEnv)","serializeStateData(ProcedureStateSerializer)","isRollbackSupported(CloneSnapshotState)","moveTempMobDirectoryToHBaseRoot(MasterFileSystem, TableDescriptor, Path)","restoreSnapshotAcl(MasterProcedureEnv)","getMonitorStatus()","postCloneSnapshot(MasterProcedureEnv)"],"org.apache.hadoop.hbase.tool.HFileContentValidator":["createThreadPool(Configuration)","validateHFileContent(Configuration)","addOptions()","doWork()","processOptions(CommandLine)"],"org.apache.hadoop.hbase.quotas.QuotaCache.QuotaRefresherChore":["fetch(String, ConcurrentHashMap, Fetcher)","fetchNamespaceQuotaState()","fetchTableQuotaState()","chore()","fetchUserQuotaState()"],"org.apache.hadoop.hbase.io.hfile.HFile":["updateWriteLatency(long)","updateReadLatency(long, boolean)","getWriterFactory(Configuration, CacheConfig)","isHFileFormat(FileSystem, Path)","checkHFileVersion(Configuration)","openReader(Path, FSDataInputStreamWrapper, long, CacheConfig, HFileSystem, boolean, Configuration)","getAndResetChecksumFailuresCount()","getStoreFiles(FileSystem, Path)","createReader(FileSystem, Path, CacheConfig, boolean, Configuration)","createReader(FileSystem, Path, FSDataInputStreamWrapper, long, CacheConfig, boolean, Configuration)","createReader(FileSystem, Path, Configuration)","getWriterFactoryNoCache(Configuration)","getSupportedCompressionAlgorithms()","createReaderFromStream(Path, FSDataInputStream, long, CacheConfig, Configuration)","checkFormatVersion(int)","getFormatVersion(Configuration)","isHFileFormat(FileSystem, FileStatus)","getChecksumFailuresCount()","isReservedFileInfoKey(byte[])","longToInt(long)","main(String[])"],"org.apache.hadoop.hbase.security.access.ZKPermissionWatcher":["refreshNodes(List)","writeToZookeeper(byte[], byte[])","start()","waitUntilStarted()","nodeChildrenChanged(String)","nodeCreated(String)","deleteTableACLNode(TableName)","refreshAuthManager(String, byte[])","deleteNamespaceACLNode(String)","nodeDataChanged(String)","asyncProcessNodeUpdate(Runnable)","close()","nodeDeleted(String)"],"org.apache.hadoop.hbase.master.RegionPlacementMaintainer":["updateAssignmentPlanToMeta(FavoredNodesPlan)","printLocalityAndDispersionForCurrentPlan(Map)","getFavoredNodeList(String)","printDispersionScores(TableName, SnapshotOfRegionAssignmentFromMeta, int, FavoredNodesPlan, boolean)","updateAssignmentPlanToRegionServers(FavoredNodesPlan)","getRegionsMovement(FavoredNodesPlan)","checkDifferencesWithOldPlan(Map, Map, FavoredNodesPlan)","genAssignmentPlan(TableName, SnapshotOfRegionAssignmentFromMeta, Map, FavoredNodesPlan, boolean)","printHelp(Options)","updateAssignmentPlan(FavoredNodesPlan)","printAssignmentPlan(FavoredNodesPlan)","verifyRegionPlacement(boolean)","setTargetTableName(String[])","main(String[])","getRegionAssignmentSnapshot()","getNewAssignmentPlan()"],"org.apache.hadoop.hbase.util.RegionMover.MoveWithoutAck":["call()"],"org.apache.hadoop.hbase.coprocessor.MetaTableMetrics":["getRegionObserver()","stop(CoprocessorEnvironment)","start(CoprocessorEnvironment)"],"org.apache.hadoop.hbase.regionserver.handler.RSProcedureHandler":["process()"],"org.apache.hadoop.hbase.regionserver.ScanInfo":["getTtl()","isUsePread()","getMaxVersions()","getTimeToPurgeDeletes()","getCellsPerTimeoutCheck()","getPreadMaxBytes()","getFamily()","isParallelSeekEnabled()","getComparator()","isNewVersionBehavior()","customize(int, long, KeepDeletedCells)","getCellsPerTimeoutCheck(Configuration)","getTableMaxRowSize()","getKeepDeletedCells()","getMinVersions()"],"org.apache.hadoop.hbase.io.hfile.CacheConfig":["isInMemory()","isBlockCacheEnabled()","shouldLockOnCacheMiss(BlockType)","setEvictOnClose(boolean)","shouldReadBlockFromCache(BlockType)","shouldCacheDataOnWrite()","shouldDropBehindCompaction()","getOnHeapCache(Configuration)","clearGlobalInstances()","shouldCacheCompressed(BlockCategory)","shouldCacheDataOnRead()","getOnHeapCacheInternal(Configuration)","getL2CacheStats()","shouldPrefetchOnOpen()","instantiateBlockCache(Configuration)","getOnHeapCacheStats()","setCacheDataOnWrite(boolean)","shouldCacheBloomsOnWrite()","toString()","getExternalBlockcache(Configuration)","shouldEvictOnClose()","getBlockCache()","shouldCacheBlockOnRead(BlockCategory)","getBucketCache(Configuration)","shouldCacheIndexesOnWrite()","shouldCacheDataCompressed()"],"org.apache.hadoop.hbase.io.FileLink":["getAvailablePath(FileSystem)","equals(Object)","isBackReferencesDir(Path)","toString()","exists(FileSystem)","getLocations()","setLocations(Path, Path[])","getBackReferencesDir(Path, String)","hashCode()","getFileStatus(FileSystem)","open(FileSystem)","open(FileSystem, int)","getBackReferenceFileName(Path)"],"org.apache.hadoop.hbase.regionserver.HRegion.ReplayBatchOperation":["prepareMiniBatchOperations(MiniBatchOperationInProgress, long, List)","writeMiniBatchOperationsToMemStore(MiniBatchOperationInProgress, WriteEntry)","checkAndPreparePut(Put)","getOrigLogSeqNum()","completeMiniBatchOperations(MiniBatchOperationInProgress, WriteEntry)","getNonce(int)","isInReplay()","getMutation(int)","getNonceGroup(int)","checkAndPrepare()","getMutationsForCoprocs()","closeRegionOperation()","startRegionOperation()"],"org.apache.hadoop.hbase.MetaTableAccessor":["mergeRegions(Connection, RegionInfo, Map, ServerName, int)","scanMeta(Connection, TableName, QueryType, int, Visitor)","overwriteRegions(Connection, List, int)","getTableStateColumn()","getDaughterRegions(Result)","getTableRegionsAndLocations(Connection, TableName)","getSeqNumDuringOpen(Result, int)","deleteTableState(Connection, TableName)","getReplicationBarrier(Cell)","isMergeQualifierPrefix(Cell)","getServerNameColumn(int)","getStartCodeColumn(int)","fullScan(Connection, QueryType)","debugLogMutations(List)","addRegionsToMeta(Connection, List, int, long)","deleteMergeQualifiers(Connection, RegionInfo)","addLocation(Put, ServerName, long, int)","scanMeta(Connection, byte[], byte[], QueryType, Filter, int, Visitor)","parseRegionInfoFromRegionName(byte[])","getRegionInfo(Result)","multiMutate(Connection, Table, byte[], List)","getTableRegions(Connection, TableName)","scanMeta(Connection, Visitor, TableName, byte[], int)","addMergeRegions(Put, Collection)","getTableState(Connection, TableName)","getRegionCount(Connection, TableName)","getTableRegionsAndLocations(Connection, TableName, boolean)","parseReplicaIdFromServerColumn(byte[])","put(Table, Put)","getParentsBytes(List)","getTableStopRowForMeta(TableName, QueryType)","getMetaKeyForRegion(RegionInfo)","debugLogMutation(Mutation)","makePutFromRegionInfo(RegionInfo, long)","get(Table, Get)","getRegion(Connection, byte[])","getSeqNumColumn(int)","getServerName(Result, int)","getReplicationBarriers(Result)","tableExists(Connection, TableName)","scanMeta(Connection, byte[], byte[], QueryType, int, Visitor)","splitRegion(Connection, RegionInfo, long, RegionInfo, RegionInfo, ServerName, int)","putsToMetaTable(Connection, List)","removeRegionReplicasFromMeta(Set, int, int, Connection)","getReplicationBarrierResult(Connection, TableName, byte[], byte[])","deleteRegionInfo(Connection, RegionInfo)","getTableStartRowForMeta(TableName, QueryType)","getRegionStateColumn()","addRegionStateToPut(Put, RegionState.State)","multiMutate(Connection, Table, byte[], Mutation[])","fullScanRegions(Connection, Visitor)","getRegionLocation(Connection, byte[])","deleteFromMetaTable(Connection, Delete)","fullScanRegions(Connection)","hasMergeRegions(Cell[])","scanMetaForTableRegions(Connection, Visitor, TableName)","getReplicationBarrierResult(Result)","makePutFromTableState(TableState, long)","getClosestRegionInfo(Connection, TableName, byte[])","parseParentsBytes(byte[])","addDaughtersToPut(Put, RegionInfo, RegionInfo)","getTableStates(Connection)","updateLocation(Connection, RegionInfo, ServerName, long, long)","getRegionLocation(Connection, RegionInfo)","updateRegionLocation(Connection, RegionInfo, ServerName, long, long)","getRegionLocations(Result)","addRegionsToMeta(Connection, List, int)","makeDeleteFromRegionInfo(RegionInfo, long)","deleteFromMetaTable(Connection, List)","addRegionInfo(Put, RegionInfo)","getRegionLocation(Result, RegionInfo, int)","addReplicationParent(Put, List)","getAllRegions(Connection, boolean)","getRegionStateColumn(int)","fullScanMetaAndPrint(Connection)","getRegionInfoColumn()","getRegionCount(Configuration, TableName)","updateTableState(Connection, TableState)","addRegionToMeta(Connection, RegionInfo)","deleteRegionInfos(Connection, List, long)","deleteRegionInfos(Connection, List)","getMetaScan(Connection, int)","fullScanTables(Connection, Visitor)","putToMetaTable(Connection, Put)","getRegionInfo(Result, byte[])","getMergeRegions(Cell[])","addSplitsToParent(Connection, RegionInfo, RegionInfo, RegionInfo)","getReplicationBarrier(Connection, byte[])","getRegionResult(Connection, byte[])","getMergeRegions(Connection, byte[])","updateTableState(Connection, TableName, TableState.State)","addEmptyLocation(Put, int)","getTableFamily()","addReplicationBarrier(Put, long)","getTableState(Result)","getTableRegions(Connection, TableName, boolean)","makePutForReplicationBarrier(RegionInfo, long, long)","getTableEncodedRegionNameAndLastBarrier(Connection, TableName)","scanMeta(Connection, byte[], byte[], QueryType, Visitor)","getMetaHTable(Connection)","getServerColumn(int)","getTableEncodedRegionNamesForSerialReplication(Connection, TableName)","getScanForTableName(Connection, TableName)","getServerUserRegions(Connection, ServerName)","getCatalogFamily()","getListOfRegionInfos(List)","writeRegionName(ByteArrayOutputStream, byte[])","addSequenceNum(Put, long, int)","scanByRegionEncodedName(Connection, String)"],"org.apache.hadoop.hbase.wal.WALSplitter":["getMaxSequenceId(FileStatus[])","finishSplitLogFile(String, Configuration)","getSplitEditFilesSorted(FileSystem, Path)","getMaxRegionSequenceId(FileSystem, Path)","getReader(FileStatus, boolean, CancelableProgressable)","getMaxRegionSequenceId(Configuration, RegionInfo, IOExceptionSupplier, IOExceptionSupplier)","createWriter(Path)","archiveLogs(List, List, Path, FileSystem, Configuration)","getRegionSplitEditsPath(Entry, String, String, Configuration)","finishSplitLogFile(Path, Path, Path, Configuration)","isSequenceIdFile(Path)","getReader(Path, CancelableProgressable)","getNumOpenWriters()","hasRecoveredEdits(Configuration, RegionInfo)","getSequenceIdFiles(FileSystem, Path)","moveAsideBadEditsFile(FileSystem, Path)","getTmpRecoveredEditsFileName(String)","split(Path, Path, Path, FileSystem, Configuration, WALFactory)","writeRegionSequenceIdFile(FileSystem, Path, long)","getNextLogLine(Reader, Path, boolean)","getRegionDirRecoveredEditsDir(Path)","formatRecoveredEditsFileName(long)","getCompletedRecoveredEditsFilePath(Path, long)","splitLogFile(FileStatus, CancelableProgressable)","getMutationsFromWALEntry(WALEntry, CellScanner, Pair, Durability)","splitLogFile(Path, FileStatus, FileSystem, Configuration, CancelableProgressable, LastSequenceId, SplitLogWorkerCoordination, WALFactory)"],"org.apache.hadoop.hbase.master.HMaster":["canCreateBaseZNode()","setCatalogJanitorEnabled(boolean)","checkEncryption(Configuration, ColumnFamilyDescriptor)","getAverageLoad()","getRegionServerInfoPort(ServerName)","createSystemTable(TableDescriptor)","restoreSnapshot(SnapshotDescription, long, long, boolean)","listTableDescriptorsByNamespace(String)","reportMobCompactionStart(TableName)","waitForMasterActive()","normalizeRegions()","balanceSwitch(boolean)","isCleanerChoreEnabled()","getFavoredNodesManager()","getClusterMetrics()","disableTable(TableName, long, long)","getUseThisHostnameInstead(Configuration)","finishActiveMasterInitialization(MonitoredTask)","getLoadBalancer()","decommissionRegionServers(List, boolean)","getMasterFileSystem()","getTableStateManager()","shutdown()","checkTableExists(TableName)","checkCompactionPolicy(Configuration, TableDescriptor)","putUpJettyServer()","removeReplicationPeer(String)","deleteTable(TableName, long, long)","isInitialized()","getTableDescriptors()","getSplitOrMergeTracker()","getMasterCoprocessorHost()","getRemoteProcedure(long)","getBackupMasters()","getMetaTableObserver()","createRpcServices()","getClusterMetrics(EnumSet)","checkTableModifiable(TableName)","isNormalizerOn()","checkClassLoading(Configuration, TableDescriptor)","isInMaintenanceMode()","listDecommissionedRegionServers()","getTableDescriptors(List, String, String, List, boolean)","balanceThrottling(long, int, long)","getNumWALFiles()","checkInitialized()","isCatalogTable(TableName)","stopProcedureExecutor()","getLoadedCoprocessors()","getAssignmentManager()","stopServiceThreads()","addColumn(TableName, ColumnFamilyDescriptor, long, long)","checkCompression(TableDescriptor)","recommissionRegionServer(ServerName, List)","getSpaceQuotaSnapshotNotifier()","waitForNamespaceOnline()","modifyTable(TableName, TableDescriptorGetter, long, long)","getRegionServerVersion(ServerName)","checkServiceStarted()","getMasterCoprocessors()","getRegionNormalizerTracker()","listReplicationPeers(String)","createNamespace(NamespaceDescriptor, long, long)","getClusterMetricsWithoutCoprocessor()","getRemoteInetAddress(int, long)","getSnapshotManager()","getClusterMetricsWithoutCoprocessor(EnumSet)","main(String[])","executePeerProcedure(ModifyPeerProcedure)","getServerName()","splitRegion(RegionInfo, byte[], long, long)","isBalancerOn()","deleteNamespace(String, long, long)","createQuotaSnapshotNotifier()","truncateTable(TableName, boolean, long, long)","getMasterProcedureExecutor()","mergeRegions(RegionInfo[], boolean, long, long)","getQuotaObserverChore()","isRegionOnline(RegionInfo)","warnOrThrowExceptionForFailure(boolean, String, String, Exception)","getInitializedEvent()","isSplitOrMergeEnabled(MasterSwitchType)","getSnapshotQuotaObserverChore()","getMasterProcedureManagerHost()","updateConfigurationForQuotasObserver(Configuration)","getReplicationPeerManager()","getLoadBalancerClassName()","startProcedureExecutor()","getSplitPlanCount()","getClientIdAuditPrefix()","enableTable(TableName, long, long)","stop(String)","enableReplicationPeer(String)","getMasterQuotaManager()","getLastMajorCompactionTimestampForRegion(byte[])","isCatalogJanitorEnabled()","getMergePlanCount()","getLastMajorCompactionTimestamp(TableName)","getLocks()","getMaxRegionsInTransition()","getClusterSchema()","startServiceThreads()","getMasterFinishedInitializationTime()","isActiveMaster()","getMaxBalancingTime()","move(byte[], byte[])","modifyColumn(TableName, ColumnFamilyDescriptor, long, long)","waitForRegionServers(MonitoredTask)","constructMaster(Class, Configuration)","modifyTable(TableName, TableDescriptor, long, long)","run()","getWalProcedureStore()","getMobCompactionState(TableName)","getReplicationLoad(ServerName[])","disableReplicationPeer(String)","abort(String, Throwable)","balance()","getWalGroupsReplicationStatus()","canUpdateTableDescriptor()","waitForMetaOnline()","getRegionServerFatalLogBuffer()","checkReplicationScope(ColumnFamilyDescriptor)","decorateMasterConfiguration(Configuration)","initClusterSchemaService()","getProcedures()","checkCompression(ColumnFamilyDescriptor)","getMasterRpcServices()","createTable(TableDescriptor, byte[][], long, long)","getLockManager()","modifyNamespace(NamespaceDescriptor, long, long)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","createMetaBootstrap()","sanityCheckTableDescriptor(TableDescriptor)","getHFileCleaner()","getNamespace(String)","getNamespaces()","getMasterMetrics()","getLogCleaner()","listTableNames(String, String, boolean)","stopChores()","initQuotaManager()","getMasterActiveTime()","createProcedureExecutor()","addReplicationPeer(String, ReplicationPeerConfig, boolean)","remoteProcedureFailed(long, RemoteProcedureException)","getReplicationPeerConfig(String)","getHbckChore()","filterTablesByRegex(Collection, Pattern)","abortProcedure(long, boolean)","getServerManager()","getMasterStartTime()","initializeZKBasedSystemTrackers()","listTableDescriptors(String, String, List, boolean)","reportMobCompactionEnd(TableName)","initMobCleaner()","checkEncryption(Configuration, TableDescriptor)","checkIfShouldMoveSystemRegionAsync()","getZooKeeper()","startActiveMasterManager(int)","remoteProcedureCompleted(long)","getProcessName()","configureInfoServer()","createServerManager(MasterServices)","getRegionNormalizer()","getDumpServlet()","setInitialized(boolean)","requestMobCompaction(TableName, List, boolean)","stopMaster()","listTableNamesByNamespace(String)","login(UserProvider, String)","deleteColumn(TableName, byte[], long, long)","balance(boolean)","getMasterWalManager()","getCatalogJanitor()","registerService(Service)"],"org.apache.hadoop.hbase.security.access.Permission":["equals(Object)","toString()","getActions()","setActions(Action[])","write(DataOutput)","implies(Action)","getVersion()","readFields(DataInput)","hashCode()"],"org.apache.hadoop.hbase.io.hfile.HFileBlockIndex.BlockIndexWriter":["shouldWriteBlock(boolean)","getInlineBlockType()","writeIntermediateLevel(FSDataOutputStream, BlockIndexChunk)","getTotalUncompressedSize()","expectNumLevels(int)","addEntry(byte[], long, int)","writeInlineBlock(DataOutput)","ensureSingleLevel()","setMinIndexNumEntries(int)","writeIntermediateBlock(FSDataOutputStream, BlockIndexChunk, BlockIndexChunk)","getNumRootEntries()","getCacheOnWrite()","writeSingleLevelIndex(DataOutput, String)","blockWritten(long, int, int)","setMaxChunkSize(int)","getNumLevels()","writeIndexBlocks(FSDataOutputStream)"],"org.apache.hadoop.hbase.io.hfile.FixedFileTrailer":["extractMajorVersion(int)","extractMinorVersion(int)","getMaxTrailerSize()","serialize(DataOutputStream)","expectMajorVersion(int)","getFirstDataBlockOffset()","deserializeFromWritable(DataInput)","setTotalUncompressedBytes(long)","getMinorVersion()","append(StringBuilder, String)","getLoadOnOpenDataOffset()","getMetaIndexCount()","setCompressionCodec(Compression.Algorithm)","getTrailerSize()","setEncryptionKey(byte[])","getNumDataIndexLevels()","getComparatorClass(String)","createComparator(String)","toString()","getCompressionCodec()","serializeAsPB(DataOutputStream)","createComparator()","getTrailerSize(int)","setComparatorClass(Class)","toProtobuf()","expectMinorVersion(int)","getEntryCount()","getMajorVersion()","getComparatorClassName()","setUncompressedDataIndexSize(long)","getHBase1CompatibleName(String)","getTotalUncompressedBytes()","expectAtLeastMajorVersion(int)","setDataIndexCount(int)","getDataIndexCount()","setMetaIndexCount(int)","setLoadOnOpenOffset(long)","getEncryptionKey()","getUncompressedDataIndexSize()","setFileInfoOffset(long)","deserialize(DataInputStream)","setLastDataBlockOffset(long)","materializeVersion(int, int)","setEntryCount(long)","getFileInfoOffset()","setNumDataIndexLevels(int)","setFirstDataBlockOffset(long)","computeTrailerSizeByVersion()","readFromStream(FSDataInputStream, long)","getLastDataBlockOffset()","deserializeFromPB(DataInputStream)"],"org.apache.hadoop.hbase.security.visibility.ZKVisibilityLabelWatcher":["refreshUserAuthsCache(byte[])","nodeCreated(String)","refreshVisibilityLabelsCache(byte[])","start()","nodeDataChanged(String)","writeToZookeeper(byte[], boolean)","nodeDeleted(String)","nodeChildrenChanged(String)"],"org.apache.hadoop.hbase.util.ModifyRegionUtils":["createRegions(Configuration, Path, TableDescriptor, RegionInfo[], RegionFillTask)","editRegions(ThreadPoolExecutor, Collection, RegionEditTask)","createRegionInfos(TableDescriptor, byte[][])","createRegions(ThreadPoolExecutor, Configuration, Path, TableDescriptor, RegionInfo[], RegionFillTask)","createRegion(Configuration, Path, TableDescriptor, RegionInfo, RegionFillTask)","getRegionOpenAndInitThreadPool(Configuration, String, int)"],"org.apache.hadoop.hbase.replication.regionserver.WALEntryStream":["peek()","hasNext()","seek()","next()","tryAdvanceEntry()","checkReader()","checkAllBytesParsed()","setCurrentPath(Path)","getArchivedLog(Path)","close()","resetReader()","setPosition(long)","getCurrentPath()","recoverLease(Configuration, Path)","openReader(Path)","getCurrentPathStat()","openNextLog()","closeReader()","readNextEntryAndRecordReaderPosition()","dequeueCurrentLog()","getPosition()","handleFileNotFound(Path, FileNotFoundException)","reset()","currentTrailerSize()"],"org.apache.hadoop.hbase.io.hfile.CompoundBloomFilterWriter":["shouldWriteBlock(boolean)","allocateNewChunk()","getInlineBlockType()","getPrevCell()","append(Cell)","writeInlineBlock(DataOutput)","enqueueReadyChunk(boolean)","beforeShipped()","getDataWriter()","getCacheOnWrite()","compactBloom()","blockWritten(long, int, int)","getMetaWriter()"],"org.apache.hadoop.hbase.regionserver.HRegionFileSystem":["getRegionDir()","createDirOnFileSystem(FileSystem, Configuration, Path)","generateUniqueName(String)","splitStoreFile(RegionInfo, String, HStoreFile, byte[], boolean, RegionSplitPolicy)","setStoragePolicy(String, String)","getTableDir()","getMergesDir(RegionInfo)","getStoreFiles(String)","hasReferences(TableDescriptor)","createTempName()","getRegionInfoFileContent(RegionInfo)","cleanupMergesDir()","mkdirs(FileSystem, Configuration, Path)","getSplitsDir()","cleanupMergedRegion(RegionInfo)","loadRegionInfoFileContent(FileSystem, Path)","writeRegionInfoOnFilesystem(boolean)","getFileSystem()","deleteFamily(String)","logFileSystemState(Logger)","getStoreDir(String)","writeRegionInfoFileContent(Configuration, FileSystem, Path, byte[])","hasReferences(String)","createDir(Path)","deleteDir(Path)","getStoreFileInfo(String, String)","mergeStoreFile(RegionInfo, String, HStoreFile, Path)","cleanupAnySplitDetritus()","checkRegionInfoOnFilesystem()","createMergesDir()","createStoreDir(String)","getStoreFilesLocatedStatus(HRegionFileSystem, String, boolean)","getStoreFilePath(String, String)","openRegionFromFileSystem(Configuration, FileSystem, Path, RegionInfo, boolean)","commitDaughterRegion(RegionInfo)","removeStoreFiles(String, Collection)","getRegionInfoForFS()","sleepBeforeRetry(String, int)","cleanupDaughterRegion(RegionInfo)","removeStoreFile(String, Path)","createRegionOnFileSystem(Configuration, FileSystem, Path, RegionInfo)","sleepBeforeRetry(String, int, int, int)","getMergesDir()","createTempName(String)","cleanupSplitsDir()","getStoreFiles(String, boolean)","deleteRegionFromFileSystem(Configuration, FileSystem, Path, RegionInfo)","cleanupTempDir()","commitStoreFile(Path, Path)","writeRegionInfoOnFilesystem(byte[], boolean)","commitMergedRegion(RegionInfo)","preCommitStoreFile(String, Path, long, boolean)","commitStoreFile(String, Path)","getStoreFiles(byte[])","getTempDir()","getStoragePolicyName(String)","rename(Path, Path)","getFamilies()","bulkLoadStoreFile(String, Path, long)","createSplitsDir(RegionInfo, RegionInfo)","getSplitsDir(RegionInfo)","getRegionInfo()"],"org.apache.hadoop.hbase.regionserver.wal.AbstractProtobufLogWriter":["buildWALHeader(Configuration, WALHeader.Builder)","secureInitAfterHeader(boolean, Encryptor)","buildWALHeader0(Configuration, WALHeader.Builder)","buildWALTrailer(WALTrailer.Builder)","writeWALTrailer()","initAfterHeader(boolean)","setWALTrailer(WALTrailer)","buildSecureWALHeader(Configuration, WALHeader.Builder)","init(FileSystem, Path, Configuration, boolean, long)","initAfterHeader0(boolean)","getLength()","initializeCompressionContext(Configuration, Path)","getWriterClassName()","getCodec(Configuration, CompressionContext)","setEncryptor(Encryptor)"],"org.apache.hadoop.hbase.replication.regionserver.HBaseInterClusterReplicationEndpoint":["parseTable(String)","sleepForRetries(String, int)","parallelReplicate(CompletionService, ReplicateContext, List)","createParallelBatches(List)","decorateConf()","replicate(ReplicateContext)","replicateEntries(List, int)","createSerialBatches(List)","filterBatches(List, TableName)","createReplicator(List, int)","doStop()","createBatches(List)","init(Context)","logPeerId()","reconnectToPeerCluster()","getEstimatedEntrySize(Entry)","isPeerEnabled()","connectToPeers()","serialReplicateRegionEntries(List, int)"],"org.apache.hadoop.hbase.master.HbckChore":["loadRegionsFromFS()","disableChore()","isDisabled()","isRunning()","getCheckingEndTimestamp()","chore()","loadRegionsFromRSReport()","getInconsistentRegions()","getCheckingStartTimestamp()","loadRegionsFromInMemoryState()","runChore()","getOrphanRegionsOnRS()","getOrphanRegionsOnFS()","saveCheckResultToSnapshot()"],"org.apache.hadoop.hbase.regionserver.handler.OpenRegionHandler.PostOpenDeployTasksThread":["run()","getException()"],"org.apache.hadoop.hbase.client.RawAsyncTableImpl":["locateFinished(RegionInfo, byte[], boolean)","getReadRpcTimeout(TimeUnit)","getConfiguration()","get(List)","coprocessorService(Function, ServiceCaller, byte[])","newCaller(byte[], long)","resultSize2CacheSize(long)","mutateRow(HBaseRpcController, HRegionLocation, ClientService.Interface, RowMutations, Converter, Function)","voidMutate(List)","getName()","append(Append)","getOperationTimeout(TimeUnit)","onLocateComplete(Function, ServiceCaller, CoprocessorCallback, List, byte[], boolean, AtomicBoolean, AtomicInteger, HRegionLocation, Throwable)","newCaller(Row, long)","voidMutate(HBaseRpcController, HRegionLocation, ClientService.Interface, REQ, Converter)","delete(Delete)","toResult(HBaseRpcController, MutateResponse)","batch(List, long)","put(Put)","coprocessorService(Function, ServiceCaller, CoprocessorCallback)","batch(List)","coprocessorService(Function, ServiceCaller, RegionInfo, byte[])","put(List)","getScanTimeout(TimeUnit)","get(Get, int)","scan(Scan, AdvancedScanResultConsumer)","getScanner(Scan)","mutateRow(RowMutations)","setDefaultScanConfig(Scan)","noncedMutate(long, long, HBaseRpcController, HRegionLocation, ClientService.Interface, REQ, NoncedConverter, Converter)","scanAll(Scan)","mutate(HBaseRpcController, HRegionLocation, ClientService.Interface, REQ, Converter, Converter)","increment(Increment)","call(HBaseRpcController, HRegionLocation, ClientService.Interface, REQ, Converter, RpcCall, Converter)","get(Get)","delete(List)","checkAndMutate(byte[], byte[])","getRpcTimeout(TimeUnit)","getWriteRpcTimeout(TimeUnit)"],"org.apache.hadoop.hbase.ipc.RpcServer":["getMinSizeForReservoirUse(ByteBufferPool)","setRsRpcServices(RSRpcServices)","getRemoteIp()","getServiceInterface(List, String)","refreshAuthManager(PolicyProvider)","getServiceAndInterface(List, String)","getRemoteAddress()","getConf()","call(RpcCall, MonitoredRPCHandler)","getScheduler()","getRequestUser()","getService(List, String)","getSecretManager()","getStatus()","addCallSize(long)","createSecretManager()","isInRpcCallContext()","setSecretManager(SecretManager)","isStarted()","channelIO(ReadableByteChannel, WritableByteChannel, ByteBuffer)","initReconfigurable(Configuration)","setErrorHandler(HBaseRPCErrorHandler)","authorize(UserGroupInformation, ConnectionHeader, InetAddress)","getRequestUserName()","channelRead(ReadableByteChannel, ByteBuffer)","onConfigurationChange(Configuration)","allocateByteBuffToReadInto(ByteBufferPool, int, int)","getErrorHandler()","getMetrics()","getCurrentCall()","truncateTraceLog(String)","logResponse(Message, String, String, String, String, long, int, int, long)"],"org.apache.hadoop.hbase.master.replication.ModifyPeerProcedure":["enablePeerBeforeFinish()","suspend(long)","getState(int)","releaseLatch()","executeFromState(MasterProcedureEnv, PeerModificationState)","refreshPeer(MasterProcedureEnv, PeerOperationType)","getNewPeerConfig()","enablePeer(MasterProcedureEnv)","needReopen(TableStateManager, TableName)","nextStateAfterRefresh()","getOldPeerConfig()","getInitialState()","needSetLastPushedSequenceId(TableStateManager, TableName)","setLastPushedSequenceId(MasterProcedureEnv, ReplicationPeerConfig)","rollbackState(MasterProcedureEnv, PeerModificationState)","reopenRegions(MasterProcedureEnv)","getStateId(PeerModificationState)","setLastPushedSequenceIdForTable(MasterProcedureEnv, TableName, Map)","setTimeoutFailure(MasterProcedureEnv)","addToMap(Map, String, long, ReplicationQueueStorage)","updateLastPushedSequenceIdForSerialPeer(MasterProcedureEnv)"],"org.apache.hadoop.hbase.master.ClusterStatusPublisher.MulticastPublisher":["connect(Configuration)","publish(ClusterMetrics)","close()"],"org.apache.hadoop.hbase.master.balancer.RegionLocationFinder":["internalGetTopBlockLocation(RegionInfo)","mapHostNameToServerName(List)","getTableDescriptor(TableName)","setServices(MasterServices)","setConf(Configuration)","getConf()","setClusterMetrics(ClusterMetrics)","getCache()","getTopBlockLocations(RegionInfo, String)","getBlockDistribution(RegionInfo)","asyncGetBlockDistribution(RegionInfo)","refreshAndWait(Collection)","scheduleFullRefresh()","createCache()","getTopBlockLocations(RegionInfo)"],"org.apache.hadoop.hbase.util.HbckRegionInfo":["getHdfsEntry()","getPrimaryHRIForDeployedReplica()","getRegionName()","getModTime()","getStartKey()","getReplicaId()","getRegionNameAsString()","isSkipChecks()","setMerged(boolean)","addServer(RegionInfo, ServerName)","setMetaEntry(MetaEntry)","getHdfsHRI()","setSkipChecks(boolean)","toString()","loadHdfsRegioninfo(Configuration)","getMetaEntry()","isMerged()","getEndKey()","setHdfsEntry(HdfsEntry)","getOnlineEntries()","getTableName()","containsOnlyHdfsEdits()","getDeployedOn()","getHdfsRegionDir()","isHdfsRegioninfoPresent()"],"org.apache.hadoop.hbase.regionserver.MemStoreFlusher":["flushRegion(HRegion, boolean, boolean, FlushLifeCycleTracker)","getBiggestMemStoreOfRegionReplica(SortedMap, Set)","join()","isTooManyStoreFiles(Region)","start(UncaughtExceptionHandler)","wakeUpIfBlocking()","requestFlush(HRegion, boolean, FlushLifeCycleTracker)","getMemStoreDataSize(HRegion)","isAboveHighWaterMark()","unregisterFlushRequestListener(FlushRequestListener)","getMemStoreOffHeapSize(HRegion)","getStoreFileCount(Region)","isAboveLowWaterMark()","reclaimMemStoreMemory()","refreshStoreFilesAndReclaimMemory(Region)","notifyFlushRequest(Region, boolean)","flushOneForGlobalPressure()","logMsg(String, long, long)","interruptIfNecessary()","toString()","setGlobalMemStoreLimit(long)","wakeupFlushThread()","getUpdatesBlockedMsHighWater()","dumpQueue()","isAlive()","flushRegion(FlushRegionEntry)","getMemStoreHeapSize(HRegion)","requestDelayedFlush(HRegion, long, boolean)","getBiggestMemStoreRegion(SortedMap, Set, boolean)","registerFlushRequestListener(FlushRequestListener)","setFlushType(FlushType)","getFlushQueueSize()"],"org.apache.hadoop.hbase.io.hfile.HFileReaderImpl":["loadFileInfo()","getFileContext()","indexSize()","getBloomFilterMetadata(BlockType)","getPathOffsetEndStr(Path, long, long)","length()","getFirstKey()","getConf()","getEffectiveEncodingInCache(boolean)","getDataBlockIndexReader()","getScanner(boolean, boolean, boolean)","getCachedBlock(BlockCacheKey, boolean, boolean, boolean, boolean, BlockType, DataBlockEncoding)","getName()","unbufferStream()","returnBlock(HFileBlock)","getMetaBlock(String, boolean)","validateBlockType(HFileBlock, BlockType)","getCompressionAlgorithm()","getEntries()","getFirstRowKey()","getPath()","close()","readBlock(long, long, boolean, boolean, boolean, boolean, BlockType, DataBlockEncoding)","toString()","getGeneralBloomFilterMetadata()","getDeleteBloomFilterMetadata()","shouldIncludeMemStoreTS()","hasMVCCInfo()","checkFileVersion()","setConf(Configuration)","prefetchComplete()","getScanner(boolean, boolean)","toStringLastKey()","isDecodeMemStoreTS()","isFileInfoLoaded()","toStringFirstKey()","getLastRowKey()","createHFileContext(FSDataInputStreamWrapper, long, HFileSystem, Path, FixedFileTrailer)","getComparator()","getDataBlockEncoding()","getLastKey()","close(boolean)","midKey()","isPrimaryReplicaReader()","getMajorVersion()","getTrailer()","getUncachedBlockReader()"],"org.apache.hadoop.hbase.regionserver.HStore.StoreFlusherImpl":["getOutputFileSize()","flushCache(MonitoredTask)","abort()","getCommittedFiles()","commit(MonitoredTask)","replayFlush(List, boolean)","prepare()"],"org.apache.hadoop.hbase.client.RegionReplicaUtil":["getRegionInfoForReplica(RegionInfo, int)","compareRegionInfosWithoutReplicaId(RegionInfo, RegionInfo)","removeNonDefaultRegions(Collection)","getRegionInfoForDefaultReplica(RegionInfo)","isDefaultReplica(RegionInfo)","isReplicasForSameRegion(RegionInfo, RegionInfo)","addReplicas(TableDescriptor, List, int, int)","isDefaultReplica(int)"],"org.apache.hadoop.hbase.master.procedure.CreateTableProcedure":["executeFromState(MasterProcedureEnv, CreateTableState)","addRegionsToMeta(MasterProcedureEnv, TableDescriptor, List)","getTableOperationType()","createFsLayout(MasterProcedureEnv, TableDescriptor, List, CreateHdfsRegions)","setEnabledState(MasterProcedureEnv, TableName)","isRollbackSupported(CreateTableState)","prepareCreate(MasterProcedureEnv)","getFirstRegionInfo()","serializeStateData(ProcedureStateSerializer)","preCreate(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, CreateTableState)","moveTempDirectoryToHBaseRoot(MasterProcedureEnv, TableDescriptor, Path)","postCreate(MasterProcedureEnv)","waitInitialized(MasterProcedureEnv)","getStateId(CreateTableState)","getState(int)","acquireLock(MasterProcedureEnv)","getInitialState()","createFsLayout(MasterProcedureEnv, TableDescriptor, List)","getTableName()","setEnablingState(MasterProcedureEnv, TableName)","deserializeStateData(ProcedureStateSerializer)","updateTableDescCache(MasterProcedureEnv, TableName)","shouldWaitClientAck(MasterProcedureEnv)","addTableToMeta(MasterProcedureEnv, TableDescriptor, List)"],"org.apache.hadoop.hbase.regionserver.MemStoreCompactor":["resetStats()","createSubstitution(MemStoreCompactionStrategy.Action)","initiateCompactionStrategy(MemoryCompactionPolicy, Configuration, String)","toString()","stop()","start()","doCompaction()","releaseResources()"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationLoad":["getReplicationLoadSink()","buildReplicationLoad(List, MetricsSink)","sourceToString()","toString()","sinkToString()","calculateReplicationDelay(long, long, int)","getReplicationLoadSourceList()"],"org.apache.hadoop.hbase.quotas.RegionServerRpcQuotaManager":["checkQuota(Region, List)","checkQuota(Region, int, int, int)","start(RpcScheduler)","stop()","checkQuota(Region, OperationQuota.OperationType)","getQuotaCache()","getQuota(UserGroupInformation, TableName)","isQuotaEnabled()"],"org.apache.hadoop.hbase.regionserver.CompactSplit":["requestCompactionInternal(HRegion, HStore, String, int, boolean, CompactionLifeCycleTracker, CompactionCompleteTracker, User)","requestCompaction(HRegion, String, int, CompactionLifeCycleTracker, User)","shutdownLongCompactions()","getCompactionQueueSize()","join()","getSmallCompactionThreadNum()","requestSplit(Region, byte[])","requestSystemCompaction(HRegion, HStore, String)","requestSplit(Region, byte[], User)","requestCompactionInternal(HRegion, String, int, boolean, CompactionLifeCycleTracker, CompactionCompleteTracker, User)","getCompactionThroughputController()","clearShortCompactionsQueue()","clearLongCompactionsQueue()","getSplitQueueSize()","requestSplit(Region)","getLargeCompactionThreadNum()","waitFor(ThreadPoolExecutor, String)","registerChildren(ConfigurationManager)","getSmallCompactionQueueSize()","shouldSplitRegion()","interruptIfNecessary()","toString()","getCompleteTracker(CompactionLifeCycleTracker, IntSupplier)","getSplitThreadNum()","getLargeCompactionQueueSize()","deregisterChildren(ConfigurationManager)","dumpQueue()","requestCompaction(HRegion, HStore, String, int, CompactionLifeCycleTracker, User)","requestSystemCompaction(HRegion, String)","onConfigurationChange(Configuration)","selectCompaction(HRegion, HStore, int, CompactionLifeCycleTracker, CompactionCompleteTracker, User)","getRegionSplitLimit()"],"org.apache.hadoop.hbase.replication.master.ReplicationLogCleaner":["getDeletableFiles(Iterable)","stop(String)","setConf(Configuration, ZKWatcher)","setConf(Configuration)","isStopped()","preClean()"],"org.apache.hadoop.hbase.ipc.BlockingRpcConnection":["processResponseForConnectionHeader()","negotiateCryptoAes(RPCProtos.CryptoCipherMeta)","writeConnectionHeader()","writeConnectionHeaderPreamble(OutputStream)","disposeSasl()","shutdown()","sendRequest(Call, HBaseRpcController)","setupSaslConnection(InputStream, OutputStream)","handleSaslConnectionFailure(int, int, Exception, UserGroupInformation)","closeSocket()","run()","writeRequest(Call)","callTimeout(Call)","isActive()","setupIOstreams()","waitForWork()","readResponse()","tracedWriteRequest(Call)","handleConnectionFailure(int, int, IOException)","setupConnection()","closeConn(IOException)","cleanupConnection()"],"org.apache.hadoop.hbase.master.procedure.DisableTableProcedure":["getState(int)","getTableOperationType()","preDisable(MasterProcedureEnv, DisableTableState)","isTraceEnabled()","isRollbackSupported(DisableTableState)","setTableStateToDisabled(MasterProcedureEnv, TableName)","getInitialState()","getTableName()","prepareDisable(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","postDisable(MasterProcedureEnv, DisableTableState)","runCoprocessorAction(MasterProcedureEnv, DisableTableState)","rollbackState(MasterProcedureEnv, DisableTableState)","getStateId(DisableTableState)","setTableStateToDisabling(MasterProcedureEnv, TableName)","executeFromState(MasterProcedureEnv, DisableTableState)"],"org.apache.hadoop.hbase.client.SnapshotDescription":["getTableName()","getOwner()","getName()","getTable()","toString()","getType()","getTableNameAsString()","getCreationTime()","getVersion()"],"org.apache.hadoop.hbase.regionserver.HRegion.RegionScannerImpl":["initializeKVHeap(List, List, HRegion)","joinedHeapMayHaveData(Cell)","getMvccReadPoint()","populateResult(List, KeyValueHeap, ScannerContext, Cell)","getBatch()","resetFilters()","populateFromJoinedHeap(List, ScannerContext)","getStoreHeapForTesting()","shipped()","isFilterDone()","getMaxResultSize()","shouldStop(Cell)","filterRowKey(Cell)","initializeScanners(Scan, List)","moreCellsInRow(Cell, Cell)","nextInternal(List, ScannerContext)","incrementCountOfRowsScannedMetric(ScannerContext)","nextRow(ScannerContext, Cell)","close()","next(List)","incrementCountOfRowsFilteredMetric(ScannerContext)","handleException(List, Throwable)","reseek(byte[])","run()","filterRow()","nextRaw(List, ScannerContext)","next(List, ScannerContext)","nextRaw(List)","isFilterDoneInternal()","getRegionInfo()"],"org.apache.hadoop.hbase.executor.ExecutorService":["getExecutor(ExecutorType)","getExecutorLazily(ExecutorType, int)","startExecutorService(String, int)","getAllExecutorStatuses()","getExecutor(String)","getExecutorThreadPool(ExecutorType)","submit(EventHandler)","isExecutorServiceRunning(String)","shutdown()","startExecutorService(ExecutorType, int)"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.ExecuteProceduresRemoteCall":["run()","sendRequest(ServerName, ExecuteProceduresRequest)","dispatchServerOperations(MasterProcedureEnv, List)","remoteCallFailed(MasterProcedureEnv, IOException)","dispatchOpenRequests(MasterProcedureEnv, List)","dispatchCloseRequests(MasterProcedureEnv, List)"],"org.apache.hadoop.hbase.master.ActiveMasterManager":["nodeCreated(String)","setInfoPort(int)","hasActiveMaster()","blockUntilBecomingActiveMaster(int, MonitoredTask)","stop()","handle(String)","handleMasterNodeChange()","nodeDeleted(String)"],"org.apache.hadoop.hbase.master.DeadServer":["copyDeadServersSince(long)","isEmpty()","add(ServerName)","isProcessingServer(ServerName)","toString()","getTimeOfDeath(ServerName)","cleanPreviousInstance(ServerName)","isDeadServer(ServerName)","add(ServerName, boolean)","removeDeadServer(ServerName)","areDeadServersInProgress()","copyServerNames()","finish(ServerName)","cleanAllPreviousInstances(ServerName)","notifyServer(ServerName)","size()"],"org.apache.hadoop.hbase.wal.WALKeyImpl":["setSequenceId(long)","getMvcc()","getNonceGroup()","readFieldsFromPb(WALProtos.WALKey, WALCellCodec.ByteStringUncompressor)","getEncodedRegionName()","setWriteEntry(MultiVersionConcurrencyControl.WriteEntry)","getLogSeqNum()","getWriteTime()","hashCode()","setCompressionContext(CompressionContext)","init(byte[], TableName, long, long, List, long, long, MultiVersionConcurrencyControl, NavigableMap)","setOrigLogSeqNum(long)","internEncodedRegionName(byte[])","getNonce()","clearReplicationScope()","getClusterIds()","getSequenceId()","equals(Object)","addClusterId(UUID)","estimatedSerializedSizeOf()","toString()","getOrigLogSeqNum()","internTableName(TableName)","getReplicationScopes()","setReplicationScope(NavigableMap)","getTableName()","getOriginatingClusterId()","getBuilder(WALCellCodec.ByteStringCompressor)","compareTo(WALKey)","getWriteEntry()"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationSourceShipper":["getStartPosition()","postFinish()","setWALReader(ReplicationSourceWALReader)","sleepForRetries(String, int)","getCurrentPath()","startup(UncaughtExceptionHandler)","isFinished()","setWorkerState(WorkerState)","stopWorker()","run()","noMoreData()","cleanUpHFileRefs(WALEdit)","isActive()","getBatchEntrySizeExcludeBulkLoad(WALEntryBatch)","shipEdits(WALEntryBatch)","getCurrentPosition()","updateLogPosition(WALEntryBatch)"],"org.apache.hadoop.hbase.LocalHBaseCluster":["addMaster(Configuration, int)","addRegionServer()","join()","addRegionServer(Configuration, int)","getActiveMaster()","getConfiguration()","waitOnRegionServer(JVMClusterUtil.RegionServerThread)","getRegionServerImplementation(Configuration)","waitOnMaster(JVMClusterUtil.MasterThread)","getRegionServers()","getMasters()","startup()","getMasterImplementation(Configuration)","main(String[])","getLiveMasters()","getRegionServer(int)","waitOnMaster(int)","shutdown()","isLocal(Configuration)","addRegionServer(Configuration, int, User)","addMaster(Configuration, int, User)","waitOnRegionServer(int)","getLiveRegionServers()","getMaster(int)","addMaster()"],"org.apache.hadoop.hbase.regionserver.compactions.RatioBasedCompactionPolicy":["shouldPerformMajorCompaction(Collection)","applyCompactionPolicy(ArrayList, boolean, boolean)","createCompactionRequest(ArrayList, boolean, boolean, boolean)","needsCompaction(Collection, List)","setMinThreshold(int)"],"org.apache.hadoop.hbase.snapshot.SnapshotManifestV1.ManifestBuilder":["regionOpen(RegionInfo)","familyOpen(HRegionFileSystem, byte[])","storeFile(HRegionFileSystem, Path, StoreFileInfo)","regionClose(HRegionFileSystem)","familyClose(HRegionFileSystem, Path)"],"org.apache.hadoop.hbase.master.SnapshotOfRegionAssignmentFromMeta":["addAssignment(RegionInfo, ServerName)","addPrimaryAssignment(RegionInfo, ServerName)","getPrimaryToRegionInfoMap()","addSecondaryAssignment(RegionInfo, ServerName)","getTableToRegionMap()","getTertiaryToRegionInfoMap()","getRegionServerToRegionMap()","getRegionNameToRegionInfoMap()","getTableSet()","getExistingAssignmentPlan()","addRegion(RegionInfo)","initialize()","addTeritiaryAssignment(RegionInfo, ServerName)","getSecondaryToRegionInfoMap()","getRegionToRegionServerMap()"],"org.apache.hadoop.hbase.master.procedure.EnableTableProcedure":["postEnable(MasterProcedureEnv, EnableTableState)","getState(int)","getTableOperationType()","setTableStateToEnabled(MasterProcedureEnv, TableName)","getNumberOfReplicasFromMeta(Connection, int, List)","getRegionFromMeta(Connection, List)","preEnable(MasterProcedureEnv, EnableTableState)","getStateId(EnableTableState)","getInitialState()","getTableName()","rollbackState(MasterProcedureEnv, EnableTableState)","deserializeStateData(ProcedureStateSerializer)","executeFromState(MasterProcedureEnv, EnableTableState)","serializeStateData(ProcedureStateSerializer)","isRollbackSupported(EnableTableState)","setTableStateToEnabling(MasterProcedureEnv, TableName)","runCoprocessorAction(MasterProcedureEnv, EnableTableState)","prepareEnable(MasterProcedureEnv)"],"org.apache.hadoop.hbase.zookeeper.ZNodePaths":["isAnyMetaReplicaZNode(String)","joinZNode(String, String)","toString()","getZNodeForReplica(int)","isDefaultMetaReplicaZnode(String)","isClientReadable(String)","getMetaReplicaIdFromZnode(String)"],"org.apache.hadoop.hbase.master.assignment.SplitTableRegionProcedure":["createDaughterRegions(MasterProcedureEnv)","getTableOperationType()","writeMaxSequenceIdFile(MasterProcedureEnv)","getDaughterRegionIdTimestamp(RegionInfo)","getRegionReplication(MasterProcedureEnv)","preSplitRegion(MasterProcedureEnv)","postSplitRegion(MasterProcedureEnv)","openParentRegion(MasterProcedureEnv)","prepareSplitRegion(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, SplitTableRegionState)","getSplitRow()","getProcedureMetrics(MasterProcedureEnv)","getParentRegion()","serializeStateData(ProcedureStateSerializer)","createAssignProcedures(int, MasterProcedureEnv, List, ServerName)","checkSplittable(MasterProcedureEnv, RegionInfo, byte[])","rollbackState(MasterProcedureEnv, SplitTableRegionState)","updateMeta(MasterProcedureEnv)","toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","getState(int)","splitStoreFile(HRegionFileSystem, byte[], HStoreFile)","createUnassignProcedures(MasterProcedureEnv, int)","preSplitRegionAfterMETA(MasterProcedureEnv)","createAssignProcedures(MasterProcedureEnv, int)","getStateId(SplitTableRegionState)","getInitialState()","postRollBackSplitRegion(MasterProcedureEnv)","splitStoreFiles(MasterProcedureEnv, HRegionFileSystem)","deserializeStateData(ProcedureStateSerializer)","hasRecoveredEdits(MasterProcedureEnv, RegionInfo)","isRollbackSupported(SplitTableRegionState)","preSplitRegionBeforeMETA(MasterProcedureEnv)","assertReferenceFileCount(FileSystem, int, Path)","getParentRegionServerName(MasterProcedureEnv)"],"org.apache.hadoop.hbase.security.access.AccessController":["preDisableTable(ObserverContext, TableName)","preGetNamespaceDescriptor(ObserverContext, String)","preEnableTable(ObserverContext, TableName)","preGetProcedures(ObserverContext)","getEndpointObserver()","postModifyTable(ObserverContext, TableName, TableDescriptor)","prePrepareBulkLoad(ObserverContext)","preSetUserQuota(ObserverContext, String, String, GlobalQuotaSettings)","requireTablePermission(ObserverContext, String, TableName, byte[], byte[], Action[])","prePut(ObserverContext, Put, WALEdit, Durability)","preLockHeartbeat(ObserverContext, TableName, String)","requireGlobalPermission(ObserverContext, String, Action, String)","preDisableReplicationPeer(ObserverContext, String)","getAuthManager()","preSetTableQuota(ObserverContext, TableName, GlobalQuotaSettings)","preShutdown(ObserverContext)","preDeleteTable(ObserverContext, TableName)","preListDecommissionedRegionServers(ObserverContext)","preSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","preListSnapshot(ObserverContext, SnapshotDescription)","preCheckAndDeleteAfterRowLock(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Delete, boolean)","postGetTableDescriptors(ObserverContext, List, List, String)","preSetUserQuota(ObserverContext, String, GlobalQuotaSettings)","preCheckAndPutAfterRowLock(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Put, boolean)","preScannerNext(ObserverContext, InternalScanner, List, int, boolean)","postCreateReplicationEndPoint(ObserverContext, ReplicationEndpoint)","permissionGranted(String, User, Action, RegionCoprocessorEnvironment, Map)","preTableFlush(ObserverContext, TableName)","preScannerClose(ObserverContext, InternalScanner)","preModifyNamespace(ObserverContext, NamespaceDescriptor)","preRollWALWriterRequest(ObserverContext)","getUserPermissions(RpcController, AccessControlProtos.GetUserPermissionsRequest, RpcCallback)","preClose(ObserverContext, boolean)","preSetNamespaceQuota(ObserverContext, String, GlobalQuotaSettings)","postDelete(ObserverContext, Delete, WALEdit, Durability)","preCreateTable(ObserverContext, TableDescriptor, RegionInfo[])","checkCoveringPermission(User, OpType, RegionCoprocessorEnvironment, byte[], Map, long, Action[])","preBalance(ObserverContext)","getTableName(RegionCoprocessorEnvironment)","requireScannerOwner(InternalScanner)","preClearDeadServers(ObserverContext)","initialize(RegionCoprocessorEnvironment)","getRegionObserver()","preGetOp(ObserverContext, Get, List)","grant(RpcController, AccessControlProtos.GrantRequest, RpcCallback)","preGetReplicationPeerConfig(ObserverContext, String)","postTruncateTable(ObserverContext, TableName)","preListReplicationPeers(ObserverContext, String)","checkLockPermissions(ObserverContext, String, TableName, RegionInfo[], String)","preRequestLock(ObserverContext, String, TableName, RegionInfo[], String)","preCloneSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","postScannerClose(ObserverContext, InternalScanner)","makeFamilyMap(byte[], byte[])","preCreateNamespace(ObserverContext, NamespaceDescriptor)","requireGlobalPermission(ObserverContext, String, Action, TableName, Map)","postListNamespaceDescriptors(ObserverContext, List)","preAssign(ObserverContext, RegionInfo)","postDeleteTable(ObserverContext, TableName)","preSetSplitOrMergeEnabled(ObserverContext, boolean, MasterSwitchType)","isCellAuthorizationSupported(Configuration)","preIncrementAfterRowLock(ObserverContext, Increment)","checkForReservedTagPresence(User, Mutation)","preFlush(ObserverContext, FlushLifeCycleTracker)","preRestoreSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","start(CoprocessorEnvironment)","preAddReplicationPeer(ObserverContext, String, ReplicationPeerConfig)","permissionGranted(OpType, User, RegionCoprocessorEnvironment, Map, Action[])","preModifyTable(ObserverContext, TableName, TableDescriptor)","preAbortProcedure(ObserverContext, long)","preGetLocks(ObserverContext)","preAppendAfterRowLock(ObserverContext, Append)","preDecommissionRegionServers(ObserverContext, List, boolean)","preUpdateReplicationPeerConfig(ObserverContext, String, ReplicationPeerConfig)","postMutationBeforeWAL(ObserverContext, MutationType, Mutation, Cell, Cell)","preBulkLoadHFile(ObserverContext, List)","requireNamespacePermission(ObserverContext, String, String, TableName, Map, Action[])","preCompact(ObserverContext, Store, InternalScanner, ScanType, CompactionLifeCycleTracker, CompactionRequest)","preSetUserQuota(ObserverContext, String, TableName, GlobalQuotaSettings)","preScannerOpen(ObserverContext, Scan)","preGetTableDescriptors(ObserverContext, List, List, String)","addCellPermissions(byte[], Map)","preClearCompactionQueues(ObserverContext)","requirePermission(ObserverContext, String, Action)","preCheckAndDelete(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Delete, boolean)","preExecuteProcedures(ObserverContext)","getActiveUser(ObserverContext)","getRegion(RegionCoprocessorEnvironment)","postDeleteNamespace(ObserverContext, String)","preDelete(ObserverContext, Delete, WALEdit, Durability)","checkSystemOrSuperUser(User)","getServices()","preRemoveReplicationPeer(ObserverContext, String)","postAbortProcedure(ObserverContext)","preExists(ObserverContext, Get, boolean)","preIncrement(ObserverContext, Increment)","preCheckAndPut(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Put, boolean)","postPut(ObserverContext, Put, WALEdit, Durability)","revoke(RpcController, AccessControlProtos.RevokeRequest, RpcCallback)","requirePermission(ObserverContext, String, TableName, byte[], byte[], Action[])","preBatchMutate(ObserverContext, MiniBatchOperationInProgress)","preDeleteNamespace(ObserverContext, String)","postOpen(ObserverContext)","postEndpointInvocation(ObserverContext, Service, String, Message, Message.Builder)","postRollWALWriterRequest(ObserverContext)","postScannerFilterRow(ObserverContext, InternalScanner, Cell, boolean)","preUnassign(ObserverContext, RegionInfo, boolean)","preRecommissionRegionServer(ObserverContext, ServerName, List)","preCleanupBulkLoad(ObserverContext)","preAppend(ObserverContext, Append)","createACLTable(Admin)","requireAccess(ObserverContext, String, TableName, Action[])","postGetTableNames(ObserverContext, List, String)","preDeleteSnapshot(ObserverContext, SnapshotDescription)","hasFamilyQualifierPermission(User, Action, RegionCoprocessorEnvironment, Map)","requireNamespacePermission(ObserverContext, String, String, Action[])","preTruncateTable(ObserverContext, TableName)","getTableName(Region)","preMergeRegions(ObserverContext, RegionInfo[])","checkPermissions(RpcController, AccessControlProtos.CheckPermissionsRequest, RpcCallback)","preStopRegionServer(ObserverContext)","getMasterObserver()","preStopMaster(ObserverContext)","stop(CoprocessorEnvironment)","preMove(ObserverContext, RegionInfo, ServerName, ServerName)","getRegion()","postStartMaster(ObserverContext)","postScannerOpen(ObserverContext, Scan, RegionScanner)","preSplitRegion(ObserverContext, TableName, byte[])","internalPreRead(ObserverContext, Query, OpType)","preBalanceSwitch(ObserverContext, boolean)","postCompletedCreateTableAction(ObserverContext, TableDescriptor, RegionInfo[])","preEnableReplicationPeer(ObserverContext, String)","getRegionServerObserver()","preReplicateLogEntries(ObserverContext)","updateACL(RegionCoprocessorEnvironment, Map)","getBulkLoadObserver()","preEndpointInvocation(ObserverContext, Service, String, Message)","preOpen(ObserverContext)","preRegionOffline(ObserverContext, RegionInfo)"],"org.apache.hadoop.hbase.security.access.AccessControlFilter":["equals(Object)","reset()","parseFrom(byte[])","filterRowKey(Cell)","toByteArray()","filterCell(Cell)","hashCode()"],"org.apache.hadoop.hbase.regionserver.SplitRequest":["run()","toString()","doSplitting()","requestRegionSplit()"],"org.apache.hadoop.hbase.client.AsyncBufferedMutatorBuilderImpl":["setRpcTimeout(long, TimeUnit)","setRetryPause(long, TimeUnit)","setStartLogErrorsCnt(int)","setWriteBufferPeriodicFlush(long, TimeUnit)","setOperationTimeout(long, TimeUnit)","build()","setMaxAttempts(int)","setWriteBufferSize(long)"],"org.apache.hadoop.hbase.util.compaction.MajorCompactionRequest":["newRequest(Configuration, RegionInfo, Set, long)","setStores(Set)","toString()","getReferenceFilePaths(FileSystem, Path)","getFileSystem(Connection)","getStoresRequiringCompaction(Set)","getConnection(Configuration)","createRequest(Configuration, Set)","familyHasReferenceFile(HRegionFileSystem, String)","getStores()","getRegion()"],"org.apache.hadoop.hbase.regionserver.handler.OpenRegionHandler":["openRegion()","cleanupFailedOpen(HRegion)","doCleanUpOnFailedOpen(HRegion)","isRegionStillOpening()","updateMeta(HRegion, long)","isRegionStillOpening(RegionInfo, RegionServerServices)","getRegionInfo()","process()"],"org.apache.hadoop.hbase.regionserver.CellFlatMap":["pollFirstEntry()","descendingMap()","pollLastEntry()","firstEntry()","lastKey()","navigableKeySet()","higherKey(Cell)","containsValue(Object)","headMap(Cell, boolean)","lastEntry()","comparator()","tailMap(Cell)","higherEntry(Cell)","remove(Object)","putAll(Map)","values()","floorKey(Cell)","firstKey()","subMap(Cell, Cell)","ceilingKey(Cell)","descendingKeySet()","find(Cell)","clear()","tailMap(Cell, boolean)","isEmpty()","get(Object)","put(Cell, Cell)","subMap(Cell, boolean, Cell, boolean)","lowerKey(Cell)","keySet()","headMap(Cell)","lowerEntry(Cell)","ceilingEntry(Cell)","floorEntry(Cell)","entrySet()","getValidIndex(Cell, boolean, boolean)","size()","containsKey(Object)"],"org.apache.hadoop.hbase.ipc.SimpleRpcScheduler":["getPriorityQueueLength()","getWriteQueueLength()","start()","getActiveWriteRpcHandlerCount()","getActiveScanRpcHandlerCount()","getReadQueueLength()","getActiveRpcHandlerCount()","getActiveReadRpcHandlerCount()","init(Context)","getMetaPriorityQueueLength()","onConfigurationChange(Configuration)","getGeneralQueueLength()","getNumLifoModeSwitches()","getReplicationQueueLength()","getCallQueueInfo()","stop()","dispatch(CallRunner)","getNumGeneralCallsDropped()","getScanQueueLength()"],"org.apache.hadoop.hbase.client.RegionInfoBuilder.MutableRegionInfo":["getShortNameToLog()","isMetaRegion()","checkReplicaId(int)","checkTableName(TableName)","getRegionName()","checkStartKey(byte[])","isSplitParent()","getStartKey()","hashCode()","getEncodedName()","getReplicaId()","compareTo(RegionInfo)","getRegionNameAsString()","generateHashCode(TableName, byte[], byte[], long, int, boolean, byte[])","containsRange(byte[], byte[])","setSplit(boolean)","equals(Object)","getTable()","containsRow(byte[])","toString()","getEndKey()","setOffline(boolean)","checkEndKey(byte[])","getRegionId()","isSplit()","getEncodedNameAsBytes()","isOffline()"],"org.apache.hadoop.hbase.io.hfile.HFilePrettyPrinter.KeyValueStatsCollector":["collectRow()","toString()","collect(Cell)","finish()"],"org.apache.hadoop.hbase.util.JsonMapper":["writeMapAsString(Map)","writeObjectAsString(Object)"],"org.apache.hadoop.hbase.replication.regionserver.RegionReplicaReplicationEndpoint.RegionReplicaOutputSink":["finishWritingAndClose()","append(RegionEntryBuffer)","getSkippedEditsCounter()","requiresReplication(TableName, List)","keepRegionEvent(Entry)","flush()","getOutputCounts()","getNumberOfRecoveredRegions()"],"org.apache.hadoop.hbase.client.RawAsyncHBaseAdmin":["snapshot(SnapshotDescription)","newAdminCaller()","clearCompactionQueues(ServerName, Set)","listTableDescriptorsByNamespace(String)","clearBlockCache(TableName)","majorCompactRegionServer(ServerName)","deleteSnapshots()","removeReplicationPeerTableCFs(String, Map)","modifyTable(TableDescriptor)","compactRegion(byte[], byte[], boolean)","isCleanerChoreEnabled()","assign(byte[])","getClusterMetrics()","stopRegionServer(ServerName)","checkRegionsAndGetTableName(byte[], byte[])","listTableSnapshots(Pattern)","isSnapshotFinished(SnapshotDescription)","getCompactionStateForRegion(byte[])","listTableDescriptors(Pattern, boolean)","getQuota(QuotaFilter)","restoreSnapshot(String)","decommissionRegionServers(List, boolean)","getTableDescriptors(GetTableDescriptorsRequest)","getRegionLocation(byte[])","compareTableWithPeerCluster(TableName, TableDescriptor, ReplicationPeerDescription, AsyncAdmin)","isSplitOrMergeOn(MasterSwitchType)","restoreSnapshot(String, boolean)","setQuota(QuotaSettings)","verifySplitKeys(byte[][])","internalRestoreSnapshot(String, TableName)","shutdown()","deleteTableSnapshots(Pattern)","createTable(TableDescriptor, byte[][])","listReplicatedTableCFs()","execProcedure(String, String, Map)","removeReplicationPeer(String)","normalize()","updateConfiguration(ServerName)","deleteTable(TableName)","toEncodeRegionName(byte[])","getRegionInfo(byte[])","isProcedureFinished(String, String, Map)","procedureCall(PREQ, MasterRpcCall, Converter, ProcedureBiConsumer)","getSecurityCapabilities()","listSnapshots(Pattern)","listTableSnapshots(Pattern, Pattern)","getClusterMetrics(EnumSet)","isTableAvailable(TableName, Optional)","listDecommissionedRegionServers()","majorCompact(TableName, byte[], CompactType)","compareRegionsWithSplitKeys(List, byte[][])","compact(TableName, byte[], CompactType)","isTableDisabled(TableName)","runCatalogJanitor()","compactRegion(byte[])","isBalancerEnabled()","recommissionRegionServer(ServerName, List)","majorCompactRegion(byte[], byte[])","newMasterCaller()","listTableNames(Pattern, boolean)","rollWALWriter(ServerName)","modifyColumnFamily(TableName, ColumnFamilyDescriptor)","listNamespaceDescriptors()","newServerCaller()","clearBlockCache(ServerName, List)","addColumnFamily(TableName, ColumnFamilyDescriptor)","deleteColumnFamily(TableName, byte[])","deleteTableSnapshots(Pattern, Pattern)","balancerSwitch(boolean)","splitRegion(byte[])","compact(TableName, byte[], boolean, CompactType)","split(RegionInfo, byte[])","clearDeadServers(List)","truncateTable(TableName, boolean)","flush(TableName)","splitSwitch(boolean)","getRegions(ServerName)","modifyNamespace(NamespaceDescriptor)","compactRegionServer(ServerName)","mergeRegions(byte[], byte[], boolean)","getProcedureResult(long, CompletableFuture, int)","runCleanerChore()","appendReplicationPeerTableCFs(String, Map)","flush(ServerName, RegionInfo)","createTable(TableDescriptor, byte[], byte[], int)","majorCompactRegion(byte[])","cloneTableSchema(TableName, TableName, boolean)","split(TableName)","listReplicationPeers()","enableReplicationPeer(String)","getLastMajorCompactionTimestampForRegion(byte[])","getRegionMetrics(ServerName)","isCatalogJanitorEnabled()","getRegionMetrics(ServerName, TableName)","unassign(byte[], boolean)","waitProcedureResult(CompletableFuture)","getLastMajorCompactionTimestamp(TableName)","deleteSnapshot(String)","getLocks()","coprocessorService(Function, ServiceCaller)","getDescriptor(TableName)","execProcedureWithReturn(String, String, Map)","listReplicationPeers(ListReplicationPeersRequest)","getRegions(TableName)","getSplitKeys(byte[], byte[], int)","failedFuture(Throwable)","isSplitEnabled()","enableTableReplication(TableName)","compactRegion(byte[], byte[])","compact(ServerName, RegionInfo, boolean, byte[])","flushRegionServer(ServerName)","updateConfiguration()","isMasterInMaintenanceMode()","normalizerSwitch(boolean)","majorCompact(TableName, CompactType)","checkAndGetTableName(byte[], AtomicReference, CompletableFuture)","listTableNames(boolean)","createTable(TableDescriptor)","disableTable(TableName)","getCompletedSnapshots(Pattern)","move(byte[])","disableReplicationPeer(String)","listSnapshots()","getRegionMetrics(GetRegionLoadRequest, ServerName)","flushRegion(byte[])","getTableHRegionLocations(TableName)","isTableAvailable(TableName, byte[][])","catalogJanitorSwitch(boolean)","isTableEnabled(TableName)","deleteSnapshots(Pattern)","tableExists(TableName)","internalDeleteSnapshots(Pattern, Pattern)","setTableReplication(TableName, boolean)","getProcedures()","isNormalizerEnabled()","isMergeEnabled()","cloneSnapshot(String, TableName)","trySyncTableToPeerCluster(TableName, byte[][], ReplicationPeerDescription)","compact(TableName, CompactType)","cleanerChoreSwitch(boolean)","completeConditionalOnFuture(CompletableFuture, CompletableFuture)","adminCall(HBaseRpcController, AdminService.Interface, PREQ, AdminRpcCall, Converter)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","move(byte[], ServerName)","createNamespace(NamespaceDescriptor)","addReplicationPeer(String, ReplicationPeerConfig, boolean)","getReplicationPeerConfig(String)","listTableDescriptors(boolean)","offline(byte[])","abortProcedure(long, boolean)","mergeSwitch(boolean)","disableTableReplication(TableName)","getTableSplits(TableName)","moveRegion(MoveRegionRequest)","checkAndSyncTableToPeerClusters(TableName, byte[][])","enableTable(TableName)","getNamespaceDescriptor(String)","splitRegion(byte[], byte[])","restoreSnapshot(String, TableName, boolean)","completeExceptionally(CompletableFuture, Throwable)","isTableAvailable(TableName)","listReplicationPeers(Pattern)","createTable(TableName, CreateTableRequest)","internalDeleteSnapshot(SnapshotDescription)","split(TableName, byte[])","listTableNamesByNamespace(String)","compactRegionServer(ServerName, boolean)","stopMaster()","deleteNamespace(String)","setSplitOrMergeOn(boolean, MasterSwitchType)","getCompletedSnapshots(Pattern, Pattern)","coprocessorService(Function, ServiceCaller, ServerName)","getTableNames(GetTableNamesRequest)","getCompactionState(TableName, CompactType)","call(HBaseRpcController, MasterService.Interface, PREQ, MasterRpcCall, Converter)","balance(boolean)"],"org.apache.hadoop.hbase.security.SaslUtil":["initSaslProperties(String)","encodeIdentifier(byte[])","decodeIdentifier(String)","safeDispose(SaslClient)","safeDispose(SaslServer)","splitKerberosName(String)","encodePassword(byte[])","getQop(String)"],"org.apache.hadoop.hbase.ipc.ServerCall":["incrementResponseCellSize(long)","toShortString()","getResponseExceptionSize()","getPriority()","disconnectSince()","getCellScanner()","getResponseCellSize()","getRemoteAddress()","releaseByWAL()","setExceptionResponse(Throwable, String, ResponseHeader.Builder)","getTimeout()","release(int)","getResponseBlockSize()","getRequestUser()","getClientVersionInfo()","getParam()","getService()","incrementResponseBlockSize(long)","setResponse(Message, CellScanner, Throwable, String)","incrementResponseExceptionSize(long)","isClientCellBlockSupported()","writeToCOS(Message, Message, int, ByteBuffer)","setStartTime(long)","getHeader()","toString()","getReceiveTime()","getStartTime()","createHeaderAndMessageBytes(Message, Message, int, int)","getSize()","setCallBack(RpcCallback)","retainByWAL()","cleanup()","getRemotePort()","wrapWithSasl(BufferChain)","isRetryImmediatelySupported()","done()","createHeaderAndMessageBytes(Message, Message, int, List)","getDeadline()","getMethod()","getResponse()"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationSink":["decorateConf()","getConnection()","addToHashMultiMap(Map, K1, K2, V)","addNewTableEntryInMap(Map, byte[], String, String)","stopReplicationSinkServices()","getStats()","getHFilePath(TableName, BulkLoadDescriptor, String, byte[])","isNewRowOrType(Cell, Cell)","buildBulkLoadHFileMap(Map, TableName, BulkLoadDescriptor)","getSinkMetrics()","replicateEntries(List, CellScanner, String, String, String)","toUUID(HBaseProtos.UUID)","batch(TableName, Collection)","addFamilyAndItsHFilePathToTableInMap(byte[], String, List)","setupWALEntrySinkFilter()"],"org.apache.hadoop.hbase.regionserver.MetricsRegionServer":["updateFlush(long, long, long)","createTableMetrics(Configuration)","updateSplitTime(long)","incrSplitRequest()","updatePut(TableName, long)","updateCheckAndDelete(long)","updateGet(TableName, long)","updateWriteQueryMeter(TableName, long)","getRegionServerWrapper()","incrementRegionSizeReportingChoreTime(long)","updateDeleteBatch(TableName, long)","updateIncrement(TableName, long)","getMetricsSource()","updateScanTime(TableName, long)","updateWriteQueryMeter(TableName)","updateAppend(TableName, long)","updateScanSize(TableName, long)","updateReplay(long)","updateReadQueryMeter(TableName)","incrSplitSuccess()","updateCheckAndPut(long)","incrementNumRegionSizeReportsSent(long)","updatePutBatch(TableName, long)","updateBulkLoad(long)","updateCompaction(boolean, long, int, int, long, long)","updateReadQueryMeter(TableName, long)","updateDelete(TableName, long)"],"org.apache.hadoop.hbase.mob.MobFile":["readCell(Cell, boolean, long)","getFileName()","readCell(Cell, boolean)","getScanner()","open()","create(FileSystem, Path, Configuration, CacheConfig)","close()"],"org.apache.hadoop.hbase.security.HBaseSaslRpcServer":["dispose()","getNegotiatedQop()","evaluateResponse(byte[])","getAuthorizationID()","unwrap(byte[], int, int)","isComplete()","wrap(byte[], int, int)","getIdentifier(String, SecretManager)","getAttemptingUser()"],"org.apache.hadoop.hbase.regionserver.compactions.CompactionConfiguration":["getMinCompactSize()","setMinFilesToCompact(int)","toString()","getCompactionRatio()","getOffPeakMaxCompactSize()","getMaxCompactSize(boolean)","getThrottlePoint()","getMinLocalityToForceCompact()","getMaxFilesToCompact()","getMaxCompactSize()","getDateTieredIncomingWindowMin()","getMajorCompactionJitter()","getCompactionRatioOffPeak()","getCompactionPolicyForDateTieredWindow()","getDateTieredMaxStoreFileAgeMillis()","useDateTieredSingleOutputForMinorCompaction()","getDateTieredCompactionWindowFactory()","getMinFilesToCompact()","getMajorCompactionPeriod()"],"org.apache.hadoop.hbase.client.ConnectionFactory":["createConnection()","createConnection(Configuration, ExecutorService)","createAsyncConnection(Configuration)","createAsyncConnection()","createAsyncConnection(Configuration, User)","createConnection(Configuration)","createConnection(Configuration, User)","createConnection(Configuration, ExecutorService, User)"],"org.apache.hadoop.hbase.regionserver.AbstractMemStore":["add(Iterable, MemStoreSizing)","upsert(Iterable, long, MemStoreSizing)","toString()","getSnapshot()","getConfiguration()","dump(Logger)","timeOfOldestEdit()","add(Cell, MemStoreSizing)","deepCopyIfNeeded(Cell)","maybeCloneWithAllocator(Cell, boolean)","setOldestEditTimeToNow()","addToScanners(List, long, List)","upsert(Cell, long, MemStoreSizing)","getComparator()","addToScanners(Segment, long, List)","getNextRow(Cell, NavigableSet)","internalAdd(Cell, boolean, MemStoreSizing)","resetActive()","getSnapshotSize()","getActive()","getLowest(Cell, Cell)","clearSnapshot(long)"],"org.apache.hadoop.hbase.client.AsyncTableRegionLocator":["getRegionLocation(byte[])","getRegionLocation(byte[], boolean)","getRegionLocation(byte[], int)"],"org.apache.hadoop.hbase.quotas.FileArchiverNotifierImpl":["getSizeOfStoreFile(TableName, String, String, String)","toString()","computeSnapshotSizes(List)","getSizeOfStoreFiles(TableName, Set)","bucketFilesToSnapshot(String, Map, Map)","persistSnapshotSizes(Table, List)","addArchivedFiles(Set)","getLockForNamespace(String)","getSizeOfStoreFile(TableName, StoreFileReference)","getSnapshotSizeFromResult(Result)","getStoreFilesFromSnapshot(SnapshotManifest, Predicate)","computeAndStoreSnapshotSizes(Collection)","getPreviousNamespaceSnapshotSize(Table, String)","getLastFullCompute()","groupArchivedFiledBySnapshotAndRecordSize(List, Set)","persistSnapshotSizeChanges(Map)"],"org.apache.hadoop.hbase.regionserver.wal.ProtobufLogWriter":["writeMagicAndWALHeader(byte[], WALHeader)","getOutputStreamForCellEncoder()","initOutput(FileSystem, Path, boolean, int, short, long)","append(Entry)","sync(boolean)","writeWALTrailerAndMagic(WALTrailer, byte[])","getStream()","close()"],"org.apache.hadoop.hbase.client.Admin":["balancer()","getRegionMetrics(ServerName)","setSplitOrMergeEnabled(boolean, boolean, MasterSwitchType[])","balancer(boolean)","addReplicationPeerAsync(String, ReplicationPeerConfig)","runCatalogScan()","getClusterStatus()","getMasterCoprocessors()","getClusterMetrics()","getRegionServers()","getMasterCoprocessorNames()","getMaster()","addColumn(TableName, ColumnFamilyDescriptor)","enableCatalogJanitor(boolean)","execProcedureWithRet(String, String, Map)","setCleanerChoreRunning(boolean)","setNormalizerRunning(boolean)","setBalancerRunning(boolean, boolean)","takeSnapshotAsync(SnapshotDescription)","isSplitOrMergeEnabled(MasterSwitchType)","modifyColumn(TableName, ColumnFamilyDescriptor)","addReplicationPeer(String, ReplicationPeerConfig)","getMasterInfoPort()","compactRegionServer(ServerName, boolean)","listDeadServers()","getBackupMasters()"],"org.apache.hadoop.hbase.master.assignment.RegionStateStore":["getRegionState(Result, int)","splitRegion(RegionInfo, RegionInfo, RegionInfo, ServerName)","getTableDescriptor(TableName)","mergeRegions(RegionInfo, RegionInfo[], ServerName)","updateUserRegionLocation(RegionInfo, State, ServerName, long, long)","updateRegionLocation(RegionInfo, State, Put)","getRegionServer(Result, int)","getRegionReplication(TableDescriptor)","hasGlobalReplicationScope(TableName)","hasGlobalReplicationScope(TableDescriptor)","getOpenSeqNumForParentRegion(RegionInfo)","visitMeta(RegionStateVisitor)","getStateColumn(int)","updateRegionLocation(RegionStates.RegionStateNode)","deleteRegions(List)","visitMetaEntry(RegionStateVisitor, Result)","updateMetaLocation(RegionInfo, ServerName, State)","deleteRegion(RegionInfo)","getServerNameColumn(int)"],"org.apache.hadoop.hbase.wal.WALKey":["toStringMap()","estimatedSerializedSizeOf()","getNonceGroup()","getNonce()"],"org.apache.hadoop.hbase.snapshot.SnapshotDescriptionUtils":["getWorkingSnapshotDir(SnapshotDescription, Path)","readSnapshotInfo(FileSystem, Path)","completeSnapshot(SnapshotDescription, Path, Path, FileSystem)","getCompletedSnapshotDir(SnapshotDescription, Path)","isSecurityAvailable(Configuration)","validate(SnapshotDescription, Configuration)","writeAclToSnapshotDescription(SnapshotDescription, Configuration)","getWorkingSnapshotDir(String, Path)","writeSnapshotInfo(SnapshotDescription, Path, FileSystem)","getMaxMasterTimeout(Configuration, SnapshotDescription.Type, long)","getCompletedSnapshotDir(Path, String)","getSnapshotRootDir(Path)","isSnapshotOwner(org.apache.hadoop.hbase.client.SnapshotDescription, User)","getWorkingSnapshotDir(Path)","getCompletedSnapshotDir(String, Path)","getSnapshotsDir(Path)"],"org.apache.hadoop.hbase.client.RawAsyncTableImpl.CheckAndMutateBuilderImpl":["ifNotExists()","timeRange(TimeRange)","thenPut(Put)","qualifier(byte[])","ifMatches(CompareOperator, byte[])","preCheck()","thenMutate(RowMutations)","thenDelete(Delete)"],"org.apache.hadoop.hbase.snapshot.SnapshotReferenceUtil":["verifySnapshot(Configuration, FileSystem, SnapshotManifest)","visitRegionStoreFiles(SnapshotRegionManifest, StoreFileVisitor)","verifyStoreFile(Configuration, FileSystem, Path, SnapshotDescription, RegionInfo, String, SnapshotRegionManifest.StoreFile)","getHFileNames(Configuration, FileSystem, Path)","visitTableStoreFiles(Configuration, FileSystem, Path, SnapshotDescription, StoreFileVisitor)","verifySnapshot(Configuration, FileSystem, Path, SnapshotDescription)","visitReferencedFiles(Configuration, FileSystem, Path, SnapshotDescription, SnapshotVisitor)","concurrentVisitReferencedFiles(Configuration, FileSystem, SnapshotManifest, ExecutorService, StoreFileVisitor)","visitReferencedFiles(Configuration, FileSystem, Path, SnapshotVisitor)","concurrentVisitReferencedFiles(Configuration, FileSystem, SnapshotManifest, String, StoreFileVisitor)","getHFileNames(Configuration, FileSystem, Path, SnapshotDescription)"],"org.apache.hadoop.hbase.master.cleaner.CleanerChore":["calculatePoolSize(String)","initCleanerChain(String)","getChorePoolSize()","sortByConsumedSpace(List)","getEnabled()","newFileCleaner(String, Configuration)","chore()","deleteAction(Action, String, Path)","checkAndDeleteFiles(List)","setEnabled(boolean)","traverseAndDelete(Path, boolean, CompletableFuture)","cleanup()","runCleaner()","deleteFiles(Iterable)","preRunCleaner()"],"org.apache.hadoop.hbase.coordination.ZkSplitLogWorkerCoordination":["getDataSetWatchAsync()","submitTask(String, int, int)","init(RegionServerServices, Configuration, TaskExecutor, SplitLogWorker)","markCorrupted(Path, String, FileSystem)","removeListener()","getDataSetWatchSuccess(String, byte[])","attemptToOwnTask(boolean, ZKWatcher, ServerName, String, int)","isStop()","isReady()","getDataSetWatchFailure(String)","nodeChildrenChanged(String)","registerListener()","endTask(SplitLogTask, LongAdder, SplitTaskDetails)","areSplittersAvailable()","nodeDataChanged(String)","getTaskReadySeq()","taskLoop()","grabTask(String)","stopProcessingTasks()","getTaskList()"],"org.apache.hadoop.hbase.regionserver.compactions.StripeCompactionPolicy":["selectExpiredMergeCompaction(StripeInformationProvider, boolean)","selectCompaction(StripeInformationProvider, List, boolean)","throttleCompaction(long)","selectSingleStripeCompaction(StripeInformationProvider, boolean, boolean, boolean)","getTotalFileSize(Collection)","selectFlush(CellComparator, StripeInformationProvider, int)","getTotalKvCount(Collection)","createEmptyRequest(StripeInformationProvider, CompactionRequestImpl)","needsSingleStripeCompaction(StripeInformationProvider)","shouldPerformMajorCompaction(Collection)","selectSimpleCompaction(List, boolean, boolean)","selectNewStripesCompaction(StripeInformationProvider)","preSelectFilesForCoprocessor(StripeInformationProvider, List)","needsCompactions(StripeInformationProvider, List)","estimateTargetKvs(Collection, double)"],"org.apache.hadoop.hbase.wal.WALSplitter.PipelineController":["writerThreadError(Throwable)","checkForErrors()"],"org.apache.hadoop.hbase.io.HFileLink":["isHFileLink(String)","buildFromHFileLinkPattern(Configuration, Path)","getHFileFromBackReference(Configuration, Path)","getReferencedTableName(String)","create(Configuration, FileSystem, Path, TableName, String, String)","getHFileFromBackReference(Path, Path)","buildFromHFileLinkPattern(Path, Path, Path)","getReferencedRegionName(String)","createHFileLinkName(RegionInfo, String)","isHFileLink(Path)","getHFileLinkPatternRelativePath(Path)","createFromHFileLink(Configuration, FileSystem, Path, String)","getReferencedHFileName(String)","build(Configuration, TableName, String, String, String)","createBackReferenceName(String, String)","getOriginPath()","createPath(TableName, String, String, String)","create(Configuration, FileSystem, Path, TableName, String, String, boolean)","getMobPath()","getArchivePath()","createHFileLinkName(TableName, String, String)","create(Configuration, FileSystem, Path, RegionInfo, String)","create(Configuration, FileSystem, Path, RegionInfo, String, boolean)","parseBackReferenceName(String)","createFromHFileLink(Configuration, FileSystem, Path, String, boolean)"],"org.apache.hadoop.hbase.backup.HFileArchiver":["archiveStoreFile(Configuration, FileSystem, RegionInfo, Path, byte[], Path)","resolveAndArchive(FileSystem, Path, Collection, long)","exists(Configuration, FileSystem, RegionInfo)","resolveAndArchiveFile(Path, File, String)","archiveRegions(Configuration, FileSystem, Path, Path, List)","archiveFamily(FileSystem, Configuration, RegionInfo, Path, byte[])","archiveRecoveredEdits(Configuration, FileSystem, RegionInfo, byte[], Collection)","deleteRegionWithoutArchiving(FileSystem, Path)","getThreadFactory()","archiveRegion(FileSystem, Path, Path, Path)","archiveRegion(Configuration, FileSystem, RegionInfo)","archiveFamilyByFamilyDir(FileSystem, Configuration, RegionInfo, Path, byte[])","archiveStoreFiles(Configuration, FileSystem, RegionInfo, Path, byte[], Collection)","getArchiveExecutor(Configuration)","archive(FileSystem, RegionInfo, byte[], Collection, Path)","deleteStoreFilesWithoutArchiving(Collection)"],"org.apache.hadoop.hbase.tool.CanaryTool":["getSink(Configuration, Class)","checkZooKeeper()","getWriteFailures()","run(String[])","sniff(Admin, Sink, TableDescriptor, ExecutorService, TaskType, boolean, LongAdder)","setConf(Configuration)","runMonitor(String[])","getConf()","printUsageAndExit()","checkRegions(String[])","parseArgs(String[])","newMonitor(Connection, String[])","sniff(Admin, Sink, String, ExecutorService, TaskType, boolean, LongAdder)","checkRegionServers(String[])","getReadFailures()","populateReadTableTimeoutsMap(String)","main(String[])"],"org.apache.hadoop.hbase.ipc.SimpleRpcServer":["getListenerAddress()","call(BlockingService, MethodDescriptor, Message, CellScanner, long, MonitoredRPCHandler)","join()","closeConnection(SimpleServerRpcConnection)","start()","getNumOpenConnections()","getConnection(SocketChannel, long)","channelWrite(GatheringByteChannel, BufferChain)","setSocketSendBufSize(int)","bind(ServerSocket, InetSocketAddress, int)","stop()","call(BlockingService, MethodDescriptor, Message, CellScanner, long, MonitoredRPCHandler, long, int)"],"org.apache.hadoop.hbase.master.snapshot.SnapshotFileCache":["triggerCacheRefreshForTesting()","stop(String)","refreshCache()","getUnreferencedFiles(Iterable, SnapshotManager)","isStopped()"],"org.apache.hadoop.hbase.master.assignment.MergeTableRegionsProcedure":["isRollbackSupported(MergeTableRegionsState)","holdLock(MasterProcedureEnv)","updateMetaForMergedRegions(MasterProcedureEnv)","getTableOperationType()","writeMaxSequenceIdFile(MasterProcedureEnv)","getStateId(MergeTableRegionsState)","getRegionReplication(MasterProcedureEnv)","preMergeRegionsCommit(MasterProcedureEnv)","prepareMergeRegion(MasterProcedureEnv)","getServerName(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, MergeTableRegionsState)","getProcedureMetrics(MasterProcedureEnv)","createMergedRegion(MasterProcedureEnv)","postRollBackMergeRegions(MasterProcedureEnv)","cleanupMergedRegion(MasterProcedureEnv)","serializeStateData(ProcedureStateSerializer)","preMergeRegions(MasterProcedureEnv)","createAssignProcedures(int, MasterProcedureEnv, List, ServerName)","checkRegionsToMerge(MasterProcedureEnv, RegionInfo[], boolean)","releaseLock(MasterProcedureEnv)","mergeStoreFiles(MasterProcedureEnv, HRegionFileSystem, Path)","toStringClassDetails(StringBuilder)","postMergeRegionsCommit(MasterProcedureEnv)","abort(MasterProcedureEnv)","isMergeable(MasterProcedureEnv, RegionState)","getState(int)","postCompletedMergeRegions(MasterProcedureEnv)","createMergedRegionInfo(RegionInfo[])","createUnassignProcedures(MasterProcedureEnv, int)","createAssignProcedures(MasterProcedureEnv, int)","acquireLock(MasterProcedureEnv)","rollbackCloseRegionsForMerge(MasterProcedureEnv)","hasRecoveredEdits(MasterProcedureEnv)","getInitialState()","getTableName()","deserializeStateData(ProcedureStateSerializer)","getMergedRegion()","setRegionStateToMerging(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, MergeTableRegionsState)"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketCache":["join()","blockEvicted(BlockCacheKey, BucketEntry, boolean)","getFreeSize()","getRefCount(BlockCacheKey)","getRAMQueueEntries(BlockingQueue, List)","sanityCheckConfigs()","getStats()","getIoEngine()","logStats()","checkIOErrorIsTolerated()","getCurrentSize()","isCacheEnabled()","cacheBlockWithWaitInternal(BlockCacheKey, Cacheable, boolean, boolean)","stopWriterThreads()","freeEntireBuckets(int)","getCurrentDataSize()","acceptableSize()","shutdown()","getMultiFactor()","evictBlock(BlockCacheKey, boolean)","startWriterThreads()","getAllocator()","getIOEngineFromName(String, long, String)","evictBlock(BlockCacheKey)","getBlock(BlockCacheKey, boolean, boolean, boolean)","getExtraFreeFactor()","returnBlock(BlockCacheKey, Cacheable)","getMemoryFactor()","getBlockCaches()","bucketSizesAboveThresholdCount(float)","heapSize()","cacheBlock(BlockCacheKey, Cacheable, boolean)","getSingleFactor()","getBlockCount()","getPartitionSize(float)","persistToFile()","getDataBlockCount()","freeSpace(String)","getMinFactor()","getMaxSize()","checkRamCache(BlockCacheKey)","cacheBlockWithWait(BlockCacheKey, Cacheable, boolean, boolean)","disableCache()","getAcceptableFactor()","evictBlocksByHfileName(String)","iterator()","getRealCacheSize()","cacheBlock(BlockCacheKey, Cacheable)","retrieveFromFile(int[])","size()"],"org.apache.hadoop.hbase.mob.ManualMobMaintHFileCleaner":["isFileDeletable(FileStatus)"],"org.apache.hadoop.hbase.regionserver.compactions.FIFOCompactionPolicy":["shouldPerformMajorCompaction(Collection)","getExpiredStores(Collection, Collection)","selectCompaction(Collection, List, boolean, boolean, boolean)","hasExpiredStores(Collection)","needsCompaction(Collection, List)","isEmptyStoreFile(HStoreFile)"],"org.apache.hadoop.hbase.util.RegionSplitter":["splitScan(LinkedList, Connection, TableName, SplitAlgorithm)","getRegionServerCount(Connection)","newSplitAlgoInstance(Configuration, String)","getTableDirAndSplitFile(Configuration, TableName)","createPresplitTable(TableName, SplitAlgorithm, String[], Configuration)","readFile(FileSystem, Path)","main(String[])","rollingSplit(TableName, SplitAlgorithm, Configuration)","getSplits(Connection, TableName, SplitAlgorithm)"],"org.apache.hadoop.hbase.ClusterMetricsBuilder.ClusterMetricsImpl":["getRegionStatesInTransition()","getHBaseVersion()","getClusterId()","toString()","getBackupMasterNames()","getDeadServerNames()","getLiveServerMetrics()","getMasterCoprocessorNames()","getMasterInfoPort()","getBalancerOn()","getMasterName()","getTableRegionStatesCount()"],"org.apache.hadoop.hbase.security.access.AuthResult.Params":["setNamespace(String)","toString()","setQualifier(byte[])","setFamily(byte[])","setTableName(TableName)","setFamilies(Map)"],"org.apache.hadoop.hbase.client.SecureBulkLoadClient":["secureBulkLoadHFiles(ClientService.BlockingInterface, List, byte[], boolean, Token, String)","secureBulkLoadHFiles(ClientService.BlockingInterface, List, byte[], boolean, Token, String, boolean, List, boolean)","prepareBulkLoad(Connection)","secureBulkLoadHFiles(ClientService.BlockingInterface, List, byte[], boolean, Token, String, boolean)","cleanupBulkLoad(Connection, String)"],"org.apache.hadoop.hbase.master.cleaner.LogCleaner.CleanerContext":["getTargetToClean()","createCleanerContext(FileStatus, long)","setResult(boolean)","getResult(long)"],"org.apache.hadoop.hbase.io.hfile.CombinedBlockCache":["returnBlock(BlockCacheKey, Cacheable)","getMaxSize()","getBlockCaches()","getCurrentDataSize()","shutdown()","getFreeSize()","heapSize()","getRefCount(BlockCacheKey)","cacheBlock(BlockCacheKey, Cacheable, boolean)","evictBlocksByHfileName(String)","getBlockCount()","getStats()","iterator()","setMaxSize(long)","cacheBlock(BlockCacheKey, Cacheable)","getCurrentSize()","getDataBlockCount()","evictBlock(BlockCacheKey)","getBlock(BlockCacheKey, boolean, boolean, boolean)","size()"],"org.apache.hadoop.hbase.io.hfile.HFileBlockIndex.CellBasedKeyBlockIndexReader":["isEmpty()","getRootBlockKey(int)","toString()","calculateHeapSizeForBlockKeys(long)","loadDataBlockWithScanInfo(Cell, HFileBlock, boolean, boolean, boolean, DataBlockEncoding)","initialize(int)","rootBlockContainingKey(Cell)","rootBlockContainingKey(byte[], int, int, CellComparator)","midkey()","add(byte[], long, int)"],"org.apache.hadoop.hbase.client.AsyncRpcRetryingCallerFactory.AdminRequestCallerBuilder":["rpcTimeout(long, TimeUnit)","pause(long, TimeUnit)","call()","maxAttempts(int)","startLogErrorsCnt(int)","operationTimeout(long, TimeUnit)","serverName(ServerName)","build()","action(AsyncAdminRequestRetryingCaller.Callable)"],"org.apache.hadoop.hbase.master.MasterStatusServlet":["getFragmentationInfo(HMaster, Configuration)","doGet(HttpServletRequest, HttpServletResponse)","getMetaLocationOrNull(HMaster)"],"org.apache.hadoop.hbase.ipc.NettyServerRpcConnection":["createCall(int, BlockingService, MethodDescriptor, RequestHeader, Message, CellScanner, long, InetAddress, int, CallCleanup)","isConnectionOpen()","doRespond(RpcResponse)","process(ByteBuf)","process(ByteBuffer)","process(ByteBuff)","close()"],"org.apache.hadoop.hbase.regionserver.MetricsTable":["getTableWrapperAgg()","getTableSourceAgg()"],"org.apache.hadoop.hbase.client.AsyncScanSingleRegionRpcRetryingCaller":["completeWhenNoMoreResultsInRegion()","completeReversedWhenNoMoreResultsInRegion()","completeWhenError(boolean)","call()","next()","completeOrNext(ScanResponse, int)","updateNextStartRowWhenError(Result)","start(HBaseRpcController, ScanResponse)","remainingTimeNs()","onError(Throwable)","elapsedMs()","completeExceptionally(boolean)","completeWithNextStartRow(byte[], boolean)","completeNoMoreResults()","closeScanner()","onComplete(HBaseRpcController, ScanResponse)","renewLease()"],"org.apache.hadoop.hbase.client.ConnectionImplementation.MasterServiceStubMaker":["isMasterRunning(MasterProtos.MasterService.BlockingInterface)","makeStubNoRetries()","makeStub()"],"org.apache.hadoop.hbase.master.cleaner.LogCleaner":["validate(Path)","getCleanerThreadTimeoutMsec()","onConfigurationChange(Configuration)","cleanup()","cancel(boolean)","getCleanerThreadCheckIntervalMsec()","getSizeOfCleaners()","deleteFiles(Iterable)","deleteFile()","createOldWalsCleaner(int)","interruptOldWALsCleaner()"],"org.apache.hadoop.hbase.util.BloomFilterChunk":["actualErrorRate()","createAnother()","setHashLoc(int, int)","toString()","set(long)","sanityCheck()","add(byte[], int, int)","writeBloom(DataOutput)","allocBloom()","get(int, ByteBuffer, int)","compactBloom()","getMaxKeys()","bloomCheck(ByteBuffer)","add(Cell)","getHashCount()","getKeyCount()","getByteSize()","getHashType()"],"org.apache.hadoop.hbase.coprocessor.MetaTableMetrics.ExampleRegionObserverMeta":["preDelete(ObserverContext, Delete, WALEdit, Durability)","clientMetricRegisterAndMark()","registerAndMarkMeter(String)","registerAndMarkMetrics(ObserverContext, Row)","clientRequestMeterName(String)","getRegionIdFromOp(Row)","opWithClientMeterName(Object)","prePut(ObserverContext, Put, WALEdit, Durability)","opMeterName(Object)","tableMeterName(String)","getRegionObserver()","preGetOp(ObserverContext, Get, List)","regionMetricRegisterAndMark(Row)","opWithClientMetricRegisterAndMark(Object)","getTableNameFromOp(Row)","regionMeterName(String)","isMetaTableOp(ObserverContext)","tableMetricRegisterAndMark(Row)","opMetricRegisterAndMark(Row)"],"org.apache.hadoop.hbase.ClusterStatus":["getLastMajorCompactionTsForTable(TableName)","getDeadServersSize()","getClusterId()","getDeadServerNames()","getRegionsCount()","hashCode()","getMasterCoprocessors()","getMasterCoprocessorNames()","getBalancerOn()","getLastMajorCompactionTsForRegion(byte[])","getTableRegionStatesCount()","getMaster()","getRegionStatesInTransition()","getLiveServerLoads()","isBalancerOn()","equals(Object)","getBackupMastersSize()","getServersSize()","getHBaseVersion()","toString()","getBackupMasterNames()","getVersion()","getServers()","getLiveServerMetrics()","getLoad(ServerName)","getMasterInfoPort()","getRequestsCount()","getMasterName()","getDeadServers()","getBackupMasters()"],"org.apache.hadoop.hbase.util.ServerRegionReplicaUtil":["shouldReplayRecoveredEdits(HRegion)","getRegionInfoForFs(RegionInfo)","setupRegionReplicaReplication(Configuration)","getReplicationPeerId()","getStoreFileInfo(Configuration, FileSystem, RegionInfo, RegionInfo, String, Path)","getRegionReplicaStoreFileRefreshMultiplier(Configuration)","isRegionReplicaWaitForPrimaryFlushEnabled(Configuration)","isRegionReplicaStoreFileRefreshEnabled(Configuration)","isReadOnly(HRegion)","isRegionReplicaReplicationEnabled(Configuration)"],"org.apache.hadoop.hbase.quotas.QuotaTableUtil":["parseTableResult(TableName, Result, TableQuotasVisitor)","makeGetForSnapshotSize(TableName, String)","getNamespaceFromRowKey(byte[])","parseNamespaceResult(String, Result, NamespaceQuotasVisitor)","createPutForSpaceSnapshot(TableName, SpaceQuotaSnapshot)","getUserQuota(Connection, String, TableName)","getCurrentSnapshot(Connection, String)","parseResult(Result, QuotasVisitor)","createPutForSnapshotSize(TableName, String, long)","createPutForNamespaceSnapshotSize(String, long)","parseResultToCollection(Result, Collection)","getNamespaceSnapshotSize(Connection, String)","getQuotas(Connection, byte[], byte[])","isEmptyQuota(Quotas)","extractSnapshotSize(byte[], int, int)","getSettingsQualifierForUserTable(TableName)","makeFilter(QuotaFilter)","createScanForNamespaceSnapshotSizes()","getCurrentSnapshotFromQuotaTable(Connection, TableName)","createDeletesForExistingSnapshotsFromScan(Connection, Scan)","makeQuotaSnapshotScanForTable(TableName)","getRowKeyRegEx(byte[], String)","getUserRowKey(String)","getMasterReportedTableSizes(Connection)","getNamespaceRowKey(String)","getTableRowKeyRegex(String)","makeGetForNamespaceQuotas(String)","getSnapshotSizeQualifier(String)","quotasFromData(byte[], int, int)","makeGetForUserQuotas(String, Iterable, Iterable)","parseUserResult(Result, UserQuotasVisitor)","createScanForSpaceSnapshotSizes(TableName)","makeQuotaSnapshotGetForTable(TableName)","parseTableResult(Result, TableQuotasVisitor)","quotasFromData(byte[])","isNamespaceRowKey(byte[])","parseUserResult(String, Result, UserQuotasVisitor)","getUserQuota(Connection, String)","isTableRowKey(byte[])","doGet(Connection, Get)","getUserFromRowKey(byte[])","makeQuotaSnapshotScan()","getNamespaceSnapshots(Connection)","doGet(Connection, List)","createGetNamespaceSnapshotSize(String)","parseSnapshotSize(Cell)","createDeletesForExistingNamespaceSnapshotSizes(Connection)","createDeletesForExistingNamespaceSnapshotSizes(Set)","createScanForNamespaceSnapshotSizes(String)","getSettingsQualifierRegexForUserTable(String)","parseNamespaceResult(Result, NamespaceQuotasVisitor)","getUserRowKeyRegex(String)","quotasToData(Quotas)","makeGetForTableQuotas(TableName)","getSnapshots(Connection)","getTableRowKey(TableName)","getProtoViolationPolicy(SpaceViolationPolicy)","getObservedSnapshotSizes(Connection)","getSettingsQualifierForUserNamespace(String)","getCurrentSnapshot(Connection, TableName)","getQuotas(Connection, byte[])","extractQuotaSnapshot(Result, Map)","getUserQuota(Connection, String, String)","getViolationPolicy(SpaceQuota)","getNamespaceQuota(Connection, String)","getRegionServerQuotaSnapshots(Connection, ServerName)","createScanForSpaceSnapshotSizes()","getSettingsQualifierRegexForUserNamespace(String)","makeScan(QuotaFilter)","getNamespaceRowKeyRegex(String)","getTableFromRowKey(byte[])","isUserRowKey(byte[])","getTableSnapshots(Connection)","createDeletesForExistingTableSnapshotSizes(Connection)","getTableQuota(Connection, TableName)","createDeletesForExistingTableSnapshotSizes(Multimap)","extractSnapshotNameFromSizeCell(Cell)"],"org.apache.hadoop.hbase.regionserver.RSDumpServlet":["doGet(HttpServletRequest, HttpServletResponse)","dumpCallQueues(HRegionServer, PrintWriter)","dumpQueue(HRegionServer, PrintWriter)","dumpRowLock(HRegionServer, PrintWriter)"],"org.apache.hadoop.hbase.client.HTable":["batchCoprocessorService(Descriptors.MethodDescriptor, Message, byte[], byte[], R, Callback)","getDefaultExecutor(Configuration)","getScanner(byte[], byte[])","setReadRpcTimeout(int)","get(List)","batch(List, Object[])","checkAndMutate(byte[], byte[], byte[], CompareOperator, byte[], RowMutations)","validatePut(Put, int)","getName()","getTableDescriptor()","append(Append)","getPool()","incrementColumnValue(byte[], byte[], byte[], long)","put(Put)","get(Get, boolean)","getReadRpcTimeout()","put(List)","incrementColumnValue(byte[], byte[], byte[], long, Durability)","checkAndDelete(byte[], byte[], byte[], CompareOp, byte[], Delete)","batch(List, Object[], int)","coprocessorService(Class, byte[], byte[], Batch.Call)","toString()","getScanner(Scan)","mutateRow(RowMutations)","getWriteRpcTimeout()","getStartKeysInRange(byte[], byte[])","validatePut(Put)","increment(Increment)","checkAndMutate(byte[], byte[], byte[], CompareOp, byte[], RowMutations)","clearRegionCache()","getRegionLocator()","getRpcTimeout()","doCheckAndPut(byte[], byte[], byte[], String, byte[], TimeRange, Put)","setWriteRpcTimeout(int)","exists(Get)","checkAndPut(byte[], byte[], byte[], CompareOperator, byte[], Put)","getRpcTimeout(TimeUnit)","getOperationTimeout()","getKeysAndRegionsInRange(byte[], byte[], boolean)","getConnection()","getReadRpcTimeout(TimeUnit)","getConfiguration()","getKeysAndRegionsInRange(byte[], byte[], boolean, boolean)","setOperationTimeout(int)","doCheckAndMutate(byte[], byte[], byte[], String, byte[], TimeRange, RowMutations)","batchCallback(List, Object[], Batch.Callback)","getOperationTimeout(TimeUnit)","coprocessorService(Class, byte[], byte[], Batch.Call, Batch.Callback)","getDescriptor()","checkAndPut(byte[], byte[], byte[], byte[], Put)","getScanner(byte[])","delete(Delete)","coprocessorService(byte[])","checkAndPut(byte[], byte[], byte[], CompareOp, byte[], Put)","doCheckAndDelete(byte[], byte[], byte[], String, byte[], TimeRange, Delete)","close()","exists(List)","checkAndDelete(byte[], byte[], byte[], byte[], Delete)","checkAndDelete(byte[], byte[], byte[], CompareOperator, byte[], Delete)","processBatchCallback(List, Object[], Batch.Callback)","batchCoprocessorService(Descriptors.MethodDescriptor, Message, byte[], byte[], R)","doBatchWithCallback(List, Object[], Callback, ClusterConnection, ExecutorService, TableName)","get(Get)","delete(List)","setRpcTimeout(int)","getMaxKeyValueSize(Configuration)","checkAndMutate(byte[], byte[])","getWriteRpcTimeout(TimeUnit)"],"org.apache.hadoop.hbase.master.procedure.ServerQueue":["requireExclusiveLock(Procedure)"],"org.apache.hadoop.hbase.regionserver.compactions.DateTieredCompactor":["compact(CompactionRequestImpl, List, ThroughputController, User)","needEmptyFile(CompactionRequestImpl)","commitWriter(DateTieredMultiFileWriter, FileDetails, CompactionRequestImpl)"],"org.apache.hadoop.hbase.security.token.AuthenticationKey":["equals(Object)","setExpiration(long)","toString()","getKeyId()","getExpiration()","getKey()","write(DataOutput)","readFields(DataInput)","hashCode()"],"org.apache.hadoop.hbase.master.procedure.DeleteNamespaceProcedure":["undoRemoveFromZKNamespaceManager(MasterProcedureEnv)","getTableNamespaceManager(MasterProcedureEnv)","getState(int)","rollbacRemoveNamespaceQuota(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, DeleteNamespaceState)","getTableOperationType()","removeFromZKNamespaceManager(MasterProcedureEnv, String)","executeFromState(MasterProcedureEnv, DeleteNamespaceState)","prepareDelete(MasterProcedureEnv)","isTraceEnabled()","getInitialState()","deleteFromNSTable(MasterProcedureEnv, String)","isRollbackSupported(DeleteNamespaceState)","undoDeleteFromNSTable(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","rollbackDeleteDirectory(MasterProcedureEnv)","getStateId(DeleteNamespaceState)","removeNamespaceQuota(MasterProcedureEnv, String)","getNamespaceName()","deleteDirectory(MasterProcedureEnv, String)"],"org.apache.hadoop.hbase.master.assignment.RegionStates":["getAverageLoad()","isRegionInRegionStates(RegionInfo)","getSnapShotOfAssignment(Collection)","getRegionsInTransitionCount()","getRegionStates()","getRegionStateNodes()","isRegionOffline(RegionInfo)","removeServer(ServerName)","getRegionsOfTable(TableName)","isReplicaAvailableForRegion(RegionInfo)","getRegionTransitionProcedure(RegionInfo)","createRegionForReopen(RegionStateNode)","getRegionTransitionState(RegionInfo)","addRegionInTransition(RegionStateNode, RegionTransitionProcedure)","clear()","metaLogSplit(ServerName)","getRegionsOfTable(TableName, boolean)","getAssignedRegions()","isRegionInTransition(RegionInfo)","include(RegionStateNode, boolean)","getRegionStateNodeFromName(byte[])","removeFromOfflineRegions(RegionInfo)","addRegionToServer(RegionStateNode)","getTableRegionsInfo(TableName)","regionNamesToString(Collection)","deleteRegions(List)","getRegionServerOfRegion(RegionInfo)","removeRegionFromServer(ServerName, RegionStateNode)","createSnapshot(RegionStateNode, Map)","getServerRegionInfoSet(ServerName)","metaLogSplitting(ServerName)","logSplit(ServerName)","hasRegionsInTransition()","getRegionByStateOfTable(TableName)","getRegionState(RegionInfo)","addToFailedOpen(RegionStateNode)","getRegionStateNode(RegionInfo)","getRegionsInTransition()","getRegionsInTransitionOrderedByTimestamp()","getFailedOpen(RegionInfo)","removeRegionInTransition(RegionStateNode, RegionTransitionProcedure)","getRegionState(String)","getRegionFailedOpen()","getTableRegionStates(TableName)","removeFromFailedOpen(RegionInfo)","deleteRegion(RegionInfo)","createRegionStateNode(RegionInfo)","isRegionInState(RegionInfo, State[])","getOrCreateRegionStateNode(RegionInfo)","getServerNode(ServerName)","getOrCreateServer(ServerName)","setServerState(ServerName, ServerState)","getRegionsOfTableForReopen(TableName)","getTableRegionStateNodes(TableName)","getRegionAssignments()","checkReopened(HRegionLocation)","getRegionsStateInTransition()","isRegionOnline(RegionInfo)","logSplitting(ServerName)","getRegionsOfTable(TableName, Predicate)","getAssignmentsForBalancer(boolean)","hasTableRegionStates(TableName)","updateRegionState(RegionInfo, State)","addToOfflineRegions(RegionStateNode)"],"org.apache.hadoop.hbase.master.procedure.DeleteTableProcedure":["abort(MasterProcedureEnv)","deleteAssignmentState(MasterProcedureEnv, TableName)","getState(int)","getTableOperationType()","postDelete(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, DeleteTableState)","prepareDelete(MasterProcedureEnv)","getInitialState()","rollbackState(MasterProcedureEnv, DeleteTableState)","deleteTableStates(MasterProcedureEnv, TableName)","getTableName()","isRollbackSupported(DeleteTableState)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","deleteFromFs(MasterProcedureEnv, TableName, List, boolean)","getStateId(DeleteTableState)","preDelete(MasterProcedureEnv)","deleteFromMeta(MasterProcedureEnv, TableName, List)","deleteTableDescriptorCache(MasterProcedureEnv, TableName)","cleanRegionsInMeta(MasterProcedureEnv, TableName)"],"org.apache.hadoop.hbase.client.RpcRetryingCallerWithReadReplicas":["getRegionLocations(boolean, int, ClusterConnection, TableName, byte[])","throwEnrichedException(ExecutionException, int)","call(int)","addCallsForReplica(ResultBoundedCompletionService, RegionLocations, int, int)"],"org.apache.hadoop.hbase.shaded.protobuf.RequestConverter":["buildGetTableDescriptorsRequest(List)","buildBulkLoadHFileRequest(List, byte[], boolean, Token, String)","buildDeleteTableRequest(TableName, long, long)","buildCreateTableRequest(TableDescriptor, byte[][], long, long)","buildGetRequest(byte[], Get)","buildGetSchemaAlterStatusRequest(TableName)","buildRegionSpecifier(RegionSpecifierType, byte[])","buildRollWALWriterRequest()","buildUnassignRegionRequest(byte[], boolean)","buildModifyColumnRequest(TableName, ColumnFamilyDescriptor, long, long)","buildNoDataRegionActions(byte[], Iterable, List, MultiRequest.Builder, RegionAction.Builder, ClientProtos.Action.Builder, MutationProto.Builder, long, Map)","buildGetQuotaStatesRequest()","buildGetTableNamesRequest(Pattern, boolean)","buildScanRequest(long, int, boolean, boolean)","buildAssignRegionRequest(byte[])","buildSetSplitOrMergeEnabledRequest(boolean, boolean, MasterSwitchType[])","buildMutateRequest(byte[], Put)","buildRegionActions(byte[], List, MultiRequest.Builder, RegionAction.Builder, ClientProtos.Action.Builder, MutationProto.Builder, long, Map)","buildClearDeadServersRequest(Collection)","buildGetOnlineRegionRequest()","buildNoDataRegionAction(byte[], RowMutations, List, RegionAction.Builder, ClientProtos.Action.Builder, MutationProto.Builder)","buildRegionAction(byte[], RowMutations)","buildGetReplicationPeerConfigRequest(String)","buildDisableReplicationPeerRequest(String)","buildGetClusterStatusRequest(EnumSet)","buildGetRegionInfoRequest(byte[], boolean, boolean)","buildSplitTableRegionRequest(RegionInfo, byte[], long, long)","buildNormalizeRequest()","buildModifyNamespaceRequest(NamespaceDescriptor)","buildMutateRequest(byte[], Increment, long, long)","buildClearRegionBlockCacheRequest(List)","buildGetTableDescriptorsRequest(Pattern, boolean)","buildSetNormalizerRunningRequest(boolean)","buildIsCatalogJanitorEnabledRequest()","buildUpdateReplicationPeerConfigRequest(String, ReplicationPeerConfig)","buildDisableTableRequest(TableName, long, long)","toEncodedRegionNameRegionSpecifiers(List)","buildRemoveReplicationPeerRequest(String)","buildGetRegionInfoRequest(byte[], boolean)","buildDeleteColumnRequest(TableName, byte[], long, long)","buildAddReplicationPeerRequest(String, ReplicationPeerConfig, boolean)","buildOpenRegionRequest(ServerName, RegionInfo, List)","buildSetBalancerRunningRequest(boolean, boolean)","buildGetTableDescriptorsRequest(TableName)","buildGetServerInfoRequest()","buildCreateNamespaceRequest(NamespaceDescriptor)","buildMoveRegionRequest(byte[], ServerName)","buildScanRequest(byte[], Scan, int, boolean)","buildFlushRegionRequest(byte[], boolean)","buildIsCleanerChoreEnabledRequest()","buildTruncateTableRequest(TableName, boolean, long, long)","buildBulkLoadHFileRequest(List, byte[], boolean, Token, String, boolean, List, boolean)","buildFlushRegionRequest(byte[])","buildEnableCatalogJanitorRequest(boolean)","buildCompactRegionRequest(byte[], boolean, byte[])","buildSetTableStateInMetaRequest(TableState)","buildIncrementRequest(byte[], byte[], byte[], byte[], long, Durability, long, long)","buildOpenRegionRequest(ServerName, List)","buildRunCleanerChoreRequest()","buildDeleteNamespaceRequest(String)","buildMutateRequest(byte[], Append, long, long)","getRegionActionBuilderWithRegion(RegionAction.Builder, byte[])","buildWarmupRegionRequest(RegionInfo)","buildIsNormalizerEnabledRequest()","buildListReplicationPeersRequest(Pattern)","buildScanRequest(long, int, boolean, long, boolean, boolean, int)","buildMutateRequest(byte[], byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange, Put)","buildGetRegionLoadRequest(TableName)","buildMutateRequest(byte[], byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange, RowMutations)","toAssignRegionsRequest(List, boolean)","buildOfflineRegionRequest(byte[])","buildEnableReplicationPeerRequest(String)","buildGetNamespaceDescriptorRequest(String)","buildStopServerRequest(String)","buildDecommissionRegionServersRequest(List, boolean)","toScheduleServerCrashProcedureRequest(List)","buildIsMasterRunningRequest()","buildUpdateFavoredNodesRequest(List)","buildRecommissionRegionServerRequest(ServerName, List)","buildBalanceRequest(boolean)","buildMutateRequest(byte[], byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange, Delete)","buildEnableTableRequest(TableName, long, long)","buildMutateRequest(byte[], byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange, Mutation, MutationType)","buildRegionOpenInfo(RegionInfo, List)","buildGetSpaceQuotaRegionSizesRequest()","buildModifyTableRequest(TableName, TableDescriptor, long, long)","buildMutateRequest(byte[], Delete)","buildSetCleanerChoreRunningRequest(boolean)","buildAddColumnRequest(TableName, ColumnFamilyDescriptor, long, long)","buildClearCompactionQueuesRequest(Set)","toUnassignRegionsRequest(List, boolean)","buildIsBalancerEnabledRequest()","buildCondition(byte[], byte[], byte[], ByteArrayComparable, CompareType, TimeRange)","buildGetRegionInfoRequest(byte[])","buildMergeTableRegionsRequest(byte[][], boolean, long, long)","buildIsSplitOrMergeEnabledRequest(MasterSwitchType)","convert(MasterSwitchType)","buildGetTableStateRequest(TableName)","buildGetSpaceQuotaSnapshotsRequest()","buildGetLastFlushedSequenceIdRequest(byte[])","buildCatalogScanRequest()","toProtoServerNames(List)"],"org.apache.hadoop.hbase.security.HBaseSaslRpcClient":["readStatus(DataInputStream)","initCryptoCipher(RPCProtos.CryptoCipherMeta, Configuration)","saslConnect(InputStream, OutputStream)","getOutputStream()","getInputStream()","getSaslQOP()"],"org.apache.hadoop.hbase.master.balancer.BaseLoadBalancer.Cluster":["doAction(Action)","getLowestLocalityRegionOnServer(int)","getNumRegions(int)","computeCachedLocalities()","doAssignRegion(RegionInfo, ServerName)","addRegion(int[], int)","getRackForRegion(int)","addRegionSorted(int[], int)","removeRegion(int[], int)","getLocalityOfRegion(int, int)","serverHasTooFewRegions(int)","setNumRegions(int)","getOrComputeWeightedLocality(int, int, LocalityType)","getRegionSizeMB(int)","regionMoved(int, int, int)","toString()","sortServersByRegionCount()","registerRegion(RegionInfo, int, int, Map, RegionLocationFinder)","setNumMovedRegions(int)","contains(int[], int)","getOrComputeRackLocalities()","getOrComputeRegionsToMostLocalEntities(LocalityType)","wouldLowerAvailability(RegionInfo, ServerName)","getOrComputeLocality(int, int, LocalityType)","replaceRegion(int[], int, int)"],"org.apache.hadoop.hbase.quotas.QuotaSettings":["getTableName()","timeToString(TimeUnit)","ownerToString()","buildFromProto(SetQuotaRequest)","validateQuotaTarget(QuotaSettings)","buildSetQuotaRequestProto(QuotaSettings)","sizeToString(long)","getUserName()","getNamespace()"],"org.apache.hadoop.hbase.regionserver.DefaultMemStore":["getNextRow(Cell)","keySize()","checkActiveSize()","isSloppy()","heapSize()","getSegments()","preFlushSeqIDEstimation()","getScanners(long)","snapshot()","updateLowestUnflushedSequenceIdInWAL(boolean)","getFlushableSize()","main(String[])","size()"],"org.apache.hadoop.hbase.wal.RegionGroupingProvider":["getLogFileSize()","getWAL(RegionInfo)","addWALActionsListener(WALActionsListener)","getWAL(String)","getNumLogFiles()","createProvider(String)","getStrategy(Configuration, String, String)","getWALs()","shutdown()","init(WALFactory, Configuration, String)","close()"],"org.apache.hadoop.hbase.security.access.AccessChecker":["requirePermission(User, String, TableName, byte[], byte[], Action[])","requirePermission(User, String, Action)","requireNamespacePermission(User, String, String, Action[])","requireGlobalPermission(User, String, Action, TableName, Map)","requireTablePermission(User, String, TableName, byte[], byte[], Action[])","checkLockPermissions(User, String, TableName, RegionInfo[], String)","isAuthorizationSupported(Configuration)","getAuthManager()","requireAccess(User, String, TableName, Action[])","stop()","requireNamespacePermission(User, String, String, TableName, Map, Action[])","requireGlobalPermission(User, String, Action, String)","logResult(AuthResult)"],"org.apache.hadoop.hbase.regionserver.HRegionServer.MovedRegionInfo":["getSeqNum()","getMoveTime()","getServerName()"],"org.apache.hadoop.hbase.mob.DefaultMobStoreCompactor":["performCompaction(FileDetails, InternalScanner, CellSink, long, boolean, ThroughputController, boolean, int)","compact(CompactionRequestImpl, ThroughputController, User)"],"org.apache.hadoop.hbase.client.AsyncClientScanner":["openScanner()","startScan(OpenScannerResponse)","start()","openScanner(int)","callOpenScanner(HBaseRpcController, HRegionLocation, ClientService.Interface)","getPrimaryTimeoutNs()"],"org.apache.hadoop.hbase.master.procedure.ServerCrashProcedure":["toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, ServerCrashState)","getState(int)","getServerOperationType()","acquireLock(MasterProcedureEnv)","getStateId(ServerCrashState)","getInitialState()","splitLogs(MasterProcedureEnv)","getProcedureMetrics(MasterProcedureEnv)","isYieldBeforeExecuteFromState(MasterProcedureEnv, ServerCrashState)","deserializeStateData(ProcedureStateSerializer)","processMeta(MasterProcedureEnv)","serializeStateData(ProcedureStateSerializer)","handleRIT(MasterProcedureEnv, List)","shouldWaitClientAck(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, ServerCrashState)","filterDefaultMetaRegions(List)","isDefaultMetaRegion(RegionInfo)","splitMetaLogs(MasterProcedureEnv)","releaseLock(MasterProcedureEnv)","hasMetaTableRegion()","getServerName()"],"org.apache.hadoop.hbase.security.access.ShadedAccessControlUtil":["toPermissionAction(Permission.Action)","toUserTablePermissions(org.apache.hadoop.hbase.shaded.protobuf.generated.AccessControlProtos.UsersAndPermissions)","toUserPermission(org.apache.hadoop.hbase.shaded.protobuf.generated.AccessControlProtos.UserPermission)","toPermissionAction(org.apache.hadoop.hbase.shaded.protobuf.generated.AccessControlProtos.Permission.Action)","toTableName(HBaseProtos.TableName)","toPermission(Permission)","toUserTablePermissions(ListMultimap)","toTablePermission(AccessControlProtos.Permission)","toProtoTableName(TableName)","toPermissionActions(List)"],"org.apache.hadoop.hbase.regionserver.compactions.CompactionRequestImpl":["equals(Object)","toString()","getPriority()","recalculateSize()","getSize()","setPriority(int)","hashCode()","updateFiles(Collection)","getFiles()","setIsMajor(boolean, boolean)","setTracker(CompactionLifeCycleTracker)","getTracker()","setDescription(String, String)","isMajor()","isOffPeak()","setOffPeak(boolean)","isAllFiles()","getSelectionTime()"],"org.apache.hadoop.hbase.regionserver.StoreFileReader":["loadFileInfo()","checkGeneralBloomFilter(byte[], Cell, BloomFilter)","getSequenceID()","setSkipResetSeqId(boolean)","disableBloomFilterForTesting()","passesGeneralRowColBloomFilter(Cell)","isSkipResetSeqId()","setBloomFilterFaulty(BlockType)","length()","getBloomFilterType()","setGeneralBloomFilterFaulty()","setBulkLoaded(boolean)","loadBloomfilter(BlockType)","passesGeneralRowBloomFilter(byte[], int, int)","setSequenceID(long)","getTotalBloomSize()","loadBloomfilter()","readCompleted()","getGeneralBloomFilter()","getComparator()","getDeleteFamilyCnt()","getLastKey()","close(boolean)","isPrimaryReplicaReader()","getHFileVersion()","getFilterEntries()","getTotalUncompressedBytes()","indexSize()","getFirstKey()","getRefCount()","getScanner(boolean, boolean, boolean)","getUncompressedDataIndexSize()","getHFileReader()","passesKeyRangeFilter(Scan)","setDeleteFamilyBloomFilterFaulty()","setListener(Listener)","passesTimerangeFilter(TimeRange, long)","getHFileMinorVersion()","getEntries()","passesDeleteFamilyBloomFilter(byte[], int, int)","isBulkLoaded()","incrementRefCount()","passesBloomFilter(Scan, SortedSet)","copyFields(StoreFileReader)","getScanner(boolean, boolean)","getLastRowKey()","getStoreFileScanner(boolean, boolean, boolean, long, long, boolean)","getMaxTimestamp()","midKey()"],"org.apache.hadoop.hbase.util.LossyCounting":["add(String)","contains(String)","sweep()","getDataSize()","addByOne(String)","calculateCurrentTerm()","getBucketSize()","getCurrentTerm()","getElements()"],"org.apache.hadoop.hbase.client.AsyncMetaRegionLocator":["clearCache()","updateCachedLocationOnError(HRegionLocation, Throwable)","getRegionLocations(int, boolean)","removeLocationFromCache(HRegionLocation)","getCacheLocation(HRegionLocation)","addLocationToCache(HRegionLocation)"],"org.apache.hadoop.hbase.io.hfile.HFileWriterImpl":["finishClose(FixedFileTrailer)","appendMetaBlock(String, Writable)","getFileContext()","append(Cell)","getMinimumMidpointArray(ByteBuffer, int, int, ByteBuffer, int, int)","beforeShipped()","finishInit(Configuration)","addBloomFilter(BloomFilterWriter, BlockType)","getMinorVersion()","checkBlockBoundary()","addGeneralBloomFilter(BloomFilterWriter)","finishFileInfo()","checkValue(byte[], int, int)","getMinimumMidpointArray(byte[], int, int, byte[], int, int)","getPath()","close()","appendFileInfo(byte[], byte[])","addInlineBlockWriter(InlineBlockWriter)","finishBlock()","newBlock()","checkKey(Cell)","toString()","compressionByName(String)","createOutputStream(Configuration, FileSystem, Path, InetSocketAddress[])","writeInlineBlocks(boolean)","writeFileInfo(FixedFileTrailer, DataOutputStream)","getMidpoint(CellComparator, Cell, Cell)","getLastCell()","doCacheOnWrite(long)","addDeleteFamilyBloomFilter(BloomFilterWriter)","getMajorVersion()"],"org.apache.hadoop.hbase.quotas.GlobalQuotaSettingsImpl":["getBypassGlobals()","toQuotas()","getQuotaSettings()","getSpaceProto()","validateTimedQuota(TimedQuota)","toString()","merge(QuotaSettings)","buildThrottleQuotas(Throttle)","getThrottleProto()"],"org.apache.hadoop.hbase.client.HRegionLocator":["getRegionLocation(byte[])","listRegionLocations()","getRegionLocation(byte[], boolean)","getName()","getStartKeys()","getStartEndKeys(List)","getStartEndKeys()","getAllRegionLocations()","getConfiguration()","getEndKeys()","close()"],"org.apache.hadoop.hbase.master.RegionState":["isSplittingOnServer(ServerName)","isSplittingOrOpenedOnServer(ServerName)","toDescriptiveString()","isUnassignable(State)","isMergingNewOrOfflineOnServer(ServerName)","createForTesting(RegionInfo, State)","updateRitDuration(long)","isReadyToOffline()","isFailedOpen()","isOnServer(ServerName)","isMergingNewOrOpenedOnServer(ServerName)","hashCode()","isFailedClose()","isClosingOrClosedOnServer(ServerName)","isClosing()","convert()","convert(ClusterStatusProtos.RegionState)","isMerging()","isOpeningOrFailedOpenOnServer(ServerName)","isSplittingOrSplitOnServer(ServerName)","isOpened()","getRegion()","getServerName()","equals(Object)","getState()","isOpenedOnServer(ServerName)","toString()","isMerged()","isSplittingNew()","isMergingOnServer(ServerName)","isClosed()","isMergingNewOnServer(ServerName)","isSplit()","getRitDuration()","isSplitting()","isMergingNew()","isSplittingNewOnServer(ServerName)","getStamp()","isOffline()","isUnassignable()","isReadyToOnline()","isOpening()","isOpeningOrOpenedOnServer(ServerName)"],"org.apache.hadoop.hbase.tool.LoadIncrementalHFiles":["prepareHFileQueue(Path, Table, Deque, boolean)","tryAtomicRegionLoad(ClientServiceCallable, TableName, byte[], Collection)","discoverLoadQueue(Deque, Path, boolean)","prepareHFileQueue(Path, Table, Deque, boolean, boolean)","performBulkLoad(Admin, Table, RegionLocator, Deque, ExecutorService, SecureBulkLoadClient, boolean)","createExecutorService()","groupOrSplitPhase(Table, ExecutorService, Deque, Pair)","visitBulkHFiles(FileSystem, Path, BulkHFileVisitor, boolean)","isAlwaysCopyFiles()","prepareHFileQueue(Map, Table, Deque, boolean)","shouldCopyHFileMetaKey(byte[])","loadHFileQueue(Table, Connection, Deque, Pair, boolean)","setBulkToken(String)","loadHFileQueue(Table, Connection, Deque, Pair)","bulkLoadPhase(Table, Connection, ExecutorService, Deque, Multimap, boolean, Map)","populateLoadQueue(Deque, Map)","validateFamiliesInHFiles(Table, Deque, boolean)","isSilence()","disableReplication()","doBulkLoad(Map, Admin, Table, RegionLocator, boolean, boolean)","isSecureBulkLoadEndpointAvailable()","inferBoundaries(SortedMap)","main(String[])","setClusterIds(List)","usage()","cleanup(Admin, Deque, ExecutorService, SecureBulkLoadClient)","doBulkLoad(Path, Admin, Table, RegionLocator)","buildClientServiceCallable(Connection, TableName, byte[], Collection, boolean)","run(String[])","getUniqueName()","visitBulkHFiles(FileSystem, Path, BulkHFileVisitor)","createTable(TableName, String, Admin)","splitStoreFile(Configuration, Path, ColumnFamilyDescriptor, byte[], Path, Path)","copyHFileHalf(Configuration, Path, Path, Reference, ColumnFamilyDescriptor)","run(String, TableName)","groupOrSplit(Multimap, LoadQueueItem, Table, Pair)","splitStoreFile(LoadQueueItem, Table, byte[], byte[])","run(Map, TableName)","checkHFilesCountPerRegionPerFamily(Multimap)","doBulkLoad(Path, Admin, Table, RegionLocator, boolean, boolean)","toString(List)","isCreateTable()"],"org.apache.hadoop.hbase.io.FileLink.FileLinkInputStream":["available()","mark(int)","getPos()","tryOpen()","read(long, byte[], int, int)","markSupported()","unbuffer()","seek(long)","read(byte[])","setDropBehind(Boolean)","skip(long)","read()","read(byte[], int, int)","readFully(long, byte[], int, int)","seekToNewSource(long)","readFully(long, byte[])","reset()","setReadahead(Long)","close()"],"org.apache.hadoop.hbase.replication.regionserver.HFileReplicator":["doBulkLoad(LoadIncrementalHFiles, Table, Deque, RegionLocator, int)","replicate()","cleanup(String, Table)","copyHFilesToStagingDir()","createStagingDir(Path, User, TableName)","createStagingDir(Path, User, String)"],"org.apache.hadoop.hbase.backup.HFileArchiver.File":["getFileSystem()","toString()","moveAndClose(Path)"],"org.apache.hadoop.hbase.master.procedure.MasterProcedureScheduler":["isLockReady(Procedure, Queue)","getBucketIndex(Object[], int)","getPeerId(Procedure)","isServerProcedure(Procedure)","isPeerProcedure(Procedure)","getLocks()","waitServerExclusiveLock(Procedure, ServerName)","tryCleanupServerQueue(ServerName, Procedure)","getPeerQueue(String)","doPoll(FairQueue)","clear(TNode, FairQueue, AvlKeyComparator)","getMetaQueue()","clear()","waitNamespaceExclusiveLock(Procedure, String)","queueSize(Queue)","waitTableExclusiveLock(Procedure, TableName)","wakeServerExclusiveLock(Procedure, ServerName)","waitTableQueueSharedLock(Procedure, TableName)","wakePeerExclusiveLock(Procedure, String)","wakeRegions(Procedure, TableName, RegionInfo[])","getLockResource(LockedResourceType, String)","tryCleanupPeerQueue(String, Procedure)","addToRunQueue(FairQueue, Queue, Supplier)","waitMetaExclusiveLock(Procedure)","getServerQueue(ServerName, ServerProcedureInterface)","waitRegion(Procedure, RegionInfo)","getTableName(Procedure)","wakeRegion(Procedure, RegionInfo)","completionCleanup(Procedure)","requirePeerExclusiveLock(PeerProcedureInterface)","wakeTableSharedLock(Procedure, TableName)","waitPeerExclusiveLock(Procedure, String)","isTableProcedure(Procedure)","waitTableSharedLock(Procedure, TableName)","doAdd(FairQueue, Queue, Procedure, boolean)","yield(Procedure)","dequeue(boolean)","queueSize()","logLockedResource(LockedResourceType, String)","wakeNamespaceExclusiveLock(Procedure, String)","enqueue(Procedure, boolean)","removeTableQueue(TableName)","dumpLocks()","clearQueue()","queueHasRunnables()","getServerName(Procedure)","wakeTableExclusiveLock(Procedure, TableName)","removeFromRunQueue(FairQueue, Queue, Supplier)","removeServerQueue(ServerName)","waitRegions(Procedure, TableName, RegionInfo[])","wakeMetaExclusiveLock(Procedure)","getTableQueue(TableName)","removePeerQueue(String)","markTableAsDeleted(TableName, Procedure)","isMetaProcedure(Procedure)"],"org.apache.hadoop.hbase.master.procedure.RestoreSnapshotProcedure":["toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","restoreSnapshot(MasterProcedureEnv)","getState(int)","isRollbackSupported(RestoreSnapshotState)","getTableOperationType()","prepareRestore(MasterProcedureEnv)","addRegionsToInMemoryStates(List, MasterProcedureEnv, int)","updateTableDescriptor(MasterProcedureEnv)","getInitialState()","updateMETA(MasterProcedureEnv)","getTableName()","rollbackState(MasterProcedureEnv, RestoreSnapshotState)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","executeFromState(MasterProcedureEnv, RestoreSnapshotState)","getStateId(RestoreSnapshotState)","deleteRegionsFromInMemoryStates(List, MasterProcedureEnv, int)","restoreSnapshotAcl(MasterProcedureEnv)","getMonitorStatus()"],"org.apache.hadoop.hbase.io.hfile.HFileDataBlockEncoderImpl":["newDataBlockDecodingContext(HFileContext)","startBlockEncoding(HFileBlockEncodingContext, DataOutputStream)","useEncodedScanner()","toString()","saveMetadata(HFile.Writer)","createFromFileInfo(FileInfo)","getEffectiveEncodingInCache(boolean)","encode(Cell, HFileBlockEncodingContext, DataOutputStream)","endBlockEncoding(HFileBlockEncodingContext, DataOutputStream, byte[], BlockType)","useEncodedScanner(boolean)","getDataBlockEncoding()","newDataBlockEncodingContext(byte[], HFileContext)"],"org.apache.hadoop.hbase.io.hfile.BlockCacheUtil":["toJSON(String, NavigableSet)","shouldReplaceExistingCacheBlock(BlockCache, BlockCacheKey, Cacheable)","toString(CachedBlock, long)","toJSON(CachedBlocksByFile)","getLoadedCachedBlocksByFile(Configuration, BlockCache)","validateBlockAddition(Cacheable, Cacheable, BlockCacheKey)","compareCacheBlock(Cacheable, Cacheable, boolean)","toJSON(BlockCache)","toStringMinusFileName(CachedBlock, long)"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketCache.WriterThread":["disableWriter()","run()","putIntoBackingMap(BlockCacheKey, BucketEntry)","doDrain(List)"],"org.apache.hadoop.hbase.regionserver.HRegion.BatchOperation":["isAtomic()","buildWALEdits(MiniBatchOperationInProgress)","doPostOpCleanupForMiniBatch(MiniBatchOperationInProgress, WALEdit, boolean)","applyFamilyMapToMemStore(Map, MemStoreSizing)","isOperationPending(int)","completeMiniBatchOperations(MiniBatchOperationInProgress, WriteEntry)","isDone()","checkAndPrepareMutation(int, long)","lockRowsAndBuildMiniBatch(List)","visitBatchOperations(boolean, int, Visitor)","createMiniBatch(int, int)","doFinishHotnessProtector(MiniBatchOperationInProgress)","checkAndPrepareMutation(Mutation, long)","getClusterIds()","writeMiniBatchOperationsToMemStore(MiniBatchOperationInProgress, long)","size()"],"org.apache.hadoop.hbase.client.AsyncRegionLocator":["updateCachedLocationOnError(HRegionLocation, Throwable)","clearCache(TableName)","isMeta(TableName)","getRegionLocation(TableName, byte[], RegionLocateType, long)","getRegionLocation(TableName, byte[], int, RegionLocateType, long)","withTimeout(CompletableFuture, long, Supplier)","getRegionLocations(TableName, byte[], RegionLocateType, boolean, long)","getRegionLocation(TableName, byte[], int, RegionLocateType, boolean, long)","getRegionLocation(TableName, byte[], RegionLocateType, boolean, long)"],"org.apache.hadoop.hbase.client.TableSnapshotScanner":["isValidRegion(RegionInfo)","openWithoutRestoringSnapshot()","cleanup()","next()","openWithRestoringSnapshot()","renewLease()","close()"],"org.apache.hadoop.hbase.snapshot.ClientSnapshotDescriptionUtils":["assertSnapshotRequestIsValid(SnapshotProtos.SnapshotDescription)","toString(SnapshotProtos.SnapshotDescription)"],"org.apache.hadoop.hbase.replication.regionserver.MetricsSource":["setAgeOfLastShippedOpByTable(long, String)","getPeerID()","getTimeStampOfLastShippedOp()","incrLogEditsFiltered()","incrRepeatedFileBytes(long)","incrLogReadInBytes(long)","incrBytesSkippedInUncleanlyClosedWALs(long)","incCounters(String, long)","refreshAgeOfLastShippedOp(String)","getMetricsDescription()","setAgeOfLastShippedOp(long, String)","decGauge(String, long)","incrFailedRecoveryQueue()","incrRestartedWALReading()","shipBatch(long, int, long)","getSingleSourceSourceByTable()","clear()","decrSizeOfLogQueue()","getAgeofLastShippedOp(String)","shipBatch(long, int)","incrUnknownFileLengthForClosedWAL()","incrSizeOfLogQueue()","incrLogEditsRead()","incrCompletedWAL()","incrLogEditsRead(long)","getAgeOfLastShippedOp()","getTimestampOfLastShippedOp()","removeMetric(String)","incrUncleanlyClosedWALs()","incrCompletedRecoveryQueue()","setGauge(String, long)","getMetricsName()","getLastTimeStampOfWalGroup(String)","getSizeOfLogQueue()","incrSizeOfHFileRefsQueue(long)","getMetricsContext()","getMetricsJmxContext()","incrLogEditsFiltered(long)","decrSizeOfHFileRefsQueue(int)","incGauge(String, long)","updateHistogram(String, long)","init()"],"org.apache.hadoop.hbase.ipc.AbstractRpcClient":["cleanupIdleConnections()","isTcpNoDelay()","createBlockingRpcChannel(ServerName, User, int)","getPoolType(Configuration)","nextCallId()","onCallFinished(Call, HBaseRpcController, InetSocketAddress, RpcCallback)","cancelConnections(ServerName)","getPoolSize(Configuration)","getConnection(ConnectionId)","configureHBaseRpcController(RpcController, int)","hasCellBlockSupport()","getCompressor(Configuration)","getCodec()","createAddr(ServerName)","callBlockingMethod(Descriptors.MethodDescriptor, HBaseRpcController, Message, Message, User, InetSocketAddress)","getDefaultCodec(Configuration)","callMethod(Descriptors.MethodDescriptor, HBaseRpcController, Message, Message, User, InetSocketAddress, RpcCallback)","createRpcChannel(ServerName, User, int)","close()"],"org.apache.hadoop.hbase.regionserver.HStore":["moveCompactedFilesIntoPlace(CompactionRequestImpl, List, User)","createStoreFileAndReader(Path)","getScanners(boolean, boolean, boolean, ScanQueryMatcher, byte[], boolean, byte[], boolean, long)","determineTTLFromFamily(ColumnFamilyDescriptor)","getMaxStoreFileAge()","closeAndArchiveCompactedFiles()","removeCompactedfiles(Collection, boolean)","getMemStoreFlushSize()","timeOfOldestEdit()","preSnapshotOperation()","addToCompactingFiles(Collection)","deleteChangedReaderObserver(ChangedReadersObserver)","isSloppyMemStore()","loadStoreFiles()","refreshStoreFilesInternal(Collection)","startReplayingFromWAL()","triggerMajorCompaction()","getColumnFamilyDescriptor()","createStoreEngine(HStore, Configuration, CellComparator)","createFileContext(Compression.Algorithm, boolean, boolean, Encryption.Context)","getCompactionProgress()","registerChildren(ConfigurationManager)","getMaxSequenceId()","compactRecentForTestingAssumingDefaultPolicy(int)","createCacheConf(ColumnFamilyDescriptor)","getHRegion()","closeAndArchiveCompactedFiles(boolean)","getStoreSizeUncompressed()","refreshStoreFiles()","setScanInfo(ScanInfo)","getStoreFileTtl()","getMemstore()","getComparator()","getTotalStaticBloomSize()","requestCompaction()","getScanner(Scan, NavigableSet, long)","getCloseCheckInterval()","logCompactionEndMessage(CompactionRequestImpl, List, long, long)","getCacheConfig()","getChecksumType(Configuration)","bulkLoadHFile(byte[], String, Path)","shouldPerformMajorCompaction()","heapSize()","getTotalUncompressedBytes(List)","getCompactedFilesCount()","updateSpaceQuotaAfterFileReplacement(RegionSizeStore, RegionInfo, Collection, Collection)","canSplit()","getStoreHomedir(Path, RegionInfo, byte[])","snapshot()","setDataBlockEncoderInTest(HFileDataBlockEncoder)","bulkLoadHFile(HStoreFile)","close()","throttleCompaction(long)","getCompactedCellsCount()","getMaxMemStoreTS()","getStorefilesSize()","flushCache(long, MemStoreSnapshot, MonitoredTask, ThroughputController, FlushLifeCycleTracker)","getStoreFileAgeStream()","getFlushedCellsCount()","getNumReferenceFiles()","getRegionFileSystem()","requestCompaction(int, CompactionLifeCycleTracker, User)","getMinStoreFileAge()","openStoreFiles(Collection)","getScanners(List, boolean, boolean, boolean, ScanQueryMatcher, byte[], boolean, byte[], boolean, long, boolean)","getScanners(boolean, boolean, boolean, boolean, ScanQueryMatcher, byte[], byte[], long)","removeUnneededFiles()","add(Cell, MemStoreSizing)","onConfigurationChange(Configuration)","isPrimaryReplicaStore()","getOffPeakHours()","replayCompactionMarker(CompactionDescriptor, boolean, boolean)","postSnapshotOperation()","getAvgStoreFileAge()","commitFile(Path, long, MonitoredTask)","getCompactionPressure()","moveFileIntoPlace(Path)","getStorefilesSize(Collection, Predicate)","getStorefilesRootLevelIndexSize()","getStoreHomedir(Path, String, byte[])","replaceStoreFiles(Collection, Collection)","getHFilesSize()","getCoprocessorHost()","getFlushedCellsSize()","reportArchivedFilesForQuota(List, List)","createStoreFileAndReader(StoreFileInfo)","getTotalSize(Collection)","getScanners(List, boolean, boolean, boolean, boolean, ScanQueryMatcher, byte[], byte[], long, boolean)","hasReferences()","recreateScanners(List, boolean, boolean, boolean, ScanQueryMatcher, byte[], boolean, byte[], boolean, long, boolean)","bulkLoadHFile(StoreFileInfo)","getCompactedCellsSize()","getFileSystem()","upsert(Iterable, long, MemStoreSizing)","toString()","getCompactedFiles()","deregisterChildren(ConfigurationManager)","getCompactionCheckMultiplier()","getMajorCompactedCellsCount()","getBlockingFileCount()","assertBulkLoadHFileOk(Path)","addChangedReaderObserver(ChangedReadersObserver)","getSplitPoint()","getTotalStaticIndexSize()","getDataBlockEncoder()","stopReplayingFromWAL()","getFlushedOutputFileSize()","getStorefilesFieldSize(ToLongFunction)","needsCompaction()","getColumnFamilyName()","getStorefiles()","hasTooManyStoreFiles()","writeCompactionWalRecord(Collection, Collection)","getStorefilesCount()","clearAndClose(List)","cancelRequestedCompaction(CompactionContext)","getStorefileFieldSize(HStoreFile, ToLongFunction)","add(Iterable, MemStoreSizing)","doCompaction(CompactionRequestImpl, Collection, User, long, List)","getMajorCompactedCellsSize()","validateStoreFile(Path)","getNumHFiles()","getCompactPriority()","getScanInfo()","preFlushSeqIDEstimation()","preBulkLoadHFile(String, long)","getMemStoreSize()","getSnapshotSize()","createFlushContext(long, FlushLifeCycleTracker)","getStoreFileSize(HStoreFile)","compact(CompactionContext, ThroughputController, User)","finishCompactionRequest(CompactionRequestImpl)","versionsToReturn(int)","createScanner(Scan, ScanInfo, NavigableSet, long)","getCurrentParallelPutCount()","createWriterInTmp(long, Compression.Algorithm, boolean, boolean, boolean, boolean)","getSmallestReadPoint()","getLastCompactSize()","getSize()","getTableName()","notifyChangedReadersObservers(List)","areWritesEnabled()","clearCompactedfiles(List)","getBytesPerChecksum(Configuration)","updateStorefiles(List, long)","getStoreEngine()","completeCompaction(Collection)","getFlushableSize()","refreshStoreFiles(Collection)","getRegionInfo()"],"org.apache.hadoop.hbase.regionserver.SecureBulkLoadManager.SecureBulkLoadListener":["doneBulkLoad(byte[], String)","closeSrcFs()","isFile(Path)","prepareBulkLoad(byte[], String, boolean)","failedBulkLoad(byte[], String)"],"org.apache.hadoop.hbase.client.HBaseAdmin":["splitRegionSync(byte[], byte[])","clearCompactionQueues(ServerName, Set)","listTableDescriptorsByNamespace(String)","getRpcControllerFactory()","majorCompactRegionServer(ServerName)","splitRegionAsync(byte[], byte[])","getTableDescriptor(TableName, Connection, RpcRetryingCallerFactory, RpcControllerFactory, int, int)","removeReplicationPeerTableCFs(String, Map)","modifyTable(TableDescriptor)","compactRegion(byte[], byte[], boolean)","assign(byte[])","getCompactionStateForRegion(byte[])","restoreSnapshot(String)","decommissionRegionServers(List, boolean)","restoreSnapshot(String, boolean)","disableReplicationPeerAsync(String)","setQuota(QuotaSettings)","updateReplicationPeerConfigAsync(String, ReplicationPeerConfig)","shutdown()","createTable(TableDescriptor, byte[][])","listReplicatedTableCFs()","normalize()","removeReplicationPeer(String)","restoreSnapshot(String, boolean, boolean)","deleteTable(TableName)","isProcedureFinished(String, String, Map)","splitOrMergeSwitch(boolean, boolean, MasterSwitchType)","getClusterMetrics(EnumSet)","deleteNamespaceAsync(String)","listSnapshots(Pattern)","getTableRegions(TableName)","majorCompact(TableName, byte[], CompactType)","runCatalogJanitor()","isAborted()","asyncSnapshot(SnapshotProtos.SnapshotDescription)","splitRegionAsync(RegionInfo, byte[])","recommissionRegionServer(ServerName, List)","balancerSwitch(boolean, boolean)","listNamespaceDescriptors()","compact(TableName)","clearBlockCache(ServerName, List)","snapshot(String, TableName, SnapshotType)","disableTables(Pattern)","mergeSwitch(boolean, boolean)","enableReplicationPeerAsync(String)","clearDeadServers(List)","getTableDescriptor(TableName)","deleteTables(String)","getRegions(ServerName)","listTableNames()","compactRegionServer(ServerName)","splitRegionSync(byte[], byte[], long, TimeUnit)","mergeRegions(byte[], byte[], boolean)","modifyTableAsync(TableName, TableDescriptor)","rollHLogWriter(String)","internalRestoreSnapshotAsync(String, TableName, boolean)","snapshot(byte[], TableName)","cloneTableSchema(TableName, TableName, boolean)","split(TableName)","getRegionName(byte[])","modifyTableAsync(TableDescriptor)","listTableDescriptors(List)","listReplicationPeers()","enableReplicationPeer(String)","isCatalogJanitorEnabled()","executeCallable(C)","listTableNames(String)","getRegionMetrics(ServerName, TableName)","getLocks()","getDescriptor(TableName)","deleteColumnFamilyAsync(TableName, byte[])","getRegions(TableName)","listTables(String)","coprocessorService()","listTables(Pattern, boolean)","enableTableReplication(TableName)","updateConfiguration()","normalizerSwitch(boolean)","majorCompact(TableName, CompactType)","disableTable(TableName)","checkAndSyncTableDescToPeers(TableName, byte[][])","closeRegion(ServerName, HRegionInfo)","majorCompact(TableName, byte[])","restoreSnapshot(byte[], boolean)","mergeRegionsAsync(byte[], byte[], boolean)","disableReplicationPeer(String)","abort(String, Throwable)","listTableNames(String, boolean)","catalogJanitorSwitch(boolean)","mergeRegionsSync(byte[], byte[], boolean)","getOperationTimeout()","disableTableAsync(TableName)","cleanerChoreSwitch(boolean)","compact(TableName, CompactType)","getConfiguration()","snapshot(String, TableName)","listSnapshots(String)","enableTableAsync(TableName)","createNamespace(NamespaceDescriptor)","available(Configuration)","getReplicationPeerConfig(String)","offline(byte[])","closeRegion(String, String)","disableTableReplication(TableName)","abortProcedureAsync(long, boolean)","enableTable(TableName)","enableTables(String)","createTableAsync(TableDescriptor, byte[][])","internalDeleteSnapshot(SnapshotDescription)","split(TableName, byte[])","getPauseTime(int)","listTableNamesByNamespace(String)","deleteNamespace(String)","balance(boolean)","snapshot(SnapshotDescription)","splitSwitch(boolean, boolean)","snapshotAsync(SnapshotDescription)","compact(TableName, byte[])","clearBlockCache(TableName)","compact(AdminService.BlockingInterface, RegionInfo, boolean, byte[])","cloneSnapshotAsync(String, TableName)","deleteSnapshots(String)","getHTableDescriptor(TableName, Connection, RpcRetryingCallerFactory, RpcControllerFactory, int, int)","isCleanerChoreEnabled()","isSnapshotFinished(SnapshotDescription)","listTableDescriptors(Pattern, boolean)","getQuota(QuotaFilter)","getAlterStatus(byte[])","addReplicationPeerAsync(String, ReplicationPeerConfig, boolean)","rollWALWriterImpl(ServerName)","restoreSnapshotAsync(String)","checkTableExists(TableName)","execProcedure(String, String, Map)","getRegion(byte[])","updateConfiguration(ServerName)","createNamespaceAsync(NamespaceDescriptor)","getTableNameBeforeRestoreSnapshot(String)","setTableRep(TableName, boolean)","getSecurityCapabilities()","removeReplicationPeerAsync(String)","listTableSnapshots(Pattern, Pattern)","listTableDescriptorsByNamespace(byte[])","listDecommissionedRegionServers()","getConnection()","deleteTables(Pattern)","compact(TableName, byte[], CompactType)","isTableDisabled(TableName)","compactRegion(byte[])","isBalancerEnabled()","majorCompactRegion(byte[], byte[])","listTableNames(Pattern, boolean)","deleteColumn(TableName, byte[])","getQuotaRetriever(QuotaFilter)","rollWALWriter(ServerName)","modifyTable(TableName, TableDescriptor)","deleteTableAsync(TableName)","modifyColumnFamily(TableName, ColumnFamilyDescriptor)","addColumnFamily(TableName, ColumnFamilyDescriptor)","deleteColumnFamily(TableName, byte[])","close()","deleteTableSnapshots(Pattern, Pattern)","splitRegion(byte[])","compact(TableName, byte[], boolean, CompactType)","truncateTable(TableName, boolean)","flush(TableName)","deleteTableSnapshots(String, String)","listTables(String, boolean)","modifyNamespace(NamespaceDescriptor)","closeRegion(byte[], String)","runCleanerChore()","deleteSnapshot(byte[])","appendReplicationPeerTableCFs(String, Map)","createTable(TableDescriptor, byte[], byte[], int)","majorCompactRegion(byte[])","executeCallable(C, RpcRetryingCallerFactory, int, int)","mergeRegionsAsync(byte[][], boolean)","getLastMajorCompactionTimestampForRegion(byte[])","getAlterStatus(TableName)","unassign(byte[], boolean)","cloneSnapshot(byte[], TableName)","getLastMajorCompactionTimestamp(TableName)","deleteSnapshot(String)","listTableNames(Pattern)","listTableSnapshots(String, String)","listTableDescriptors(Pattern)","execProcedureWithReturn(String, String, Map)","majorCompact(TableName)","isSplitEnabled()","compactRegion(byte[], byte[])","flushRegionServer(ServerName)","get(Future, long, TimeUnit)","isMasterInMaintenanceMode()","move(byte[], byte[])","createTable(TableDescriptor)","disableTables(String)","addColumnFamilyAsync(TableName, ColumnFamilyDescriptor)","stopRegionServer(String)","enableTables(Pattern)","listSnapshots()","flushRegion(byte[])","balance()","flush(AdminService.BlockingInterface, RegionInfo)","getOnlineRegions(ServerName)","coprocessorService(ServerName)","isTableAvailable(TableName, byte[][])","isTableEnabled(TableName)","deleteSnapshots(Pattern)","tableExists(TableName)","isNormalizerEnabled()","getProcedures()","cloneSnapshot(String, TableName)","isMergeEnabled()","cloneSnapshot(String, TableName, boolean)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","closeRegionWithEncodedRegionName(String, String)","restoreSnapshot(byte[])","listTables(Pattern)","addReplicationPeer(String, ReplicationPeerConfig, boolean)","modifyColumnFamilyAsync(TableName, ColumnFamilyDescriptor)","listTables()","abortProcedure(long, boolean)","getTableDescriptors(List)","getTableSplits(TableName)","getNamespaceDescriptor(String)","splitRegion(byte[], byte[])","isTableAvailable(TableName)","getCompactionState(TableName)","listReplicationPeers(Pattern)","stopMaster()","listTableDescriptors()","modifyNamespaceAsync(NamespaceDescriptor)","getTableDescriptorsByTableName(List)","truncateTableAsync(TableName, boolean)","getCompactionState(TableName, CompactType)"],"org.apache.hadoop.hbase.util.HFileArchiveUtil":["getArchivePath(Path)","getStoreArchivePathForRootDir(Path, RegionInfo, byte[])","getArchivePath(Configuration)","getRegionArchiveDir(Path, TableName, String)","getStoreArchivePath(Configuration, RegionInfo, Path, byte[])","getTableName(Path)","getTableArchivePath(Configuration, TableName)","getRegionArchiveDir(Path, TableName, Path)","getTableArchivePath(Path, TableName)","getStoreArchivePath(Configuration, TableName, String, String)","getStoreArchivePath(Configuration, RegionInfo, byte[])"],"org.apache.hadoop.hbase.master.snapshot.SnapshotManager":["prepareToTakeSnapshot(SnapshotDescription)","takeSnapshotInternal(SnapshotDescription)","getProcedureSignature()","takeSnapshot(SnapshotDescription)","checkSnapshotSupport(Configuration, MasterFileSystem)","cleanupCompletedRestoreInMap()","stop(String)","setSnapshotHandlerForTesting(TableName, SnapshotSentinel)","snapshotDisabledTable(SnapshotDescription)","isStopped()","execProcedure(ProcedureDescription)","restoreSnapshot(SnapshotDescription, TableDescriptor, NonceKey, boolean)","restoreSnapshot(SnapshotDescription, TableName, SnapshotDescription, TableDescriptor, NonceKey, boolean)","cleanupSentinels()","getCompletedSnapshots(Path, boolean)","isTakingSnapshot(SnapshotDescription)","removeSentinelIfFinished(Map, SnapshotDescription)","deleteSnapshot(SnapshotDescription)","isTakingSnapshot(TableName)","cleanupSentinels(Map)","snapshotEnabledTable(SnapshotDescription)","cloneSnapshot(SnapshotDescription, TableDescriptor, NonceKey, boolean)","snapshotTable(SnapshotDescription, TakeSnapshotHandler)","toSnapshotDescription(ProcedureDescription)","isProcedureDone(ProcedureDescription)","getCompletedSnapshots()","isSnapshotDone(SnapshotDescription)","getCoordinator()","resetTempDir()","checkPermissions(ProcedureDescription, AccessChecker, User)","getTakingSnapshotLock()","initialize(MasterServices, MetricsMaster)","restoreOrCloneSnapshot(SnapshotDescription, NonceKey, boolean)","isTakingAnySnapshot()","cloneSnapshot(SnapshotDescription, TableName, SnapshotDescription, TableDescriptor, NonceKey, boolean)","isRestoringTable(TableName)","isSnapshotCompleted(SnapshotDescription)","checkSnapshotSupport()"],"org.apache.hadoop.hbase.snapshot.SnapshotInfo.SnapshotStats":["getLogsCount()","getStoreFilesCount()","getArchivedStoreFileSize()","getMobStoreFilesSize()","getArchivedStoreFilesCount()","getSnapshotDescription()","getMissingLogsCount()","isArchivedFileStillReferenced(Path, Map)","addStoreFile(RegionInfo, String, SnapshotRegionManifest.StoreFile, Map)","getSharedStoreFilesSize()","getNonSharedArchivedStoreFilesSize()","getMobStoreFilePercentage()","getMobStoreFilesCount()","getSharedStoreFilePercentage()","getLogsSize()","getCorruptedStoreFilesCount()","addLogFile(String, String)","getStoreFilesSize()","getMissingStoreFilesCount()","isSnapshotCorrupted()"],"org.apache.hadoop.hbase.regionserver.RemoteProcedureResultReporter":["run()","complete(long, Throwable)"],"org.apache.hadoop.hbase.wal.WALEdit":["getOrCreateFamilies()","getRegionEventDescriptor(Cell)","createCompaction(RegionInfo, CompactionDescriptor)","addFamily(byte[])","getCells()","heapSize()","createRegionEventWALEdit(RegionInfo, RegionEventDescriptor)","getCompaction(Cell)","add(Cell)","createFlushWALEdit(RegionInfo, FlushDescriptor)","isRegionCloseMarker()","readFromCells(Codec.Decoder, int)","getFlushDescriptor(Cell)","isMetaEdit()","createBulkLoadEvent(RegionInfo, WALProtos.BulkLoadDescriptor)","isReplay()","isEmpty()","estimatedSerializedSizeOf()","createRegionEventDescriptorQualifier(RegionEventDescriptor.EventType)","add(Cell, byte[])","toString()","setCells(ArrayList)","add(Map)","createRegionEventWALEdit(byte[], RegionEventDescriptor)","isMetaEditFamily(byte[])","isMetaEditFamily(Cell)","isCompactionMarker(Cell)","getRowForRegion(RegionInfo)","getBulkLoadDescriptor(Cell)","getFamilies()","addCell(Cell)","size()"],"org.apache.hadoop.hbase.ipc.ServerRpcConnection":["getHostAddress()","createUser(ConnectionHeader)","processPreamble(ByteBuffer)","processOneRpc(ByteBuff)","processConnectionHeader(ByteBuff)","getAuthorizedUgi(String)","setupCellBlockCodecs(ConnectionHeader)","getByteString(byte[])","processUnwrappedData(byte[])","doBadPreambleHandling(String, Exception)","getHostInetAddress()","getErrorResponse(String, Exception)","getVersionInfo()","doBadPreambleHandling(String)","processRequest(ByteBuff)","getFatalConnectionString(int, byte)","responseConnectionHeader(RPCProtos.ConnectionHeaderResponse.Builder)","toString()","authorizeConnection()","disposeSasl()","setupCryptoCipher(ConnectionHeader, RPCProtos.ConnectionHeaderResponse.Builder)","getRemotePort()","doRawSaslReply(SaslStatus, Writable, String, String)","saslReadAndProcess(ByteBuff)"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationSourceWALReader":["updateBatchStats(WALEntryBatch, Entry, long)","sizeOfStoreFilesIncludeBulkLoad(WALEdit)","addEntryToBatch(WALEntryBatch, Entry)","switched(WALEntryStream, Path)","handleEmptyWALEntryBatch(Path)","getCurrentPath()","getEntrySizeIncludeBulkLoad(Entry)","handleEofException(IOException)","filterEntry(Entry)","checkQuota()","readWALEntries(WALEntryStream)","acquireBufferQuota(long)","run()","poll(long)","take()","isReaderRunning()","getEntrySizeExcludeBulkLoad(Entry)","countDistinctRowKeysAndHFiles(WALEdit)","createBatch(WALEntryStream)","setReaderRunning(boolean)"],"org.apache.hadoop.hbase.wal.DisabledWALProvider":["getLogFileSize()","getWAL(RegionInfo)","addWALActionsListener(WALActionsListener)","getNumLogFiles()","getWALs()","shutdown()","init(WALFactory, Configuration, String)","close()"],"org.apache.hadoop.hbase.regionserver.wal.AbstractFSWAL":["appendEntry(W, FSWALEntry)","tellListenersAboutPreLogRoll(Path, Path)","postAppend(Entry, long)","postSync(long, int)","getCoprocessorHost()","startCacheFlush(byte[], Map)","findRegionsToForceFlush()","getFilenum()","getNumRolledLogFiles()","usage()","isLogRollRequested()","split(Configuration, Path)","completeCacheFlush(byte[])","toString()","shutdown()","atHeadOfRingBufferEventHandlerAppend()","getOldPath()","getNewPath()","logRollAndSetupWalProps(Path, Path, long)","getFileNumFromFileName(Path)","ensureIOException(Throwable)","convertInterruptedExceptionToIOException(InterruptedException)","rollWriter()","blockOnSync(SyncFuture)","getEarliestMemStoreSeqNum(byte[], byte[])","archiveLogFile(Path)","getLogFileSize()","getCurrentFileName()","computeFilename(long)","appendData(RegionInfo, WALKeyImpl, WALEdit)","unregisterWALActionsListener(WALActionsListener)","isUnflushedEntries()","rollWriter(boolean)","cleanOldLogs()","getFiles()","getLogFileSizeIfBeingWritten(Path)","getNumLogFiles()","replaceWriter(Path, Path, W)","checkLogLowReplication(long)","getEarliestMemStoreSeqNum(byte[])","main(String[])","close()","appendMarker(RegionInfo, WALKeyImpl, WALEdit)","getWALArchivePath(Path, Path)","requestLogRoll(boolean)","startCacheFlush(byte[], Set)","abortCacheFlush(byte[])","calculateMaxLogFiles(Configuration, long)","requestLogRoll()","tellListenersAboutPostLogRoll(Path, Path)","updateStore(byte[], byte[], Long, boolean)","getUnflushedEntriesCount()","getPreallocatedEventCount()","registerWALActionsListener(WALActionsListener)","stampSequenceIdAndPublishToRingBuffer(RegionInfo, WALKeyImpl, WALEdit, boolean, RingBuffer)","getSyncFuture(long, boolean)","init()"],"org.apache.hadoop.hbase.ipc.RpcConnection":["relogin()","scheduleTimeoutTask(Call)","getLastTouched()","shouldAuthenticateOverKrb()","getUserInfo(UserGroupInformation)","getConnectionHeaderPreamble()","getConnectionHeader()","getUGI()","remoteId()","setLastTouched(long)"],"org.apache.hadoop.hbase.util.HbckTableInfo":["getRegionsFromMeta(TreeMap)","getNumRegions()","handleOverlapsParallel(TableIntegrityErrorHandler, byte[])","getTableDescriptor()","getName()","checkRegionChain(TableIntegrityErrorHandler)","addRegionInfo(HbckRegionInfo)","dump(SortedSet, Multimap)","dumpSidelinedRegions(Map)","addServer(ServerName)","dumpOverlapProblems(Multimap)"],"org.apache.hadoop.hbase.security.token.TokenUtil":["getAuthToken(Configuration, User)","injectFault()","getClusterId(Token)","obtainToken(Connection)","toToken(AuthenticationProtos.Token)","toToken(Token)","addTokenIfMissing(Connection, User)","obtainAndCacheToken(Connection, User)","addTokenForJob(Connection, JobConf, User)","obtainTokenForJob(Connection, JobConf, User)","obtainToken(Connection, User)","obtainToken(Configuration)","obtainTokenForJob(Connection, User, Job)","addTokenForJob(Connection, User, Job)"],"org.apache.hadoop.hbase.snapshot.RestoreSnapshotHelper":["restoreHdfsRegions(ThreadPoolExecutor)","cloneRegion(Path, RegionInfo, SnapshotRegionManifest)","restoreHdfsRegions(ThreadPoolExecutor, Map, List)","restoreStoreFile(Path, RegionInfo, SnapshotRegionManifest.StoreFile, boolean)","cloneRegionInfo(RegionInfo)","restoreMobRegion(RegionInfo, SnapshotRegionManifest)","getRegionHFileReferences(SnapshotRegionManifest)","restoreHdfsMobRegions(ThreadPoolExecutor, Map, List)","cloneHdfsRegions(ThreadPoolExecutor, Map, List)","restoreHdfsRegions()","getTableRegionFamilyFiles(Path)","cloneHdfsMobRegion(Map, RegionInfo)","removeHdfsRegions(ThreadPoolExecutor, List)","restoreRegion(RegionInfo, SnapshotRegionManifest, Path)","copySnapshotForScanner(Configuration, FileSystem, Path, Path, String)","cloneRegion(HRegion, RegionInfo, SnapshotRegionManifest)","cloneRegionInfo(TableName, RegionInfo)","getTableRegions()","restoreSnapshotAcl(SnapshotDescription, TableName, Configuration)","restoreReferenceFile(Path, RegionInfo, SnapshotRegionManifest.StoreFile)","restoreRegion(RegionInfo, SnapshotRegionManifest)"],"org.apache.hadoop.hbase.util.HBaseFsck":["sidelineFile(FileSystem, Path, Path)","setFixEmptyMetaCells(boolean)","processRegionServers(Collection)","recordMetaRegion()","setMaxMerge(int)","shouldRemoveParents()","connect()","isExclusive()","setSummary()","includeTable(TableName)","unlockHbck()","setFixSplitParents(boolean)","setFixVersionFile(boolean)","setCleanReplicationBarrier(boolean)","setFixReplication(boolean)","setFixHdfsHoles(boolean)","setFixHFileLinks(boolean)","setForceExclusive()","setFixMeta(boolean)","shouldFixSplitParents()","getErrors()","setFixAssignments(boolean)","shouldFixMeta()","setIgnorePreCheckPermission(boolean)","getMaxMerge()","onlineConsistencyRepair()","fabricateTableInfo(FSTableDescriptors, TableName, Set)","fixOrphanTables()","addSkippedRegion(HbckRegionInfo)","getMaxOverlapsToSideline()","setRetCode(int)","checkRegionConsistency(String, HbckRegionInfo)","shouldFixHdfsHoles()","getColumnFamilyList(Set, HbckRegionInfo)","isTableDisabled(TableName)","printTableSummary(SortedMap)","getRetCode()","setFixHdfsOverlaps(boolean)","setHFileCorruptionChecker(HFileCorruptionChecker)","mergeRegionDirs(Path, HbckRegionInfo)","getSidelineDir()","getTmpDir(Configuration)","cleanupHbckZnode()","checkIntegrity()","shouldFixHdfsOrphans()","checkAndFixReplication()","shouldFixAssignments()","setFixReferenceFiles(boolean)","main(String[])","close()","reportEmptyMetaCells()","sidelineRegionDir(FileSystem, HbckRegionInfo)","setFixTableOrphans(boolean)","setShouldRerun()","isTableIncluded(TableName)","offlineHLinkFileRepair()","getMetaRegionServerName(int)","resetSplitParent(HbckRegionInfo)","shouldRerun()","printUsageAndExit()","loadMetaEntries()","setMasterInMaintenanceMode()","keyOnly(byte[])","setCleanReplicationBarrierTable(String)","restoreHdfsIntegrity()","preCheckPermission()","getHFilecorruptionChecker()","deleteMetaRegion(byte[])","shouldFixHFileLinks()","offlineReferenceFileRepair()","setRegionBoundariesCheck()","setMaxOverlapsToSideline(int)","createThreadPool(Configuration)","undeployRegions(HbckRegionInfo)","shouldIgnorePreCheckPermission()","createLockRetryCounterFactory(Configuration)","reportTablesInFlux()","setRemoveParents(boolean)","assignMetaReplica(int)","checkRegionConsistencyConcurrently(List)","createHFileCorruptionChecker(boolean)","loadHdfsRegionDirs()","checkAndFixTableStates()","adoptHdfsOrphan(HbckRegionInfo)","exec(ExecutorService, String[])","isOptionsSupported(String[])","checkRegionBoundaries()","setFixHdfsOrphans(boolean)","tryAssignmentRepair(HbckRegionInfo, String)","debugLsr(Configuration, Path, HbckErrorReporter)","shouldCheckHdfs()","setSidelineBigOverlaps(boolean)","fixEmptyMetaCells()","clearState()","onlineHbck()","createZooKeeperWatcher()","deleteMetaRegion(HbckRegionInfo)","setSidelineDir(String)","shouldFixVersionFile()","getIncludedTables()","adoptHdfsOrphans(Collection)","getOrCreateInfo(String)","loadDeployedRegions()","getErrorReporter(Configuration)","loadTableStates()","offline(byte[])","checkMetaRegion()","setDisplayFullReport()","shouldDisplayFullReport()","shouldSidelineBigOverlaps()","shouldFixReferenceFiles()","unassignMetaReplica(HbckRegionInfo)","logParallelMerge()","offlineHdfsIntegrityRepair()","getTableDescriptors(List)","getTables(AtomicInteger)","undeployRegionsForHbi(HbckRegionInfo)","shouldFixTableOrphans()","shouldFixHdfsOverlaps()","debugLsr(Path)","sidelineRegionDir(FileSystem, String, HbckRegionInfo)","setCheckMetaOnly()","checkAndMarkRunningHbck(Configuration, RetryCounter)","shouldFixEmptyMetaCells()","setTimeLag(long)","cleanReplicationBarrier()","closeRegion(HbckRegionInfo)","setCheckHdfs(boolean)","loadHdfsRegionInfos()","createZnodeRetryCounterFactory(Configuration)","checkAndFixConsistency()","loadTableInfosForTablesWithNoRegion()","debugLsr(Configuration, Path)","checkHdfsIntegrity(boolean, boolean)"],"org.apache.hadoop.hbase.security.token.ZKSecretWatcher":["updateKeyInZK(AuthenticationKey)","refreshKeys()","refreshNodes(List)","start()","addKeyToZK(AuthenticationKey)","getRootKeyZNode()","nodeChildrenChanged(String)","removeKeyFromZK(AuthenticationKey)","nodeCreated(String)","getKeysParentZNode()","getKeyNode(int)","nodeDataChanged(String)","nodeDeleted(String)"],"org.apache.hadoop.hbase.regionserver.MemStoreFlusher.FlushHandler":["run()"],"org.apache.hadoop.hbase.tool.CanaryTool.RegionStdOutSink":["publishReadTiming(ServerName, RegionInfo, ColumnFamilyDescriptor, long)","publishWriteTiming(ServerName, RegionInfo, ColumnFamilyDescriptor, long)","initializeWriteLatency()","publishReadFailure(ServerName, RegionInfo, Exception)","getRegionMap()","initializeAndGetReadLatencyForTable(String)","publishWriteFailure(ServerName, RegionInfo, Exception)","publishWriteFailure(ServerName, RegionInfo, ColumnFamilyDescriptor, Exception)","getReadLatencyMap()","getWriteLatency()","publishReadFailure(ServerName, RegionInfo, ColumnFamilyDescriptor, Exception)","getTotalExpectedRegions()"],"org.apache.hadoop.hbase.master.MasterMetaBootstrap":["unassignExcessMetaReplica(int)","assignMetaReplicas()"],"org.apache.hadoop.hbase.master.CatalogJanitor":["scan()","cleanMergeRegion(RegionInfo, List)","initialChore()","hasNoReferences(Pair)","cleanMergeQualifier(RegionInfo)","cleanParent(RegionInfo, Result)","getEnabled()","chore()","setEnabled(boolean)","scanForReport()","getLastReport()","getDescriptor(TableName)","checkLog4jProperties()","isMetaLoaded(AssignmentManager)","isRIT(AssignmentManager)","checkDaughterInFs(RegionInfo, RegionInfo)","main(String[])"],"org.apache.hadoop.hbase.ipc.NettyRpcConnection":["shutdown0()","scheduleRelogin(Throwable)","shutdown()","sendRequest(Call, HBaseRpcController)","failInit(Channel, IOException)","saslNegotiate(Channel)","established(Channel)","write(Channel, Call)","callTimeout(Call)","isActive()","connect()","cleanupConnection()"],"org.apache.hadoop.hbase.io.hfile.HFile.WriterFactory":["withPath(FileSystem, Path)","withShouldDropCacheBehind(boolean)","withComparator(CellComparator)","withFileContext(HFileContext)","withOutputStream(FSDataOutputStream)","create()","withFavoredNodes(InetSocketAddress[])"],"org.apache.hadoop.hbase.quotas.NamespaceQuotaSnapshotStore":["getSpaceQuota(String)","filterBySubject(String)","getTargetState(String, SpaceQuota)","getCurrentState(String)","setCurrentState(String, SpaceQuotaSnapshot)","getQuotaForNamespace(String)","setRegionUsage(Map)"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher.RegionOpenOperation":["isFailedOpen()","setFailedOpen(boolean)","buildRegionOpenInfoRequest(MasterProcedureEnv)"],"org.apache.hadoop.hbase.replication.regionserver.RegionReplicaReplicationEndpoint":["init(Context)","getDefaultThreadPool(Configuration)","getScopeWALEntryFilter()","replicate(ReplicateContext)","doStart()","doStop()","canReplicateToSameCluster()"],"org.apache.hadoop.hbase.master.balancer.SimpleLoadBalancer":["addRegionPlan(MinMaxPriorityQueue, boolean, ServerName, List)","onConfigurationChange(Configuration)","balanceCluster(TableName, Map)","balanceCluster(Map)","setClusterLoad(Map)","balanceOverall(List, Map, boolean, MinMaxPriorityQueue, int, int)","overallNeedsBalance()","setLoad(List, int, int)"],"org.apache.hadoop.hbase.client.AsyncNonMetaRegionLocator":["locateInCache(TableCache, TableName, byte[], int, RegionLocateType)","addToCache(TableCache, RegionLocations)","updateCachedLocationOnError(HRegionLocation, Throwable)","clearCache(TableName)","getRegionLocationsInternal(TableName, byte[], int, RegionLocateType, boolean)","locateRowBeforeInCache(TableCache, TableName, byte[], int)","removeLocationFromCache(HRegionLocation)","getTableCache(TableName)","complete(TableName, LocateRequest, RegionLocations, Throwable)","locateRowInCache(TableCache, TableName, byte[], int)","addLocationToCache(HRegionLocation)","getRegionLocationInCache(TableName, byte[])","locateInMeta(TableName, LocateRequest)","getCachedLocation(HRegionLocation)","onScanNext(TableName, LocateRequest, Result)","getRegionLocations(TableName, byte[], int, RegionLocateType, boolean)","isEqual(RegionLocations, RegionLocations)"],"org.apache.hadoop.hbase.wal.AbstractFSWALProvider":["getServerNameFromWALDirectoryName(Path)","getLogFileSize()","isMetaFile(Path)","getLogFileSize(WAL)","getServerNameFromWALDirectoryName(Configuration, String)","getWALPrefixFromWALName(String)","init(WALFactory, Configuration, String)","isMetaFile(String)","requestLogRoll(WAL)","openReader(Path, Configuration)","addWALActionsListener(WALActionsListener)","getNumLogFiles()","getWALDirectoryName(String)","close()","getWALArchiveDirectoryName(Configuration, String)","getNumRolledLogFiles(WAL)","recoverLease(Configuration, Path)","extractFileNumFromWAL(WAL)","getWALs()","shutdown()","isArchivedLogFile(Path)","validateWALFilename(String)","getWAL(RegionInfo)","getCurrentFileName(WAL)","getArchivedLogPath(Path, Configuration)"],"org.apache.hadoop.hbase.regionserver.Segment":["updateMetaInfo(Cell, boolean, boolean, MemStoreSizing)","getHeapSize()","setCellSet(CellSet, CellSet)","headSet(Cell)","indexEntryOffHeapSize(boolean)","getCellSet()","tailSet(Cell)","getDataSize()","getCellsCount()","getMinSequenceId()","getOffHeapSize()","compare(Cell, Cell)","last()","getScanners(long)","maybeCloneWithAllocator(Cell, boolean)","compareRows(Cell, Cell)","getTimeRangeTracker()","getMemStoreSize()","indexEntryOnHeapSize(boolean)","shouldSeek(TimeRange, long)","decScannerCount()","internalAdd(Cell, boolean, MemStoreSizing)","getScanner(long)","close()","incMemStoreSize(long, long, long, int)","isEmpty()","heapSizeChange(Cell, boolean)","toString()","updateMetaInfo(Cell, boolean, MemStoreSizing)","dump(Logger)","getMemStoreLAB()","incScannerCount()","offHeapSizeChange(Cell, boolean)","iterator()","getCellLength(Cell)","isTagsPresent()","getComparator()"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationSyncUp":["run(String[])","main(String[])"],"org.apache.hadoop.hbase.master.TableStateManager":["updateMetaState(TableName, TableState.State)","metaStateDeleted(TableName)","fixTableState(TableState)","getTablesInStates(TableState.State[])","setTableStateIfNotInStates(TableName, TableState.State, TableState.State[])","start()","getTableState(TableName)","readMetaState(TableName)","setTableState(TableName, TableState.State)","setTableStateIfInStates(TableName, TableState.State, TableState.State[])","isTableState(TableName, TableState.State[])","isTablePresent(TableName)","deleteZooKeeper(TableName)","metaStateUpdated(TableName, TableState.State)","fixTableStates(TableDescriptors, Connection)","migrateZooKeeper()","setDeletedTable(TableName)"],"org.apache.hadoop.hbase.util.HBaseFsckRepair":["waitUntilAssigned(Admin, RegionInfo)","forceOfflineInZK(Admin, RegionInfo)","fixMetaHoleOnlineAndAddReplicas(Configuration, RegionInfo, Collection, int)","closeRegionSilentlyAndWait(Connection, ServerName, RegionInfo)","createHDFSRegionDir(Configuration, RegionInfo, TableDescriptor)","removeParentInMeta(Configuration, RegionInfo)","fixMultiAssignment(Connection, RegionInfo, List)","fixUnassigned(Admin, RegionInfo)"],"org.apache.hadoop.hbase.master.snapshot.MasterSnapshotVerifier":["verifyTableInfo(SnapshotManifest)","verifySnapshot(Path, Set)","verifySnapshotDescription(Path)","verifyRegions(SnapshotManifest)","verifyRegionInfo(RegionInfo, SnapshotRegionManifest)"],"org.apache.hadoop.hbase.quotas.QuotaObserverChore":["getRegionReportPercent(Configuration)","pruneOldRegionReports()","updateNamespaceQuota(String, SpaceQuotaSnapshot, SpaceQuotaSnapshot, Multimap)","updateTableQuota(TableName, SpaceQuotaSnapshot, SpaceQuotaSnapshot)","getTableQuotaSnapshot(TableName)","setTableQuotaSnapshot(TableName, SpaceQuotaSnapshot)","getTimeUnit(Configuration)","getTableQuotaSnapshots()","chore()","getNamespaceQuotaSnapshot(String)","setNamespaceQuotaSnapshot(String, SpaceQuotaSnapshot)","fetchAllTablesWithQuotasDefined()","getNamespaceSnapshotStore()","processTablesWithQuotas(Set)","isDisableSpaceViolationPolicy(SpaceViolationPolicy, SpaceViolationPolicy)","processNamespacesWithQuotas(Set, Multimap)","initializeSnapshotStores(Map)","getPeriod(Configuration)","getInitialDelay(Configuration)","getTableSnapshotStore()","getNamespaceQuotaSnapshots()","_chore()"],"org.apache.hadoop.hbase.master.procedure.ServerRemoteProcedure":["remoteOperationDone(MasterProcedureEnv, Throwable)","remoteCallFailed(MasterProcedureEnv, ServerName, IOException)","remoteOperationCompleted(MasterProcedureEnv)","remoteOperationFailed(MasterProcedureEnv, RemoteProcedureException)","completionCleanup(MasterProcedureEnv)","execute(MasterProcedureEnv)"],"org.apache.hadoop.hbase.util.BoundedPriorityBlockingQueue.PriorityQueue":["comparator()","peek()","poll()","contains(Object)","remainingCapacity()","add(E)","upperBound(int, int, E)","size()"],"org.apache.hadoop.hbase.client.AsyncRequestFutureImpl":["createSingleServerRequest(MultiAction, int, ServerName, Set)","decActionCounter(int)","groupAndSendMultiAction(List, int)","getReplicaLocationOrFail(Action)","getNewMultiActionRunnable(ServerName, MultiAction, int)","createLog(int, int, int, ServerName, Throwable, long, boolean, String, int, int)","updateCachedLocations(ServerName, byte[], byte[], Throwable)","waitUntilDone()","waitUntilDone(long)","getNumberOfActionsInProgress()","createServerErrorTracker()","findAllLocationsOrFail(Action, boolean)","getFailedOperations()","createCallable(ServerName, TableName, MultiAction)","sendMultiAction(Map, int, List, boolean)","getCallsInProgress()","isActionComplete(int, Row)","setResult(Action, Object)","receiveGlobalFailure(MultiAction, ServerName, int, Throwable)","manageError(int, Row, Retry, Throwable, ServerName)","setError(int, Row, Throwable, ServerName)","updateStats(ServerName, Map)","cleanServerCache(ServerName, Throwable)","buildDetailedErrorMsg(String, int)","receiveMultiAction(MultiAction, ServerName, MultiResponse, int)","hasError()","getErrors()","manageLocationError(Action, Exception)","startWaitingForReplicaCalls(List)","logNoResubmit(ServerName, int, int, Throwable, int, int)","getResults()","getBackoff(ServerName, byte[])","invokeCallBack(byte[], byte[], CResult)","trySetResultSimple(int, Row, boolean, Object, ServerName, boolean)","resubmit(ServerName, List, int, int, Throwable)","updateResult(int, Object)"],"org.apache.hadoop.hbase.regionserver.compactions.SortedCompactionPolicy":["skipLargeFiles(ArrayList, boolean)","getNextMajorCompactTime(Collection)","selectCompaction(Collection, List, boolean, boolean, boolean)","throttleCompaction(long)","filterBulk(ArrayList)","preSelectCompactionForCoprocessor(Collection, List)","checkMinFilesCriteria(ArrayList, int)","removeExcessFiles(ArrayList, boolean, boolean)","getCurrentEligibleFiles(ArrayList, List)"],"org.apache.hadoop.hbase.client.RegionInfoBuilder":["setRegionId(long)","setReplicaId(int)","newBuilder(RegionInfo)","setOffline(boolean)","build()","setEndKey(byte[])","setSplit(boolean)","newBuilder(TableName)","setStartKey(byte[])"],"org.apache.hadoop.hbase.regionserver.MobStoreScanner":["next(List, ScannerContext)"],"org.apache.hadoop.hbase.master.procedure.InitMetaProcedure":["executeFromState(MasterProcedureEnv, InitMetaState)","waitInitialized(MasterProcedureEnv)","await()","getState(int)","getTableOperationType()","completionCleanup(MasterProcedureEnv)","acquireLock(MasterProcedureEnv)","getStateId(InitMetaState)","getInitialState()","getTableName()","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","rollbackState(MasterProcedureEnv, InitMetaState)"],"org.apache.hadoop.hbase.RegionMetricsBuilder.RegionMetricsImpl":["getReadRequestCount()","getWriteRequestCount()","getUncompressedStoreFileSize()","getCompactedCellCount()","toString()","getCompletedSequenceId()","getRegionName()","getStoreFileRootLevelIndexSize()","getLastMajorCompactionTimestamp()","getStoreFileUncompressedDataIndexSize()","getStoreFileIndexSize()","getCompactingCellCount()","getStoreSequenceId()","getMemStoreSize()","getFilteredReadRequestCount()","getStoreFileCount()","getStoreFileSize()","getStoreCount()","getBloomFilterSize()","getDataLocality()"],"org.apache.hadoop.hbase.master.MasterRpcServices":["createConfigurationSubset()","rpcPreCheck(String)","setSplitOrMergeEnabled(RpcController, SetSplitOrMergeEnabledRequest)","mergeTableRegions(RpcController, MergeTableRegionsRequest)","getTableNames(RpcController, GetTableNamesRequest)","setCleanerChoreRunning(RpcController, SetCleanerChoreRunningRequest)","updateReplicationPeerConfig(RpcController, UpdateReplicationPeerConfigRequest)","recommissionRegionServer(RpcController, RecommissionRegionServerRequest)","addColumn(RpcController, AddColumnRequest)","getQuotaStates(RpcController, GetQuotaStatesRequest)","reportProcedureDone(RpcController, ReportProcedureDoneRequest)","isSplitOrMergeEnabled(RpcController, IsSplitOrMergeEnabledRequest)","execMasterService(RpcController, ClientProtos.CoprocessorServiceRequest)","synchronousBalanceSwitch(boolean)","isMasterRunning(RpcController, IsMasterRunningRequest)","runHbckChore(RpcController, RunHbckChoreRequest)","stopMaster(RpcController, StopMasterRequest)","assignRegion(RpcController, AssignRegionRequest)","createNamespace(RpcController, CreateNamespaceRequest)","getProcedureResult(RpcController, GetProcedureResultRequest)","hasVisibilityLabelsServiceCoprocessor(MasterCoprocessorHost)","checkCoprocessorWithService(List, Class)","getSecurityCapabilities(RpcController, SecurityCapabilitiesRequest)","submitProcedure(HBaseProtos.RegionSpecifier, boolean, BiFunction)","compactMob(CompactRegionRequest, TableName)","deleteColumn(RpcController, DeleteColumnRequest)","getProcedures(RpcController, GetProceduresRequest)","isMasterInMaintenanceMode(RpcController, IsInMaintenanceModeRequest)","getTableState(RpcController, GetTableStateRequest)","offlineRegion(RpcController, OfflineRegionRequest)","getCompletedSnapshots(RpcController, GetCompletedSnapshotsRequest)","listReplicationPeers(RpcController, ListReplicationPeersRequest)","regionServerReport(RpcController, RegionServerReportRequest)","listTableDescriptorsByNamespace(RpcController, ListTableDescriptorsByNamespaceRequest)","getLocks(RpcController, GetLocksRequest)","deleteTable(RpcController, DeleteTableRequest)","removeReplicationPeer(RpcController, RemoveReplicationPeerRequest)","restoreSnapshot(RpcController, RestoreSnapshotRequest)","balance(RpcController, BalanceRequest)","enableReplicationPeer(RpcController, EnableReplicationPeerRequest)","isSnapshotDone(RpcController, IsSnapshotDoneRequest)","requestLock(RpcController, LockRequest)","createRpcServer(Server, Configuration, RpcSchedulerFactory, InetSocketAddress, String)","unassigns(RpcController, MasterProtos.UnassignsRequest)","reportRSFatalError(RpcController, ReportRSFatalErrorRequest)","shouldSubmitSCP(ServerName)","deleteNamespace(RpcController, DeleteNamespaceRequest)","setBalancerRunning(RpcController, SetBalancerRunningRequest)","getLastFlushedSequenceId(RpcController, GetLastFlushedSequenceIdRequest)","bypassProcedure(RpcController, MasterProtos.BypassProcedureRequest)","compactRegion(RpcController, CompactRegionRequest)","setQuota(RpcController, SetQuotaRequest)","enableTable(RpcController, EnableTableRequest)","checkHFileFormatVersionForMob()","containMetaWals(ServerName)","execProcedureWithRet(RpcController, ExecProcedureRequest)","isNormalizerEnabled(RpcController, IsNormalizerEnabledRequest)","getClusterStatus(RpcController, GetClusterStatusRequest)","moveRegion(RpcController, MoveRegionRequest)","modifyColumn(RpcController, ModifyColumnRequest)","getSpaceQuotaRegionSizes(RpcController, GetSpaceQuotaRegionSizesRequest)","runCleanerChore(RpcController, RunCleanerChoreRequest)","getRegionInfo(RpcController, GetRegionInfoRequest)","listNamespaceDescriptors(RpcController, ListNamespaceDescriptorsRequest)","clearDeadServers(RpcController, ClearDeadServersRequest)","reportFileArchival(RpcController, FileArchiveNotificationRequest)","scheduleServerCrashProcedure(RpcController, MasterProtos.ScheduleServerCrashProcedureRequest)","isCatalogJanitorEnabled(RpcController, IsCatalogJanitorEnabledRequest)","listTableNamesByNamespace(RpcController, ListTableNamesByNamespaceRequest)","getTableDescriptors(RpcController, GetTableDescriptorsRequest)","getLastMajorCompactionTimestamp(RpcController, MajorCompactionTimestampRequest)","getServices()","addConfig(RegionServerStartupResponse.Builder, String)","getRegionInfo(HBaseProtos.RegionSpecifier)","splitRegion(RpcController, SplitTableRegionRequest)","runCatalogScan(RpcController, RunCatalogScanRequest)","modifyNamespace(RpcController, ModifyNamespaceRequest)","setNormalizerRunning(RpcController, SetNormalizerRunningRequest)","deleteSnapshot(RpcController, DeleteSnapshotRequest)","createTable(RpcController, CreateTableRequest)","isBalancerEnabled(RpcController, IsBalancerEnabledRequest)","truncateTable(RpcController, TruncateTableRequest)","setTableStateInMeta(RpcController, SetTableStateInMetaRequest)","enableCatalogJanitor(RpcController, EnableCatalogJanitorRequest)","assigns(RpcController, MasterProtos.AssignsRequest)","reportRegionStateTransition(RpcController, ReportRegionStateTransitionRequest)","execProcedure(RpcController, ExecProcedureRequest)","isCleanerChoreEnabled(RpcController, IsCleanerChoreEnabledRequest)","decommissionRegionServers(RpcController, DecommissionRegionServersRequest)","disableTable(RpcController, DisableTableRequest)","getReplicationPeerConfig(RpcController, GetReplicationPeerConfigRequest)","regionServerStartup(RpcController, RegionServerStartupRequest)","unassignRegion(RpcController, UnassignRegionRequest)","getNamespaceDescriptor(RpcController, GetNamespaceDescriptorRequest)","snapshot(RpcController, SnapshotRequest)","listDecommissionedRegionServers(RpcController, ListDecommissionedRegionServersRequest)","fixMeta(RpcController, FixMetaRequest)","createPriority()","addReplicationPeer(RpcController, AddReplicationPeerRequest)","getRpcSchedulerFactoryClass()","hasAccessControlServiceCoprocessor(MasterCoprocessorHost)","lockHeartbeat(RpcController, LockHeartbeatRequest)","disableReplicationPeer(RpcController, DisableReplicationPeerRequest)","getSchemaAlterStatus(RpcController, GetSchemaAlterStatusRequest)","isProcedureDone(RpcController, IsProcedureDoneRequest)","modifyTable(RpcController, ModifyTableRequest)","convert(MasterProtos.MasterSwitchType)","getLastMajorCompactionTimestampForRegion(RpcController, MajorCompactionTimestampForRegionRequest)","abortProcedure(RpcController, AbortProcedureRequest)","normalize(RpcController, NormalizeRequest)","switchBalancer(boolean, BalanceSwitchMode)","reportRegionSpaceUse(RpcController, RegionSpaceUseReportRequest)","shutdown(RpcController, ShutdownRequest)"],"org.apache.hadoop.hbase.io.hfile.NoOpDataBlockEncoder":["newDataBlockDecodingContext(HFileContext)","startBlockEncoding(HFileBlockEncodingContext, DataOutputStream)","useEncodedScanner()","endBlockEncoding(HFileBlockEncodingContext, DataOutputStream, byte[], BlockType)","toString()","getDataBlockEncoding()","newDataBlockEncodingContext(byte[], HFileContext)","saveMetadata(HFile.Writer)","getEffectiveEncodingInCache(boolean)","encode(Cell, HFileBlockEncodingContext, DataOutputStream)"],"org.apache.hadoop.hbase.client.ConnectionUtils":["createCloseRowBefore(byte[])","timelineConsistentRead(AsyncRegionLocator, TableName, Query, byte[], RegionLocateType, Function, long, long, Timer)","retries2Attempts(int)","allOf(List)","isEmptyStartRow(byte[])","getMyAddress()","incRegionCountMetrics(ScanMetrics)","noMoreResultsForScan(Scan, RegionInfo)","getLocateType(Scan)","filterCells(Result, Cell)","getOrFetch(AtomicReference, AtomicReference, boolean, Supplier, Predicate, String)","injectNonceGeneratorForTesting(ClusterConnection, NonceGenerator)","setServerSideHConnectionRetriesConfig(Configuration, String, Logger)","createShortCircuitConnection(Configuration, ExecutorService, User, ServerName, AdminService.BlockingInterface, ClientService.BlockingInterface)","getStubKey(String, ServerName, boolean)","createScanResultCache(Scan)","connect(CompletableFuture, CompletableFuture)","translateException(Throwable)","calcEstimatedSize(Result)","updateServerSideMetrics(ScanMetrics, ScanResponse)","isEmptyStopRow(byte[])","setupMasterlessConnection(Configuration)","toCheckExistenceOnly(Get)","noMoreResultsForReverseScan(Scan, RegionInfo)","toCheckExistenceOnly(List)","incRPCRetriesMetrics(ScanMetrics, boolean)","createClosestRowAfter(byte[])","getPauseTime(long, int)","checkHasFamilies(Mutation)","updateResultsMetrics(ScanMetrics, Result[], boolean)","isRemote(String)","resetController(HBaseRpcController, long)","sendRequestsToSecondaryReplicas(Function, RegionLocations, CompletableFuture)","incRPCCallsMetrics(ScanMetrics, boolean)"],"org.apache.hadoop.hbase.regionserver.compactions.Compactor":["createTmpWriter(FileDetails, boolean)","performCompaction(FileDetails, InternalScanner, CellSink, long, boolean, ThroughputController, boolean, int)","postCompactScannerOpen(CompactionRequestImpl, ScanType, InternalScanner, User)","getFileDetails(Collection, boolean)","getSmallestReadPoint()","preCompactScannerOpen(CompactionRequestImpl, ScanType, User)","createScanner(HStore, ScanInfo, List, long, long, byte[], byte[])","getProgress()","compact(CompactionRequestImpl, InternalScannerFactory, CellSinkFactory, ThroughputController, User)","createFileScanners(Collection, long, boolean)","createScanner(HStore, ScanInfo, List, ScanType, long, long)"],"org.apache.hadoop.hbase.regionserver.MetricsTableWrapperAggregateImpl":["getTotalRequestsCount(String)","getReadRequestsCount(String)","getMemStoresSize(String)","getWriteRequestsCount(String)","getTableSize(String)","getStoreFilesSize(String)","close()"],"org.apache.hadoop.hbase.snapshot.SnapshotManifest":["open(Configuration, FileSystem, Path, SnapshotDescription)","readDataManifest()","getRegionNameFromManifest(SnapshotRegionManifest)","convertToV2SingleManifest()","addRegion(Path, RegionInfo)","create(Configuration, FileSystem, Path, SnapshotDescription, ForeignExceptionSnare)","createExecutor(String)","addRegion(HRegion)","writeDataManifest(SnapshotDataManifest)","getRegionManifests()","addRegion(HRegion, RegionVisitor)","getTableDescriptor()","addReferenceFiles(RegionVisitor, Object, Object, Collection, boolean)","createRegionVisitor(SnapshotDescription)","addTableDescriptor(TableDescriptor)","getSnapshotDescription()","getSnapshotFormat(SnapshotDescription)","getStoreFiles(Path)","addMobRegion(RegionInfo)","load()","getSnapshotDir()","addRegion(Path, RegionInfo, RegionVisitor)","consolidate()","createExecutor(Configuration, String)","getRegionManifestsMap()","addMobRegion(RegionInfo, RegionVisitor)"],"org.apache.hadoop.hbase.master.assignment.RegionTransitionProcedure":["holdLock(MasterProcedureEnv)","setRegionInfo(RegionInfo)","getRegionState(MasterProcedureEnv)","execute(MasterProcedureEnv)","rollback(MasterProcedureEnv)","setOverride(boolean)","remoteOperationCompleted(MasterProcedureEnv)","remoteOperationFailed(MasterProcedureEnv, RemoteProcedureException)","isServerOnline(MasterProcedureEnv, ServerName)","getTransitionState()","getAttempt()","toStringState(StringBuilder)","setTransitionState(RegionTransitionState)","releaseLock(MasterProcedureEnv)","toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","waitInitialized(MasterProcedureEnv)","isMeta()","storeInDispatchedQueue()","remoteCallFailed(MasterProcedureEnv, ServerName, IOException)","acquireLock(MasterProcedureEnv)","isServerOnline(MasterProcedureEnv, RegionStateNode)","getTableName()","reportTransition(MasterProcedureEnv, ServerName, TransitionCode, long)","addToRemoteDispatcher(MasterProcedureEnv, ServerName)","setAttempt(int)","bypass(MasterProcedureEnv)","shouldWaitClientAck(MasterProcedureEnv)","setTimeoutFailure(MasterProcedureEnv)","isOverride()","getRegionInfo()"],"org.apache.hadoop.hbase.regionserver.wal.ReaderBase":["init(FileSystem, Path, Configuration, FSDataInputStream)","next()","next(Entry)","seek(long)"],"org.apache.hadoop.hbase.util.HBaseFsck.FileLockCallable":["getHbckLockPath()","call()","createFileWithRetries(FileSystem, Path, FsPermission)"],"org.apache.hadoop.hbase.client.AsyncRpcRetryingCallerFactory.SingleRequestCallerBuilder":["rpcTimeout(long, TimeUnit)","table(TableName)","action(AsyncSingleRequestRpcRetryingCaller.Callable)","call()","startLogErrorsCnt(int)","row(byte[])","build()","replicaId(int)","pause(long, TimeUnit)","maxAttempts(int)","operationTimeout(long, TimeUnit)","locateType(RegionLocateType)"],"org.apache.hadoop.hbase.util.hbck.HFileCorruptionChecker":["getMissing()","checkTables(Collection)","createQuarantinePath(Path)","checkHFile(Path)","checkMobFile(Path)","getFailureMobFiles()","checkColFamDir(Path)","getFailures()","getCorruptedMobFiles()","getHFilesChecked()","getQuarantined()","checkTableDir(Path)","checkRegionDir(Path)","checkMobColFamDir(Path)","getQuarantinedMobFiles()","getMobFilesChecked()","createMobRegionDirChecker(Path)","getMissedMobFiles()","checkMobRegionDir(Path)","getCorrupted()","report(HbckErrorReporter)"],"org.apache.hadoop.hbase.util.BloomFilterUtil":["setRandomGeneratorForTest(Random)","toString(BloomFilterChunk)","actualErrorRate(long, long, int)","computeBitSize(long, double)","createBySize(int, double, int, int, BloomType)","contains(Cell, ByteBuff, int, int, Hash, int, BloomType)","computeMaxKeys(long, double, int)","contains(ByteBuff, int, int, Hash, int, HashKey)","checkBit(int, ByteBuff, int)","idealMaxKeys(long, double)","computeFoldableByteSize(long, int)","optimalFunctionCount(int, long)","contains(byte[], int, int, ByteBuff, int, int, Hash, int)","formatStats(BloomFilterBase)"],"org.apache.hadoop.hbase.regionserver.ReversedMobStoreScanner":["next(List, ScannerContext)"],"org.apache.hadoop.hbase.JMXListener":["stopConnectorServer()","startConnectorServer(int, int)","buildJMXServiceURL(int, int)","stop(CoprocessorEnvironment)","start(CoprocessorEnvironment)"],"org.apache.hadoop.hbase.snapshot.SnapshotManifestV2.ManifestBuilder":["familyOpen(SnapshotRegionManifest.Builder, byte[])","storeFile(SnapshotRegionManifest.Builder, SnapshotRegionManifest.FamilyFiles.Builder, StoreFileInfo)","regionOpen(RegionInfo)","familyClose(SnapshotRegionManifest.Builder, SnapshotRegionManifest.FamilyFiles.Builder)","regionClose(SnapshotRegionManifest.Builder)"],"org.apache.hadoop.hbase.io.hfile.HFileBlock.Writer":["getOnDiskSizeWithoutHeader()","getEncodingState()","beforeShipped()","write(Cell)","getBlockForCaching(CacheConfig)","expectState(State)","putHeader(byte[], int, int, int, int)","cloneUncompressedBufferWithHeader()","ensureBlockReady()","blockSizeWritten()","release()","encodedBlockSizeWritten()","finishBlock()","startWriting(BlockType)","getUncompressedSizeWithoutHeader()","getUncompressedSizeWithHeader()","writeBlock(BlockWritable, FSDataOutputStream)","cloneOnDiskBufferWithHeader()","getHeaderAndDataForTest()","putHeader(ByteArrayOutputStream, int, int, int)","finishBlockAndWriteHeaderAndData(DataOutputStream)","writeHeaderAndData(FSDataOutputStream)","getOnDiskSizeWithHeader()","isWriting()","getUserDataStream()"],"org.apache.hadoop.hbase.security.access.UserPermission":["getUser()","isGlobal()","equals(Object)","toString()","write(DataOutput)","readFields(DataInput)","hashCode()"],"org.apache.hadoop.hbase.client.ClientAsyncPrefetchScanner":["resultSize2CacheSize(long)","initCache()","addEstimatedSize(long)","prefetchCondition()","setPrefetchListener(Consumer)","next()","pollCache()","handleException()","close()"],"org.apache.hadoop.hbase.protobuf.ProtobufUtil":["toMutationNoData(MutationType, Mutation)","toMutationNoData(MutationType, Mutation, MutationProto.Builder)","toDelta(Function, ConsumerWithException, MutationProto, CellScanner)","toGet(MutationProto, CellScanner)","expectPBMagicPrefix(byte[])","toPut(MutationProto)","toConsistency(Consistency)","isPBMagicPrefix(byte[], int, int)","toComparator(ComparatorProtos.Comparator)","toGroupInfo(RSGroupProtos.RSGroupInfo)","buildRegionSpecifier(RegionSpecifierType, byte[])","toServerName(ServerName)","toScanMetrics(byte[])","toServerName(HBaseProtos.ServerName)","getMutationBuilderAndSetCommonFields(MutationType, Mutation, MutationProto.Builder)","toDelete(MutationProto, CellScanner)","toMutation(MutationType, Mutation)","prependPBMagic(byte[])","toDelete(MutationProto)","mergeFrom(Message.Builder, byte[])","toConsistency(ClientProtos.Consistency)","toFilter(Filter)","toGet(ClientProtos.Get)","handleRemoteException(Exception)","getRemoteException(ServiceException)","toResult(ClientProtos.Result, CellScanner)","fromDeleteType(DeleteType)","makeIOExceptionOfException(Exception)","toResult(ClientProtos.Result)","toException(NameBytesPair)","toScan(Scan)","toShortString(MutationProto)","toMutation(MutationType, Mutation, long)","toTimeRange(TimeRange)","newServiceStub(Class, RpcChannel)","toPut(MutationProto, CellScanner)","toScan(ClientProtos.Scan)","toServerName(byte[])","toIncrement(MutationProto, CellScanner)","getServerInfo(RpcController, AdminService.BlockingInterface)","toDurability(ClientProtos.MutationProto.Durability)","toResult(Result)","toMutation(MutationProto)","protoToTimeRange(HBaseProtos.TimeRange)","toTableName(TableProtos.TableName)","toResult(boolean, boolean)","isPBMagicPrefix(byte[])","toFilter(FilterProtos.Filter)","toComparator(ByteArrayComparable)","toDurability(Durability)","toResultNoData(Result)","toDeleteType(KeyValue.Type)","toMutation(MutationType, Mutation, MutationProto.Builder)","createProtosSnapShotDescType(SnapshotType)","toCell(Cell)","toProtoTableName(TableName)","toAppend(MutationProto, CellScanner)","toReadType(ClientProtos.Scan.ReadType)","toGet(Get)","toMutationNoData(MutationType, Mutation, MutationProto.Builder, long)","buildGetServerInfoRequest()","toIOException(ServiceException)","mergeFrom(Message.Builder, byte[], int, int)","toCell(ExtendedCellBuilder, CellProtos.Cell)","toMutation(MutationType, Mutation, MutationProto.Builder, long)","lengthOfPBMagic()","getServiceException(org.apache.hbase.thirdparty.com.google.protobuf.ServiceException)","toReadType(Scan.ReadType)"],"org.apache.hadoop.hbase.mob.DefaultMobStoreFlusher":["flushSnapshot(MemStoreSnapshot, long, MonitoredTask, ThroughputController, FlushLifeCycleTracker)","performMobFlush(MemStoreSnapshot, long, InternalScanner, StoreFileWriter, MonitoredTask, ThroughputController)"],"org.apache.hadoop.hbase.ipc.NettyRpcServer":["createNettyRpcServerPreambleHandler()","getListenerAddress()","call(BlockingService, MethodDescriptor, Message, CellScanner, long, MonitoredRPCHandler)","setSocketSendBufSize(int)","join()","stop()","start()","getNumOpenConnections()","call(BlockingService, MethodDescriptor, Message, CellScanner, long, MonitoredRPCHandler, long, int)"],"org.apache.hadoop.hbase.security.access.AccessControlUtil":["toUserPermission(AccessControlProtos.UserPermission)","grant(RpcController, AccessControlService.BlockingInterface, String, TableName, byte[], byte[], boolean, Permission.Action[])","toUsersAndPermissions(String, Permission)","toPermission(Permission)","toUserTablePermissions(ListMultimap)","revoke(RpcController, AccessControlService.BlockingInterface, String, TableName, byte[], byte[], Permission.Action[])","buildRevokeRequest(String, TableName, byte[], byte[], AccessControlProtos.Permission.Action[])","toUsersAndPermissions(AccessControlProtos.UsersAndPermissions)","getUserPermissions(RpcController, AccessControlService.BlockingInterface, TableName)","grant(RpcController, AccessControlService.BlockingInterface, String, boolean, Permission.Action[])","revoke(RpcController, AccessControlService.BlockingInterface, String, String, Permission.Action[])","getUserPermissions(RpcController, AccessControlService.BlockingInterface)","toPermissionAction(AccessControlProtos.Permission.Action)","revoke(RpcController, AccessControlService.BlockingInterface, String, Permission.Action[])","buildGrantRequest(String, TableName, byte[], byte[], boolean, AccessControlProtos.Permission.Action[])","buildRevokeRequest(String, AccessControlProtos.Permission.Action[])","buildGrantRequest(String, String, boolean, AccessControlProtos.Permission.Action[])","toUserPermission(UserPermission)","getUserPermissions(RpcController, AccessControlService.BlockingInterface, byte[])","grant(RpcController, AccessControlService.BlockingInterface, String, String, boolean, Permission.Action[])","toUserTablePermissions(AccessControlProtos.UsersAndPermissions)","buildGetUserPermissionsResponse(List)","toPermissionAction(Permission.Action)","buildRevokeRequest(String, String, AccessControlProtos.Permission.Action[])","toPermission(AccessControlProtos.Permission)","toUsersAndPermissions(ListMultimap)","buildGrantRequest(String, boolean, AccessControlProtos.Permission.Action[])","toTablePermission(AccessControlProtos.Permission)","toPermissionActions(List)"],"org.apache.hadoop.hbase.regionserver.StripeStoreFileManager":["removeCompactedFiles(Collection)","getCompactedfiles()","getStorefileCount()","ensureEdgeStripeMetadata(ArrayList, boolean)","updateCandidateFilesForRowKeyBefore(Iterator, KeyValue, Cell)","nonOpenRowCompare(Cell, byte[])","getStripeCount()","loadFiles(List)","getStripeBoundaries()","getStripeFilesSize(int)","isOpen(Cell)","getCompactionPressure()","getLevel0Files()","findExpiredFiles(ImmutableList, long, List, Collection)","addCompactionResults(Collection, Collection)","getStripes()","getSplitPointFromAllFiles()","getCompactedFilesCount()","findStripeForRow(byte[], boolean)","getCandidateFilesForRowKeyBefore(KeyValue)","getUnneededFiles(long, List)","isOpen(byte[])","startOf(HStoreFile)","insertFileIntoStripe(ArrayList, HStoreFile)","ensureLevel0Metadata(HStoreFile)","getStoreCompactionPriority()","endOf(HStoreFile)","clearCompactedFiles()","rowEquals(byte[], byte[])","debugDumpState(String)","findStripeIndexByEndRow(byte[])","getEndRow(int)","markCompactedAway(Collection)","loadUnclassifiedStoreFiles(List)","insertNewFiles(Collection)","getFilesForScan(byte[], boolean, byte[], boolean)","nonOpenRowCompare(byte[], byte[])","clearFiles()","getSplitPoint()","getStartRow(int)","getStoreFileComparator()","getMidStripeSplitRatio(long, long, long)","isInvalid(byte[])","getStorefiles()"],"org.apache.hadoop.hbase.client.AsyncConnectionImpl":["getAdminBuilder()","createAdminServerStub(ServerName)","getAdminBuilder(ExecutorService)","getConfiguration()","getAdminStub(ServerName)","getRegionServerStub(ServerName)","getTableBuilder(TableName, ExecutorService)","clearMasterStubCache(MasterService.Interface)","getBufferedMutatorBuilder(TableName)","getMasterStub()","getLocator()","getHbck(ServerName)","createRegionServerStub(ServerName)","getTableBuilder(TableName)","getNonceGenerator()","getHbck()","getBufferedMutatorBuilder(TableName, ExecutorService)","createMasterStub(ServerName)","close()","getRegionLocator(TableName)"],"org.apache.hadoop.hbase.regionserver.StoreFileWriter":["closeDeleteFamilyBloomFilter()","getHFileWriter()","appendMetadata(long, boolean, long)","hasGeneralBloom()","appendFileInfo(byte[], byte[])","appendGeneralBloomfilter(Cell)","appendTrackedTimestampsToMetadata()","append(Cell)","beforeShipped()","trackTimestamps(Cell)","closeBloomFilter(BloomFilterWriter)","getGeneralBloomWriter()","appendDeleteFamilyBloomFilter(Cell)","closeGeneralBloomFilter()","getUniqueFile(FileSystem, Path)","appendMetadata(long, boolean)","getPath()","close()"],"org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer":["setMasterServices(MasterServices)","areSomeRegionReplicasColocated(Cluster)","updateMetricsSize(int)","balanceCluster(Map)","updateCostsWithAction(Cluster, Action)","needsBalance(Cluster)","composeAttributeName(String, String)","setConf(Configuration)","updateStochasticCosts(TableName, Double, Double[])","createRegionPlans(Cluster)","initCosts(Cluster)","setClusterMetrics(ClusterMetrics)","getCostFunctionNames()","computeCost(Cluster, double)","nextAction(Cluster)","functionCost()","setCandidateGenerators(List)","updateRegionLoad()","onConfigurationChange(Configuration)","setSlop(Configuration)","balanceCluster(TableName, Map)"],"org.apache.hadoop.hbase.client.AsyncRpcRetryingCallerFactory.BatchCallerBuilder":["rpcTimeout(long, TimeUnit)","pause(long, TimeUnit)","table(TableName)","actions(List)","call()","maxAttempts(int)","startLogErrorsCnt(int)","operationTimeout(long, TimeUnit)","build()"],"org.apache.hadoop.hbase.ipc.IPCUtil":["createRemoteException(ExceptionResponse)","write(OutputStream, Message, Message, ByteBuf)","toIOE(Throwable)","setCancelled(Call)","wrapException(InetSocketAddress, Throwable)","getTotalSizeWhenWrittenDelimited(Message[])","buildRequestHeader(Call, CellBlockMeta)","isFatalConnectionException(ExceptionResponse)","write(OutputStream, Message, Message, ByteBuf, int)"],"org.apache.hadoop.hbase.regionserver.querymatcher.ScanQueryMatcher":["compareKeyForNextColumn(Cell, Cell)","createStartKeyFromRow(byte[], ScanInfo)","getTrackers(RegionCoprocessorHost, NavigableSet, ScanInfo, long, Scan)","clearCurrentRow()","setToNewRow(Cell)","beforeShipped()","isCellTTLExpired(Cell, long, long)","getStartKey()","getKeyForNextColumn(Cell)","compareKeyForNextRow(Cell, Cell)","currentRow()","checkDeleted(DeleteTracker, Cell)","preCheck(Cell)","checkColumn(ColumnTracker, byte[], int, int, long, byte, boolean)"],"org.apache.hadoop.hbase.regionserver.HStoreFile":["markCompactedAway()","getQualifiedPath()","isBulkLoadResult()","open()","getFirstKey()","isSkipResetSeqId(byte[])","getMinimumTimestamp()","isCompactedAway()","getRefCount()","createStreamReader(boolean)","isMajorCompactionResult()","toStringDetailed()","getReader()","getCacheConf()","getMetadataValue(byte[])","getModificationTimestamp()","initReader()","deleteStoreFile()","isHFile()","closeStoreFile(boolean)","getPath()","getEncodedPath()","getMaxMemStoreTS()","getMaxSequenceId()","isReferencedInReads()","getStreamScanner(boolean, boolean, boolean, long, long, boolean)","toString()","getPreadScanner(boolean, long, long, boolean)","excludeFromMinorCompaction()","closeStreamReaders(boolean)","getBulkLoadTimestamp()","getComparator()","getFileInfo()","getHDFSBlockDistribution()","getLastKey()","getMaximumTimestamp()","storeFileReaderClosed(StoreFileReader)","getModificationTimeStamp()","isReference()"],"org.apache.hadoop.hbase.client.RegionInfo":["hasEncodedName(byte[])","parseFrom(byte[], int, int)","isNext(RegionInfo)","createRegionName(TableName, byte[], String, boolean)","getShortNameToLog(List)","parseFrom(DataInputStream)","parseRegionNameOrReturnNull(byte[])","parseFromOrNull(byte[], int, int)","prettyPrint(String)","createRegionName(TableName, byte[], byte[], boolean)","createRegionName(TableName, byte[], long, int, boolean)","isOverlap(RegionInfo)","encodeRegionName(byte[])","getTable(byte[])","toDelimitedByteArray(RegionInfo[])","createMobRegionInfo(TableName)","getRegionNameAsString(byte[])","getRegionNameAsString(RegionInfo, byte[])","toByteArray(RegionInfo)","createRegionName(TableName, byte[], long, boolean)","getShortNameToLog(RegionInfo[])","isLast()","areAdjacent(RegionInfo, RegionInfo)","isEncodedRegionName(byte[])","createRegionName(TableName, byte[], byte[], int, boolean)","parseDelimitedFrom(byte[], int, int)","isAdjacent(RegionInfo)","parseRegionName(byte[])","isFirst()","getStartKey(byte[])","parseFrom(byte[])","isDegenerate()","parseFromOrNull(byte[])","toDelimitedByteArray(RegionInfo)"]}