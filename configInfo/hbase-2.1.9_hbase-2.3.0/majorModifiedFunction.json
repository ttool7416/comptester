{"org.apache.hadoop.hbase.regionserver.handler.CloseRegionHandler":["getRegionInfo()","process()"],"org.apache.hadoop.hbase.util.RegionMover":["loadRegions(List)","stripMaster(List)","readExcludes(String)","isSameServer(RegionInfo, ServerName)","getServerNameForRegion(RegionInfo)","readRegionsFromFile(String)","unload()","stripServer(List, String, int)","doWork()","getTargetServer()","writeFile(String, List)","waitTaskToFinish(ExecutorService, Future, String)","deleteFile(String)","load()","waitMoveTasksToFinish(ExecutorService, List, long)","unloadRegions(ServerName, List, List)","addOptions()","stripExcludes(List)","isSuccessfulScan(RegionInfo)","processOptions(CommandLine)","main(String[])","close()"],"org.apache.hadoop.hbase.regionserver.wal.FSHLog":["append(RegionInfo, WALKeyImpl, WALEdit, boolean)","preemptiveSync(ProtobufLogWriter)","sync()","getOutputStream()","afterCreatingZigZagLatch()","sync(long)","beforeWaitOnSafePoint()","getPipeline()","createWriterInstance(Path)","doReplaceWriter(Path, Path, Writer)","publishSyncOnRingBuffer(boolean)","publishSyncOnRingBuffer(long, boolean)","sync(boolean)","isLowReplicationRollEnabled()","publishSyncThenBlockOnCompletion(TraceScope, boolean)","checkLogRoll()","doAppend(Writer, FSWALEntry)","doCheckLogLowReplication()","getLogReplication()","sync(long, boolean)","doShutdown()","getSequenceOnRingBuffer()"],"org.apache.hadoop.hbase.client.ConnectionImplementation":["finalize()","locateRegion(TableName, byte[])","clearCaches(ServerName)","shutdownBatchPool(ExecutorService)","getAdmin()","locateRegion(byte[])","getAdminForMaster()","cacheLocation(TableName, RegionLocations)","getRpcControllerFactory()","getClient(ServerName)","getKeepAliveMasterService()","locateRegion(TableName, byte[], boolean, boolean, int)","getRegionLocation(TableName, byte[], boolean)","getNewRpcRetryingCallerFactory(Configuration)","hasCellBlockSupport()","getBufferedMutator(BufferedMutatorParams)","getHbck(ServerName)","getConnectionMetrics()","shutdownPools()","clearRegionCache(TableName)","checkClosed()","getNonceGenerator()","getRpcClient()","getMaster()","toString()","getMetaLookupPool()","getCurrentBatchPool()","relocateRegion(TableName, byte[], int)","getTableState(TableName)","isDeadServer(ServerName)","locateRegions(TableName, boolean, boolean)","getTableBuilder(TableName, ExecutorService)","getStatisticsTracker()","relocateRegion(TableName, byte[])","clearRegionCache(TableName, byte[])","clearRegionCache()","getThreadPool(int, int, String, BlockingQueue)","getConnectionConfiguration()","abort(String, Throwable)","retrieveClusterId()","isTableAvailable(TableName, byte[][])","getBackoffPolicy()","isTableEnabled(TableName)","deleteCachedRegionLocation(HRegionLocation)","getTable(TableName)","release(MasterServiceState)","getRpcRetryingCallerFactory()","isMasterRunning()","releaseMaster(MasterServiceState)","isTableDisabled(TableName)","getConfiguration()","isAborted()","setUseMetaReplicas(boolean)","locateRegionInMeta(TableName, byte[], boolean, boolean, int)","locateRegions(TableName)","closeMasterService(MasterServiceState)","injectNonceGeneratorForTesting(ClusterConnection, NonceGenerator)","resetMasterServiceState(MasterServiceState)","getBufferedMutator(TableName)","getAsyncProcess()","getRegionLocator(TableName)","close()","updateCachedLocations(TableName, byte[], byte[], Object, ServerName)","getBatchPool()","get(CompletableFuture)","cacheLocation(TableName, ServerName, HRegionLocation)","getNumberOfCachedRegionLocations(TableName)","locateRegion(TableName, byte[], boolean, boolean)","isClosed()","isKeepAliveMasterConnectedAndRunning(MasterServiceState)","closeMaster()","getCachedLocation(TableName, byte[])","getAdmin(ServerName)","getHbck()","updateCachedLocation(RegionInfo, ServerName, ServerName, long)","getCurrentMetaLookupPool()","locateMeta(TableName, boolean, int)"],"org.apache.hadoop.hbase.quotas.GlobalQuotaSettingsImpl":["getBypassGlobals()","toQuotas()","getQuotaSettings()","getSpaceProto()","validateTimedQuota(TimedQuota)","toString()","merge(QuotaSettings)","buildThrottleQuotas(Throttle)","getThrottleProto()"],"org.apache.hadoop.hbase.ipc.NettyRpcConnection":["shutdown0()","scheduleRelogin(Throwable)","shutdown()","sendRequest(Call, HBaseRpcController)","failInit(Channel, IOException)","saslNegotiate(Channel)","established(Channel)","write(Channel, Call)","callTimeout(Call)","isActive()","connect()","cleanupConnection()"],"org.apache.hadoop.hbase.master.ServerManager":["getMinToStart()","getAverageLoad()","checkAndRecordNewServer(ServerName, ServerMetrics)","getVersionNumber(ServerName)","removeServerFromDrainList(ServerName)","clearDeadServersWithSameHostNameAndPortOfOnlineServer()","isRegionInServerManagerStates(RegionInfo)","getDrainingServersList()","recordNewServerWithLock(ServerName, ServerMetrics)","isClusterShutdown()","moveFromOnlineToDeadServers(ServerName)","updateLastFlushedSequenceIds(ServerName, ServerMetrics)","shutdownCluster()","letRegionServersShutdown()","waitForRegionServers(MonitoredTask)","getOnlineServers()","removeRegion(RegionInfo)","createDestinationServersList(List)","getOnlineServersList()","findDeadServersAndProcess(Set, Set)","getVersion(ServerName)","isServerDead(ServerName)","getLoad(ServerName)","expire(ServerName)","unregisterListener(ServerListener)","isServerOnline(ServerName)","checkClockSkew(ServerName, long)","countOfRegionServers()","removeRegions(List)","createDestinationServersList()","expireServer(ServerName)","checkIsDead(ServerName, String)","stop()","newRpcController()","getLastFlushedSequenceId(byte[])","sendRegionWarmup(ServerName, RegionInfo)","getOnlineServersListWithPredicator(List, Predicate)","getStrForMax(int)","addServerToDrainList(ServerName)","closeRegionSilentlyAndWait(ClusterConnection, ServerName, RegionInfo, long)","regionServerReport(ServerName, ServerMetrics)","getRsAdmin(ServerName)","regionServerStartup(RegionServerStartupRequest, int, String, InetAddress)","registerListener(ServerListener)","areDeadServersInProgress()","getRegionServersInZK(ZKWatcher)","findServerWithSameHostnamePortWithLock(ServerName)","getInfoPort(ServerName)","getDeadServers()"],"org.apache.hadoop.hbase.tool.LoadIncrementalHFiles":["prepareHFileQueue(Path, Table, Deque, boolean)","tryAtomicRegionLoad(ClientServiceCallable, TableName, byte[], Collection)","discoverLoadQueue(Deque, Path, boolean)","prepareHFileQueue(Path, Table, Deque, boolean, boolean)","performBulkLoad(Admin, Table, RegionLocator, Deque, ExecutorService, SecureBulkLoadClient, boolean)","createExecutorService()","groupOrSplitPhase(Table, ExecutorService, Deque, Pair)","visitBulkHFiles(FileSystem, Path, BulkHFileVisitor, boolean)","isAlwaysCopyFiles()","prepareHFileQueue(Map, Table, Deque, boolean)","shouldCopyHFileMetaKey(byte[])","loadHFileQueue(Table, Connection, Deque, Pair, boolean)","setBulkToken(String)","loadHFileQueue(Table, Connection, Deque, Pair)","bulkLoadPhase(Table, Connection, ExecutorService, Deque, Multimap, boolean, Map)","populateLoadQueue(Deque, Map)","validateFamiliesInHFiles(Table, Deque, boolean)","isSilence()","disableReplication()","doBulkLoad(Map, Admin, Table, RegionLocator, boolean, boolean)","isSecureBulkLoadEndpointAvailable()","inferBoundaries(SortedMap)","main(String[])","setClusterIds(List)","usage()","cleanup(Admin, Deque, ExecutorService, SecureBulkLoadClient)","doBulkLoad(Path, Admin, Table, RegionLocator)","buildClientServiceCallable(Connection, TableName, byte[], Collection, boolean)","run(String[])","getUniqueName()","visitBulkHFiles(FileSystem, Path, BulkHFileVisitor)","createTable(TableName, String, Admin)","splitStoreFile(Configuration, Path, ColumnFamilyDescriptor, byte[], Path, Path)","copyHFileHalf(Configuration, Path, Path, Reference, ColumnFamilyDescriptor)","run(String, TableName)","groupOrSplit(Multimap, LoadQueueItem, Table, Pair)","splitStoreFile(LoadQueueItem, Table, byte[], byte[])","run(Map, TableName)","checkHFilesCountPerRegionPerFamily(Multimap)","doBulkLoad(Path, Admin, Table, RegionLocator, boolean, boolean)","toString(List)","isCreateTable()"],"org.apache.hadoop.hbase.master.procedure.EnableTableProcedure":["postEnable(MasterProcedureEnv, EnableTableState)","getState(int)","getTableOperationType()","setTableStateToEnabled(MasterProcedureEnv, TableName)","getNumberOfReplicasFromMeta(Connection, int, List)","getRegionFromMeta(Connection, List)","preEnable(MasterProcedureEnv, EnableTableState)","getStateId(EnableTableState)","getInitialState()","getTableName()","rollbackState(MasterProcedureEnv, EnableTableState)","deserializeStateData(ProcedureStateSerializer)","executeFromState(MasterProcedureEnv, EnableTableState)","serializeStateData(ProcedureStateSerializer)","isRollbackSupported(EnableTableState)","setTableStateToEnabling(MasterProcedureEnv, TableName)","runCoprocessorAction(MasterProcedureEnv, EnableTableState)","prepareEnable(MasterProcedureEnv)"],"org.apache.hadoop.hbase.io.FSDataInputStreamWrapper":["getStream(boolean)","prepareForBlockReader(boolean)","checksumOk()","unbuffer()","getHfs()","setStreamOptions(FSDataInputStream)","fallbackToFsChecksum(int)","shouldUseHBaseChecksum()","close()"],"org.apache.hadoop.hbase.regionserver.wal.FSHLog.SyncRunner":["run()","offer(long, SyncFuture[], int)","areSyncFuturesReleased()","updateHighestSyncedSequence(long)","releaseSyncFuture(SyncFuture, long, Throwable)","releaseSyncFutures(long, Throwable)"],"org.apache.hadoop.hbase.master.balancer.SimpleLoadBalancer":["addRegionPlan(MinMaxPriorityQueue, boolean, ServerName, List)","onConfigurationChange(Configuration)","balanceCluster(TableName, Map)","balanceCluster(Map)","setClusterLoad(Map)","balanceOverall(List, Map, boolean, MinMaxPriorityQueue, int, int)","overallNeedsBalance()","setLoad(List, int, int)"],"org.apache.hadoop.hbase.master.procedure.ModifyTableProcedure":["getState(int)","addRegionsToMeta(MasterProcedureEnv, TableDescriptor, List)","getTableOperationType()","completionCleanup(MasterProcedureEnv)","updateTableDescriptor(MasterProcedureEnv)","getStateId(ModifyTableState)","getInitialState()","getTableName()","initilize()","deleteFromFs(MasterProcedureEnv, TableDescriptor, TableDescriptor)","updateReplicaColumnsIfNeeded(MasterProcedureEnv, TableDescriptor, TableDescriptor)","getRegionInfoList(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","preModify(MasterProcedureEnv, ModifyTableState)","prepareModify(MasterProcedureEnv)","postModify(MasterProcedureEnv, ModifyTableState)","isRollbackSupported(ModifyTableState)","executeFromState(MasterProcedureEnv, ModifyTableState)","runCoprocessorAction(MasterProcedureEnv, ModifyTableState)","rollbackState(MasterProcedureEnv, ModifyTableState)"],"org.apache.hadoop.hbase.master.assignment.MergeTableRegionsProcedure":["isRollbackSupported(MergeTableRegionsState)","holdLock(MasterProcedureEnv)","updateMetaForMergedRegions(MasterProcedureEnv)","getTableOperationType()","writeMaxSequenceIdFile(MasterProcedureEnv)","getStateId(MergeTableRegionsState)","getRegionReplication(MasterProcedureEnv)","preMergeRegionsCommit(MasterProcedureEnv)","prepareMergeRegion(MasterProcedureEnv)","getServerName(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, MergeTableRegionsState)","getProcedureMetrics(MasterProcedureEnv)","createMergedRegion(MasterProcedureEnv)","postRollBackMergeRegions(MasterProcedureEnv)","cleanupMergedRegion(MasterProcedureEnv)","serializeStateData(ProcedureStateSerializer)","preMergeRegions(MasterProcedureEnv)","createAssignProcedures(int, MasterProcedureEnv, List, ServerName)","checkRegionsToMerge(MasterProcedureEnv, RegionInfo[], boolean)","releaseLock(MasterProcedureEnv)","mergeStoreFiles(MasterProcedureEnv, HRegionFileSystem, Path)","toStringClassDetails(StringBuilder)","postMergeRegionsCommit(MasterProcedureEnv)","abort(MasterProcedureEnv)","isMergeable(MasterProcedureEnv, RegionState)","getState(int)","postCompletedMergeRegions(MasterProcedureEnv)","createMergedRegionInfo(RegionInfo[])","createUnassignProcedures(MasterProcedureEnv, int)","createAssignProcedures(MasterProcedureEnv, int)","acquireLock(MasterProcedureEnv)","rollbackCloseRegionsForMerge(MasterProcedureEnv)","hasRecoveredEdits(MasterProcedureEnv)","getInitialState()","getTableName()","deserializeStateData(ProcedureStateSerializer)","getMergedRegion()","setRegionStateToMerging(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, MergeTableRegionsState)"],"org.apache.hadoop.hbase.master.assignment.SplitTableRegionProcedure":["createDaughterRegions(MasterProcedureEnv)","getTableOperationType()","writeMaxSequenceIdFile(MasterProcedureEnv)","getDaughterRegionIdTimestamp(RegionInfo)","getRegionReplication(MasterProcedureEnv)","preSplitRegion(MasterProcedureEnv)","postSplitRegion(MasterProcedureEnv)","openParentRegion(MasterProcedureEnv)","prepareSplitRegion(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, SplitTableRegionState)","getSplitRow()","getProcedureMetrics(MasterProcedureEnv)","getParentRegion()","serializeStateData(ProcedureStateSerializer)","createAssignProcedures(int, MasterProcedureEnv, List, ServerName)","checkSplittable(MasterProcedureEnv, RegionInfo, byte[])","rollbackState(MasterProcedureEnv, SplitTableRegionState)","updateMeta(MasterProcedureEnv)","toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","getState(int)","splitStoreFile(HRegionFileSystem, byte[], HStoreFile)","createUnassignProcedures(MasterProcedureEnv, int)","preSplitRegionAfterMETA(MasterProcedureEnv)","createAssignProcedures(MasterProcedureEnv, int)","getStateId(SplitTableRegionState)","getInitialState()","postRollBackSplitRegion(MasterProcedureEnv)","splitStoreFiles(MasterProcedureEnv, HRegionFileSystem)","deserializeStateData(ProcedureStateSerializer)","hasRecoveredEdits(MasterProcedureEnv, RegionInfo)","isRollbackSupported(SplitTableRegionState)","preSplitRegionBeforeMETA(MasterProcedureEnv)","assertReferenceFileCount(FileSystem, int, Path)","getParentRegionServerName(MasterProcedureEnv)"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketCache":["join()","blockEvicted(BlockCacheKey, BucketEntry, boolean)","getFreeSize()","getRefCount(BlockCacheKey)","getRAMQueueEntries(BlockingQueue, List)","sanityCheckConfigs()","getStats()","getIoEngine()","logStats()","checkIOErrorIsTolerated()","getCurrentSize()","isCacheEnabled()","cacheBlockWithWaitInternal(BlockCacheKey, Cacheable, boolean, boolean)","stopWriterThreads()","freeEntireBuckets(int)","getCurrentDataSize()","acceptableSize()","shutdown()","getMultiFactor()","evictBlock(BlockCacheKey, boolean)","startWriterThreads()","getAllocator()","getIOEngineFromName(String, long, String)","evictBlock(BlockCacheKey)","getBlock(BlockCacheKey, boolean, boolean, boolean)","getExtraFreeFactor()","returnBlock(BlockCacheKey, Cacheable)","getMemoryFactor()","getBlockCaches()","bucketSizesAboveThresholdCount(float)","heapSize()","cacheBlock(BlockCacheKey, Cacheable, boolean)","getSingleFactor()","getBlockCount()","getPartitionSize(float)","persistToFile()","getDataBlockCount()","freeSpace(String)","getMinFactor()","getMaxSize()","checkRamCache(BlockCacheKey)","cacheBlockWithWait(BlockCacheKey, Cacheable, boolean, boolean)","disableCache()","getAcceptableFactor()","evictBlocksByHfileName(String)","iterator()","getRealCacheSize()","cacheBlock(BlockCacheKey, Cacheable)","retrieveFromFile(int[])","size()"],"org.apache.hadoop.hbase.master.procedure.CloneSnapshotProcedure":["toStringClassDetails(StringBuilder)","getStateId(CloneSnapshotState)","getState(int)","getTableOperationType()","createFsLayout(MasterProcedureEnv, TableDescriptor, List, CreateHdfsRegions)","prepareClone(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, CloneSnapshotState)","executeFromState(MasterProcedureEnv, CloneSnapshotState)","addRegionsToMeta(MasterProcedureEnv)","createFilesystemLayout(MasterProcedureEnv, TableDescriptor, List)","getInitialState()","getTableName()","deserializeStateData(ProcedureStateSerializer)","preCloneSnapshot(MasterProcedureEnv)","serializeStateData(ProcedureStateSerializer)","isRollbackSupported(CloneSnapshotState)","moveTempMobDirectoryToHBaseRoot(MasterFileSystem, TableDescriptor, Path)","restoreSnapshotAcl(MasterProcedureEnv)","getMonitorStatus()","postCloneSnapshot(MasterProcedureEnv)"],"org.apache.hadoop.hbase.security.access.AccessController":["preDisableTable(ObserverContext, TableName)","preGetNamespaceDescriptor(ObserverContext, String)","preEnableTable(ObserverContext, TableName)","preGetProcedures(ObserverContext)","getEndpointObserver()","postModifyTable(ObserverContext, TableName, TableDescriptor)","prePrepareBulkLoad(ObserverContext)","preSetUserQuota(ObserverContext, String, String, GlobalQuotaSettings)","requireTablePermission(ObserverContext, String, TableName, byte[], byte[], Action[])","prePut(ObserverContext, Put, WALEdit, Durability)","preLockHeartbeat(ObserverContext, TableName, String)","requireGlobalPermission(ObserverContext, String, Action, String)","preDisableReplicationPeer(ObserverContext, String)","getAuthManager()","preSetTableQuota(ObserverContext, TableName, GlobalQuotaSettings)","preShutdown(ObserverContext)","preDeleteTable(ObserverContext, TableName)","preListDecommissionedRegionServers(ObserverContext)","preSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","preListSnapshot(ObserverContext, SnapshotDescription)","preCheckAndDeleteAfterRowLock(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Delete, boolean)","postGetTableDescriptors(ObserverContext, List, List, String)","preSetUserQuota(ObserverContext, String, GlobalQuotaSettings)","preCheckAndPutAfterRowLock(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Put, boolean)","preScannerNext(ObserverContext, InternalScanner, List, int, boolean)","postCreateReplicationEndPoint(ObserverContext, ReplicationEndpoint)","permissionGranted(String, User, Action, RegionCoprocessorEnvironment, Map)","preTableFlush(ObserverContext, TableName)","preScannerClose(ObserverContext, InternalScanner)","preModifyNamespace(ObserverContext, NamespaceDescriptor)","preRollWALWriterRequest(ObserverContext)","getUserPermissions(RpcController, AccessControlProtos.GetUserPermissionsRequest, RpcCallback)","preClose(ObserverContext, boolean)","preSetNamespaceQuota(ObserverContext, String, GlobalQuotaSettings)","postDelete(ObserverContext, Delete, WALEdit, Durability)","preCreateTable(ObserverContext, TableDescriptor, RegionInfo[])","checkCoveringPermission(User, OpType, RegionCoprocessorEnvironment, byte[], Map, long, Action[])","preBalance(ObserverContext)","getTableName(RegionCoprocessorEnvironment)","requireScannerOwner(InternalScanner)","preClearDeadServers(ObserverContext)","initialize(RegionCoprocessorEnvironment)","getRegionObserver()","preGetOp(ObserverContext, Get, List)","grant(RpcController, AccessControlProtos.GrantRequest, RpcCallback)","preGetReplicationPeerConfig(ObserverContext, String)","postTruncateTable(ObserverContext, TableName)","preListReplicationPeers(ObserverContext, String)","checkLockPermissions(ObserverContext, String, TableName, RegionInfo[], String)","preRequestLock(ObserverContext, String, TableName, RegionInfo[], String)","preCloneSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","postScannerClose(ObserverContext, InternalScanner)","makeFamilyMap(byte[], byte[])","preCreateNamespace(ObserverContext, NamespaceDescriptor)","requireGlobalPermission(ObserverContext, String, Action, TableName, Map)","postListNamespaceDescriptors(ObserverContext, List)","preAssign(ObserverContext, RegionInfo)","postDeleteTable(ObserverContext, TableName)","preSetSplitOrMergeEnabled(ObserverContext, boolean, MasterSwitchType)","isCellAuthorizationSupported(Configuration)","preIncrementAfterRowLock(ObserverContext, Increment)","checkForReservedTagPresence(User, Mutation)","preFlush(ObserverContext, FlushLifeCycleTracker)","preRestoreSnapshot(ObserverContext, SnapshotDescription, TableDescriptor)","start(CoprocessorEnvironment)","preAddReplicationPeer(ObserverContext, String, ReplicationPeerConfig)","permissionGranted(OpType, User, RegionCoprocessorEnvironment, Map, Action[])","preModifyTable(ObserverContext, TableName, TableDescriptor)","preAbortProcedure(ObserverContext, long)","preGetLocks(ObserverContext)","preAppendAfterRowLock(ObserverContext, Append)","preDecommissionRegionServers(ObserverContext, List, boolean)","preUpdateReplicationPeerConfig(ObserverContext, String, ReplicationPeerConfig)","postMutationBeforeWAL(ObserverContext, MutationType, Mutation, Cell, Cell)","preBulkLoadHFile(ObserverContext, List)","requireNamespacePermission(ObserverContext, String, String, TableName, Map, Action[])","preCompact(ObserverContext, Store, InternalScanner, ScanType, CompactionLifeCycleTracker, CompactionRequest)","preSetUserQuota(ObserverContext, String, TableName, GlobalQuotaSettings)","preScannerOpen(ObserverContext, Scan)","preGetTableDescriptors(ObserverContext, List, List, String)","addCellPermissions(byte[], Map)","preClearCompactionQueues(ObserverContext)","requirePermission(ObserverContext, String, Action)","preCheckAndDelete(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Delete, boolean)","preExecuteProcedures(ObserverContext)","getActiveUser(ObserverContext)","getRegion(RegionCoprocessorEnvironment)","postDeleteNamespace(ObserverContext, String)","preDelete(ObserverContext, Delete, WALEdit, Durability)","checkSystemOrSuperUser(User)","getServices()","preRemoveReplicationPeer(ObserverContext, String)","postAbortProcedure(ObserverContext)","preExists(ObserverContext, Get, boolean)","preIncrement(ObserverContext, Increment)","preCheckAndPut(ObserverContext, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, Put, boolean)","postPut(ObserverContext, Put, WALEdit, Durability)","revoke(RpcController, AccessControlProtos.RevokeRequest, RpcCallback)","requirePermission(ObserverContext, String, TableName, byte[], byte[], Action[])","preBatchMutate(ObserverContext, MiniBatchOperationInProgress)","preDeleteNamespace(ObserverContext, String)","postOpen(ObserverContext)","postEndpointInvocation(ObserverContext, Service, String, Message, Message.Builder)","postRollWALWriterRequest(ObserverContext)","postScannerFilterRow(ObserverContext, InternalScanner, Cell, boolean)","preUnassign(ObserverContext, RegionInfo, boolean)","preRecommissionRegionServer(ObserverContext, ServerName, List)","preCleanupBulkLoad(ObserverContext)","preAppend(ObserverContext, Append)","createACLTable(Admin)","requireAccess(ObserverContext, String, TableName, Action[])","postGetTableNames(ObserverContext, List, String)","preDeleteSnapshot(ObserverContext, SnapshotDescription)","hasFamilyQualifierPermission(User, Action, RegionCoprocessorEnvironment, Map)","requireNamespacePermission(ObserverContext, String, String, Action[])","preTruncateTable(ObserverContext, TableName)","getTableName(Region)","preMergeRegions(ObserverContext, RegionInfo[])","checkPermissions(RpcController, AccessControlProtos.CheckPermissionsRequest, RpcCallback)","preStopRegionServer(ObserverContext)","getMasterObserver()","preStopMaster(ObserverContext)","stop(CoprocessorEnvironment)","preMove(ObserverContext, RegionInfo, ServerName, ServerName)","getRegion()","postStartMaster(ObserverContext)","postScannerOpen(ObserverContext, Scan, RegionScanner)","preSplitRegion(ObserverContext, TableName, byte[])","internalPreRead(ObserverContext, Query, OpType)","preBalanceSwitch(ObserverContext, boolean)","postCompletedCreateTableAction(ObserverContext, TableDescriptor, RegionInfo[])","preEnableReplicationPeer(ObserverContext, String)","getRegionServerObserver()","preReplicateLogEntries(ObserverContext)","updateACL(RegionCoprocessorEnvironment, Map)","getBulkLoadObserver()","preEndpointInvocation(ObserverContext, Service, String, Message)","preOpen(ObserverContext)","preRegionOffline(ObserverContext, RegionInfo)"],"org.apache.hadoop.hbase.regionserver.CompactingMemStore":["pushActiveToPipeline(MutableSegment)","isMemStoreFlushingInMemory()","getNextRow(Cell)","isSloppy()","getImmutableSegments()","heapSize()","setIndexType(IndexType)","hasImmutableSegments()","preFlushSeqIDEstimation()","getRegionServices()","getInmemoryFlushSize()","getStore()","getScanners(long)","getIndexType()","initInmemoryFlushSize(Configuration)","getPool()","swapCompactedSegments(VersionedSegmentsList, ImmutableSegment, boolean)","snapshot()","pushPipelineToSnapshot()","startReplayingFromWAL()","updateLowestUnflushedSequenceIdInWAL(boolean)","pushTailToSnapshot()","createList(int)","setCompositeSnapshot(boolean)","keySize()","checkActiveSize()","getSmallestReadPoint()","getFamilyNameInBytes()","getSegments()","getFamilyName()","getLastSegment()","pushToSnapshot(List)","debug()","shouldFlushInMemory()","stopReplayingFromWAL()","flattenOneSegment(long, MemStoreCompactionStrategy.Action)","flushInMemory()","createMemStoreCompactor(MemoryCompactionPolicy)","getFlushableSize()","stopCompaction()","size()"],"org.apache.hadoop.hbase.security.access.TablePermission":["hasTable()","implies(TableName, KeyValue, Action)","equals(Object)","matchesFamilyQualifier(TableName, byte[], byte[], Action)","toString()","implies(TableName, byte[], byte[], Action)","hasQualifier()","readFields(DataInput)","getQualifier()","hashCode()","getTableName()","getFamily()","implies(String, Action)","hasNamespace()","write(DataOutput)","hasFamily()","tableFieldsEqual(TablePermission)","setTableName(TableName)","matchesFamily(TableName, byte[], Action)","getNamespace()"],"org.apache.hadoop.hbase.master.CatalogJanitor.ReportMakingVisitor":["metaTableConsistencyCheck(Result)","isTableDisabled(RegionInfo)","addOverlap(RegionInfo, RegionInfo)","isTableTransition(RegionInfo)","getReport()","visit(Result)","addHole(RegionInfo, RegionInfo)","close()"],"org.apache.hadoop.hbase.regionserver.StoreScanner":["clearAndClose(List)","seekAsDirection(Cell)","peek()","addCurrentScanners(List)","seekScanners(List, Cell, boolean, boolean)","seek(Cell)","getReadPoint()","next()","shipped()","trySkipToNextColumn(Cell)","needToReturn(List)","reopenAfterFlush()","getNextIndexedKey()","isScanUsePread()","selectScannersFrom(HStore, List)","resetKVHeap(List, CellComparator)","close()","enableLazySeekGlobally(boolean)","trySwitchToStreamRead()","newKVHeap(List, CellComparator)","updateReaders(List, List)","seekToNextRow(Cell)","seekOrSkipToNextRow(Cell)","reseek(Cell)","seekOrSkipToNextColumn(Cell)","checkFlushed()","resetQueryMatcher(Cell)","trySkipToNextRow(Cell)","checkScanOrder(Cell, Cell, CellComparator)","parallelSeek(List, Cell)","close(boolean)","getAllScannersForTesting()","seekAllScanner(ScanInfo, List)","next(List, ScannerContext)","getEstimatedNumberOfKvsScanned()"],"org.apache.hadoop.hbase.master.assignment.GCMultipleMergedRegionsProcedure":["executeFromState(MasterProcedureEnv, GCMergedRegionsState)","toStringClassDetails(StringBuilder)","getTableName()","getStateId(GCMergedRegionsState)","getState(int)","getTableOperationType()","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","createGCRegionProcedures(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, GCMergedRegionsState)","getInitialState()"],"org.apache.hadoop.hbase.io.hfile.bucket.BucketCache.WriterThread":["disableWriter()","run()","putIntoBackingMap(BlockCacheKey, BucketEntry)","doDrain(List)"],"org.apache.hadoop.hbase.master.procedure.AbstractStateMachineTableProcedure":["toStringClassDetails(StringBuilder)","getUser()","waitInitialized(MasterProcedureEnv)","checkOnline(MasterProcedureEnv, RegionInfo)","checkTableModifiable(MasterProcedureEnv)","setUser(User)","getWALRegionDir(MasterProcedureEnv, RegionInfo)","releaseSyncLatch()","preflightChecks(MasterProcedureEnv, Boolean)","acquireLock(MasterProcedureEnv)","releaseLock(MasterProcedureEnv)"],"org.apache.hadoop.hbase.regionserver.HRegionServer":["closeRegionIgnoreErrors(RegionInfo, boolean)","canCreateBaseZNode()","reportRegionStateTransition(RegionStateTransitionContext)","getRegionServerSpaceQuotaManager()","getRpcServer()","getConfigurationManager()","getRegion(String)","initializeZooKeeper()","getWalRoller()","closeRegion(String, boolean, ServerName)","isShutDown()","waitForMasterActive()","getRegionServerCoprocessors()","execRegionServerService(RpcController, CoprocessorServiceRequest)","getFsTableDescriptors()","getCompactSplitThread()","startHeapMemoryManager()","getUseThisHostnameInstead(Configuration)","setupNetty(Configuration)","tryRegionServerReport(long, long)","getOnlineRegionsAsPrintableString()","getCoordinatedStateManager()","createClusterConnection()","getWriteRequestCount()","reportRegionSizesForQuotas(RegionSizeStore)","getExecutorService()","remoteProcedureComplete(long, Throwable)","getRegionServerAccounting()","createRegionServerStatusStub()","removeRegion(HRegion, ServerName)","getLeases()","setupClusterConnection()","sleep(long)","keepLooping()","movedRegionCleanerPeriod()","getOnlineRegion(byte[])","getRegion(byte[])","getWriteLock()","getWAL(RegionInfo)","setupWALAndReplication()","waitForServerOnline()","setAbortRequested()","getTableDescriptors()","getClusterConnection()","getMetaTableObserver()","createRpcServices()","checkFileSystem()","setupWindows(Configuration, ConfigurationManager)","getRegionByEncodedName(byte[], String)","updateRegionFavoredNodesMapping(String, List)","cleanMovedRegions()","getConnection()","getCacheConfig()","isAborted()","getMovedRegion(String)","createConnection(Configuration)","stopServiceThreads()","getWALFileSystem()","getRegionServerCoprocessorHost()","registerService(com.google.protobuf.Service)","getMasterAddressTracker()","kill()","isOnline()","stop(String, boolean, User)","getNumberOfOnlineRegions()","getRegions()","getOnlineTables()","getOnlineRegionsLocalContext()","unassign(byte[])","main(String[])","getServerName()","getReplicationSinkService()","getWALs()","shutdownWAL(boolean)","getLastSequenceId(byte[])","preRegistrationInitialization()","walRollRequestFinished()","removeFromMovedRegions(String)","sendShutdownInterrupt()","convertThrowableToIOE(Throwable, String)","closeMetaTableRegions(boolean)","onConfigurationChange(Configuration)","containsMetaTableRegions()","initializeThreads()","createRegionServerStatusStub(boolean)","getMetrics()","getCopyOfOnlineRegionsSortedByOffHeapSize()","reportFileArchivalForQuotas(TableName, Collection)","getCopyOfOnlineRegionsSortedByOnHeapSize()","getFlushPressure()","getRegionBlockLocations(String)","convertRegionSize(RegionInfo, Long)","createRegionLoad(HRegion, RegionLoad.Builder, RegionSpecifier.Builder)","closeUserRegions(boolean)","constructRegionServer(Class, Configuration)","getSecureBulkLoadManager()","getClusterId()","isClusterUp()","stop(String)","createRegionLoad(String)","isOnlineRegionsEmpty()","getCompactionPressure()","triggerFlushInPrimaryRegion(HRegion)","addRegion(HRegion)","reportForDuty()","getMyEphemeralNodePath()","getHeapMemoryManager()","getCompactionRequestor()","getRegionByEncodedName(String)","startServices()","putUpWebUI()","getRegions(TableName)","getThreadWakeFrequency()","getNonceManager()","updateConfiguration()","getFileSystem()","getFlushRequester()","toString()","isHealthy()","executeProcedure(long, RSProcedureCallable)","startReplicationService()","buildServerLoad(long, long)","run()","getRegionServerRpcQuotaManager()","abort(String, Throwable)","registerConfigurationObservers()","getWalGroupsReplicationStatus()","initializeMemStoreChunkCreator()","canUpdateTableDescriptor()","closeAndOfflineRegionForSplitOrMerge(List)","deleteMyEphemeralNode()","getReplicationSourceService()","getStartcode()","getChoreService()","createMyEphemeralNode()","getConfiguration()","isStopped()","cleanup(Throwable, String)","isHealthCheckerConfigured()","getRegionServerMetrics()","postOpenDeployTasks(PostOpenDeployContext)","getInfoServer()","handleReportForDutyResponse(RegionServerStartupResponse)","newReplicationInstance(String, Class, Configuration, HRegionServer, FileSystem, Path, Path, WALProvider)","isStopping()","getEventLoopGroupConfig()","blockAndCheckIfStopped(ZKNodeTracker)","clearRegionBlockCache(Region)","regionLock(List, String, Abortable)","abort(String)","getFlushThroughputController()","buildReportAndSend(RegionServerStatusService.BlockingInterface, RegionSizeStore)","waitOnAllRegionsToClose(boolean)","getRSRpcServices()","closeAllRegions(boolean)","getRootDir()","getWALRootDir()","getRegionsInTransitionInRS()","getZooKeeper()","getMetaTableLocator()","getProcessName()","configureInfoServer()","createNewReplicationInstance(Configuration, HRegionServer, FileSystem, Path, Path, WALProvider)","getDumpServlet()","getFavoredNodesForRegion(String)","initializeFileSystem()","login(UserProvider, String)","checkCodecs(Configuration)","buildRegionSpaceUseReportRequest(RegionSizeStore)","areAllUserRegionsOffline()","reportProcedureDone(ReportProcedureDoneRequest)","addToMovedRegions(String, ServerName, long)"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationSourceManager":["cleanOldLogs(String, boolean, String, boolean)","join()","getAllQueues()","postLogRoll(Path)","removeSource(ReplicationSourceInterface)","logPositionAndCleanOldLogs(String, boolean, WALEntryBatch)","activeFailoverTaskCount()","abortWhenFail(ReplicationQueueOperation)","getOldSources()","getStats()","abortAndThrowIOExceptionWhenFail(ReplicationQueueOperation)","interruptOrAbortWhenFail(ReplicationQueueOperation)","cleanOldLogs(NavigableSet, String, boolean, String)","transferQueues(ServerName)","regionServerRemoved(String)","getSizeOfLatestPath()","refreshSources(String)","adoptAbandonedQueues()","removePeer(String)","getTotalBufferUsed()","throwIOExceptionWhenFail(ReplicationQueueOperation)","cleanUpHFileRefs(String, List)","getWALs()","createSource(String, ReplicationPeer)","getOldLogDir()","getWalsByIdRecoveredQueues()","removeRecoveredSource(ReplicationSourceInterface)","getSources()","addHFileRefs(TableName, byte[], List)","addPeer(String)","getSource(String)","getReplicationPeers()","deleteQueue(String)","preLogRoll(Path)","getFs()","init()","addSource(String)","getLogDir()"],"org.apache.hadoop.hbase.util.compaction.MajorCompactor":["compactAllRegions()","addNewRegions()","initializeWorkQueues()","printUsage(Options)","futuresComplete(List)","shutdown()","isCompacting(MajorCompactionRequest)","main(String[])"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationSource":["sleepForRetries(String, int)","initializeWALEntryFilter(UUID)","terminate(String, Exception, boolean, boolean)","getServerWALsBelongTo()","decorateConf()","uncaughtException(Thread, Throwable)","initAndStartReplicationEndpoint(ReplicationEndpoint)","createNewWALReader(String, PriorityBlockingQueue, long)","getReplicationEndpoint()","logPeerId()","getFileSize(Path)","getStats()","isPeerEnabled()","getWALFileLengthProvider()","startup()","createReplicationEndpoint()","getCurrentBandwidth()","init(Configuration, FileSystem, ReplicationSourceManager, ReplicationQueueStorage, ReplicationPeer, Server, String, UUID, WALFileLengthProvider, MetricsSource)","getPeerId()","terminate(String, Exception, boolean)","getCurrentPath()","enqueueLog(Path)","getSourceManager()","createNewShipper(String, PriorityBlockingQueue)","getWalGroupStatus()","tryStartNewShipper(String, PriorityBlockingQueue)","checkBandwidthChangeAndResetThrottler()","getQueueId()","terminate(String, Exception)","getSourceMetrics()","getQueueStorage()","addHFileRefs(TableName, byte[], List)","initialize()","postShipEdits(List, int)","getServer()","tryThrottle(int)","terminate(String)","isSourceActive()"],"org.apache.hadoop.hbase.master.balancer.BaseLoadBalancer":["getRegionAssignmentsByServer(Collection)","setRackManager(RackManager)","stop(String)","updateBalancerStatus(boolean)","isStopped()","getConf()","balanceMasterRegions(Map)","assignMasterSystemRegions(Collection, List)","setMasterServices(MasterServices)","areSomeRegionReplicasColocated(Cluster)","regionOnline(RegionInfo, ServerName)","createRegionFinder()","createCluster(List, Collection, boolean)","needsBalance(Cluster)","shouldBeOnMaster(RegionInfo)","retainAssignment(Map, List)","randomAssignment(Cluster, RegionInfo, List)","randomAssignment(RegionInfo, List)","setConf(Configuration)","setClusterMetrics(ClusterMetrics)","roundRobinAssignment(List, List)","postMasterStartupInitialize()","onConfigurationChange(Configuration)","setSlop(Configuration)","setClusterLoad(Map)","initialize()","regionOffline(RegionInfo)","roundRobinAssignment(Cluster, List, List, List, Map)","findIdleServers(List)"],"org.apache.hadoop.hbase.regionserver.RSRpcServices":["doNonAtomicRegionMutation(HRegion, OperationQuota, RegionAction, CellScanner, RegionActionResult.Builder, List, long, RegionScannersCloseCallBack, RpcCallContext, ActivePolicyEnforcement)","start(ZKWatcher)","mutate(RpcController, MutateRequest)","rpcPreCheck(String)","cleanupBulkLoad(RpcController, CleanupBulkLoadRequest)","multi(RpcController, MultiRequest)","getRpcScheduler()","skipCellsForMutation(Action, CellScanner)","doReplayBatchOp(HRegion, List, long)","checkAndRowMutate(HRegion, List, CellScanner, byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, RegionActionResult.Builder, ActivePolicyEnforcement)","getServerInfo(RpcController, GetServerInfoRequest)","getResultOrException(Exception, int)","getPriority()","replicateWALEntry(RpcController, ReplicateWALEntryRequest)","updateConfiguration(RpcController, UpdateConfigurationRequest)","getScannerVirtualTime(long)","stopServer(RpcController, StopServerRequest)","getSocketAddress()","getRegionInfo(RpcController, GetRegionInfoRequest)","updateFavoredNodes(RpcController, UpdateFavoredNodesRequest)","execRegionServerService(RpcController, CoprocessorServiceRequest)","getTimeLimit(HBaseRpcController, boolean)","execServiceOnRegion(HRegion, ClientProtos.CoprocessorServiceCall)","checkScanNextCallSeq(ScanRequest, RegionScannerHolder)","getScanner(long)","scan(RpcController, ScanRequest)","closeScanner(HRegion, RegionScanner, String, RpcCallContext)","doBatchOp(RegionActionResult.Builder, HRegion, OperationQuota, List, CellScanner, ActivePolicyEnforcement, boolean)","getRpcQuotaManager()","closeRegion(RpcController, CloseRegionRequest)","checkBatchSizeAndLogLargeSize(MultiRequest)","addScannerLeaseBack(Leases.Lease)","updateMutationMetrics(HRegion, long, boolean, boolean)","getServices()","newRegionScanner(ScanRequest, ScanResponse.Builder)","getHostname(Configuration, boolean)","getResultOrException(ClientProtos.Result, int)","addScanner(String, RegionScanner, Shipper, HRegion, boolean)","getRegionLoad(RpcController, GetRegionLoadRequest)","bulkLoadHFile(RpcController, BulkLoadHFileRequest)","openRegion(RpcController, OpenRegionRequest)","getOnlineRegion(RpcController, GetOnlineRegionRequest)","get(Get, HRegion, RegionScannersCloseCallBack, RpcCallContext)","startNonceOperation(MutationProto, long)","requirePermission(String, Permission.Action)","rollWALWriter(RpcController, RollWALWriterRequest)","skipCellsForMutations(List, CellScanner)","get(RpcController, GetRequest)","executeProcedures(RpcController, ExecuteProceduresRequest)","getScannersCount()","doNonAtomicBatchOp(RegionActionResult.Builder, HRegion, OperationQuota, List, CellScanner, ActivePolicyEnforcement)","closeAllScanners()","addSize(RpcCallContext, Result, Object)","addResults(ScanResponse.Builder, List, HBaseRpcController, boolean, boolean)","getConfiguration()","getStoreFile(RpcController, GetStoreFileRequest)","checkOpen()","flushRegion(RpcController, FlushRegionRequest)","getRegionScanner(ScanRequest)","prepareBulkLoad(RpcController, PrepareBulkLoadRequest)","replay(RpcController, ReplicateWALEntryRequest)","getRegion(RegionSpecifier)","createRpcServer(Server, Configuration, RpcSchedulerFactory, InetSocketAddress, String)","endNonceOperation(MutationProto, long, boolean)","stop()","scan(HBaseRpcController, ScanRequest, RegionScannerHolder, long, int, int, List, ScanResponse.Builder, MutableObject, RpcCallContext)","execService(RpcController, CoprocessorServiceRequest)","warmupRegion(RpcController, WarmupRegionRequest)","createPriority()","getDeadline(RequestHeader, Message)","getRpcSchedulerFactoryClass()","clearRegionBlockCache(RpcController, ClearRegionBlockCacheRequest)","getSpaceQuotaManager()","getSpaceQuotaSnapshots(RpcController, GetSpaceQuotaSnapshotsRequest)","getResultOrException(ResultOrException.Builder, int)","doAtomicBatchOp(RegionActionResult.Builder, HRegion, OperationQuota, List, CellScanner, ActivePolicyEnforcement)","getRegions(List, CacheEvictionStatsBuilder)","getPriority(RequestHeader, Message, User)","getScanDetailsWithId(long)","compactRegion(RpcController, CompactRegionRequest)","increment(HRegion, OperationQuota, MutationProto, CellScanner, long, ActivePolicyEnforcement)","onConfigurationChange(Configuration)","addResult(MutateResponse.Builder, Result, HBaseRpcController, boolean)","checkOOME(Throwable)","checkLimitOfRows(int, int, boolean, ScannerContext, ScanResponse.Builder)","append(HRegion, OperationQuota, MutationProto, CellScanner, long, ActivePolicyEnforcement)","checkCellSizeLimit(HRegion, Mutation)","isClientCellBlockSupport(RpcCallContext)","clearCompactionQueues(RpcController, ClearCompactionQueuesRequest)","exitIfOOME(Throwable)"],"org.apache.hadoop.hbase.wal.WALSplitter":["getMaxSequenceId(FileStatus[])","finishSplitLogFile(String, Configuration)","getSplitEditFilesSorted(FileSystem, Path)","getMaxRegionSequenceId(FileSystem, Path)","getReader(FileStatus, boolean, CancelableProgressable)","getMaxRegionSequenceId(Configuration, RegionInfo, IOExceptionSupplier, IOExceptionSupplier)","createWriter(Path)","archiveLogs(List, List, Path, FileSystem, Configuration)","getRegionSplitEditsPath(Entry, String, String, Configuration)","finishSplitLogFile(Path, Path, Path, Configuration)","isSequenceIdFile(Path)","getReader(Path, CancelableProgressable)","getNumOpenWriters()","hasRecoveredEdits(Configuration, RegionInfo)","getSequenceIdFiles(FileSystem, Path)","moveAsideBadEditsFile(FileSystem, Path)","getTmpRecoveredEditsFileName(String)","split(Path, Path, Path, FileSystem, Configuration, WALFactory)","writeRegionSequenceIdFile(FileSystem, Path, long)","getNextLogLine(Reader, Path, boolean)","getRegionDirRecoveredEditsDir(Path)","formatRecoveredEditsFileName(long)","getCompletedRecoveredEditsFilePath(Path, long)","splitLogFile(FileStatus, CancelableProgressable)","getMutationsFromWALEntry(WALEntry, CellScanner, Pair, Durability)","splitLogFile(Path, FileStatus, FileSystem, Configuration, CancelableProgressable, LastSequenceId, SplitLogWorkerCoordination, WALFactory)"],"org.apache.hadoop.hbase.master.HMaster":["canCreateBaseZNode()","setCatalogJanitorEnabled(boolean)","checkEncryption(Configuration, ColumnFamilyDescriptor)","getAverageLoad()","getRegionServerInfoPort(ServerName)","createSystemTable(TableDescriptor)","restoreSnapshot(SnapshotDescription, long, long, boolean)","listTableDescriptorsByNamespace(String)","reportMobCompactionStart(TableName)","waitForMasterActive()","normalizeRegions()","balanceSwitch(boolean)","isCleanerChoreEnabled()","getFavoredNodesManager()","getClusterMetrics()","disableTable(TableName, long, long)","getUseThisHostnameInstead(Configuration)","finishActiveMasterInitialization(MonitoredTask)","getLoadBalancer()","decommissionRegionServers(List, boolean)","getMasterFileSystem()","getTableStateManager()","shutdown()","checkTableExists(TableName)","checkCompactionPolicy(Configuration, TableDescriptor)","putUpJettyServer()","removeReplicationPeer(String)","deleteTable(TableName, long, long)","isInitialized()","getTableDescriptors()","getSplitOrMergeTracker()","getMasterCoprocessorHost()","getRemoteProcedure(long)","getBackupMasters()","getMetaTableObserver()","createRpcServices()","getClusterMetrics(EnumSet)","checkTableModifiable(TableName)","isNormalizerOn()","checkClassLoading(Configuration, TableDescriptor)","isInMaintenanceMode()","listDecommissionedRegionServers()","getTableDescriptors(List, String, String, List, boolean)","balanceThrottling(long, int, long)","getNumWALFiles()","checkInitialized()","isCatalogTable(TableName)","stopProcedureExecutor()","getLoadedCoprocessors()","getAssignmentManager()","stopServiceThreads()","addColumn(TableName, ColumnFamilyDescriptor, long, long)","checkCompression(TableDescriptor)","recommissionRegionServer(ServerName, List)","getSpaceQuotaSnapshotNotifier()","waitForNamespaceOnline()","modifyTable(TableName, TableDescriptorGetter, long, long)","getRegionServerVersion(ServerName)","checkServiceStarted()","getMasterCoprocessors()","getRegionNormalizerTracker()","listReplicationPeers(String)","createNamespace(NamespaceDescriptor, long, long)","getClusterMetricsWithoutCoprocessor()","getRemoteInetAddress(int, long)","getSnapshotManager()","getClusterMetricsWithoutCoprocessor(EnumSet)","main(String[])","executePeerProcedure(ModifyPeerProcedure)","getServerName()","splitRegion(RegionInfo, byte[], long, long)","isBalancerOn()","deleteNamespace(String, long, long)","createQuotaSnapshotNotifier()","truncateTable(TableName, boolean, long, long)","getMasterProcedureExecutor()","mergeRegions(RegionInfo[], boolean, long, long)","getQuotaObserverChore()","isRegionOnline(RegionInfo)","warnOrThrowExceptionForFailure(boolean, String, String, Exception)","getInitializedEvent()","isSplitOrMergeEnabled(MasterSwitchType)","getSnapshotQuotaObserverChore()","getMasterProcedureManagerHost()","updateConfigurationForQuotasObserver(Configuration)","getReplicationPeerManager()","getLoadBalancerClassName()","startProcedureExecutor()","getSplitPlanCount()","getClientIdAuditPrefix()","enableTable(TableName, long, long)","stop(String)","enableReplicationPeer(String)","getMasterQuotaManager()","getLastMajorCompactionTimestampForRegion(byte[])","isCatalogJanitorEnabled()","getMergePlanCount()","getLastMajorCompactionTimestamp(TableName)","getLocks()","getMaxRegionsInTransition()","getClusterSchema()","startServiceThreads()","getMasterFinishedInitializationTime()","isActiveMaster()","getMaxBalancingTime()","move(byte[], byte[])","modifyColumn(TableName, ColumnFamilyDescriptor, long, long)","waitForRegionServers(MonitoredTask)","constructMaster(Class, Configuration)","modifyTable(TableName, TableDescriptor, long, long)","run()","getWalProcedureStore()","getMobCompactionState(TableName)","getReplicationLoad(ServerName[])","disableReplicationPeer(String)","abort(String, Throwable)","balance()","getWalGroupsReplicationStatus()","canUpdateTableDescriptor()","waitForMetaOnline()","getRegionServerFatalLogBuffer()","checkReplicationScope(ColumnFamilyDescriptor)","decorateMasterConfiguration(Configuration)","initClusterSchemaService()","getProcedures()","checkCompression(ColumnFamilyDescriptor)","getMasterRpcServices()","createTable(TableDescriptor, byte[][], long, long)","getLockManager()","modifyNamespace(NamespaceDescriptor, long, long)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","createMetaBootstrap()","sanityCheckTableDescriptor(TableDescriptor)","getHFileCleaner()","getNamespace(String)","getNamespaces()","getMasterMetrics()","getLogCleaner()","listTableNames(String, String, boolean)","stopChores()","initQuotaManager()","getMasterActiveTime()","createProcedureExecutor()","addReplicationPeer(String, ReplicationPeerConfig, boolean)","remoteProcedureFailed(long, RemoteProcedureException)","getReplicationPeerConfig(String)","getHbckChore()","filterTablesByRegex(Collection, Pattern)","abortProcedure(long, boolean)","getServerManager()","getMasterStartTime()","initializeZKBasedSystemTrackers()","listTableDescriptors(String, String, List, boolean)","reportMobCompactionEnd(TableName)","initMobCleaner()","checkEncryption(Configuration, TableDescriptor)","checkIfShouldMoveSystemRegionAsync()","getZooKeeper()","startActiveMasterManager(int)","remoteProcedureCompleted(long)","getProcessName()","configureInfoServer()","createServerManager(MasterServices)","getRegionNormalizer()","getDumpServlet()","setInitialized(boolean)","requestMobCompaction(TableName, List, boolean)","stopMaster()","listTableNamesByNamespace(String)","login(UserProvider, String)","deleteColumn(TableName, byte[], long, long)","balance(boolean)","getMasterWalManager()","getCatalogJanitor()","registerService(Service)"],"org.apache.hadoop.hbase.regionserver.wal.ProtobufLogReader":["initAfterCompression(String)","getCodec(Configuration, String, CompressionContext)","hasCompression()","initAfterCompression()","setTrailerIfPresent()","initInternal(FSDataInputStream, boolean)","getPosition()","seekOnFs(long)","getWriterClsNames()","reset()","initReader(FSDataInputStream)","trailerSize()","init(FileSystem, Path, Configuration, FSDataInputStream)","readHeader(Builder, FSDataInputStream)","hasTagCompression()","readNext(Entry)","extractHiddenEof(Exception)","getCodecClsName()","close()"],"org.apache.hadoop.hbase.master.MasterRpcServices":["createConfigurationSubset()","rpcPreCheck(String)","setSplitOrMergeEnabled(RpcController, SetSplitOrMergeEnabledRequest)","mergeTableRegions(RpcController, MergeTableRegionsRequest)","getTableNames(RpcController, GetTableNamesRequest)","setCleanerChoreRunning(RpcController, SetCleanerChoreRunningRequest)","updateReplicationPeerConfig(RpcController, UpdateReplicationPeerConfigRequest)","recommissionRegionServer(RpcController, RecommissionRegionServerRequest)","addColumn(RpcController, AddColumnRequest)","getQuotaStates(RpcController, GetQuotaStatesRequest)","reportProcedureDone(RpcController, ReportProcedureDoneRequest)","isSplitOrMergeEnabled(RpcController, IsSplitOrMergeEnabledRequest)","execMasterService(RpcController, ClientProtos.CoprocessorServiceRequest)","synchronousBalanceSwitch(boolean)","isMasterRunning(RpcController, IsMasterRunningRequest)","runHbckChore(RpcController, RunHbckChoreRequest)","stopMaster(RpcController, StopMasterRequest)","assignRegion(RpcController, AssignRegionRequest)","createNamespace(RpcController, CreateNamespaceRequest)","getProcedureResult(RpcController, GetProcedureResultRequest)","hasVisibilityLabelsServiceCoprocessor(MasterCoprocessorHost)","checkCoprocessorWithService(List, Class)","getSecurityCapabilities(RpcController, SecurityCapabilitiesRequest)","submitProcedure(HBaseProtos.RegionSpecifier, boolean, BiFunction)","compactMob(CompactRegionRequest, TableName)","deleteColumn(RpcController, DeleteColumnRequest)","getProcedures(RpcController, GetProceduresRequest)","isMasterInMaintenanceMode(RpcController, IsInMaintenanceModeRequest)","getTableState(RpcController, GetTableStateRequest)","offlineRegion(RpcController, OfflineRegionRequest)","getCompletedSnapshots(RpcController, GetCompletedSnapshotsRequest)","listReplicationPeers(RpcController, ListReplicationPeersRequest)","regionServerReport(RpcController, RegionServerReportRequest)","listTableDescriptorsByNamespace(RpcController, ListTableDescriptorsByNamespaceRequest)","getLocks(RpcController, GetLocksRequest)","deleteTable(RpcController, DeleteTableRequest)","removeReplicationPeer(RpcController, RemoveReplicationPeerRequest)","restoreSnapshot(RpcController, RestoreSnapshotRequest)","balance(RpcController, BalanceRequest)","enableReplicationPeer(RpcController, EnableReplicationPeerRequest)","isSnapshotDone(RpcController, IsSnapshotDoneRequest)","requestLock(RpcController, LockRequest)","createRpcServer(Server, Configuration, RpcSchedulerFactory, InetSocketAddress, String)","unassigns(RpcController, MasterProtos.UnassignsRequest)","reportRSFatalError(RpcController, ReportRSFatalErrorRequest)","shouldSubmitSCP(ServerName)","deleteNamespace(RpcController, DeleteNamespaceRequest)","setBalancerRunning(RpcController, SetBalancerRunningRequest)","getLastFlushedSequenceId(RpcController, GetLastFlushedSequenceIdRequest)","bypassProcedure(RpcController, MasterProtos.BypassProcedureRequest)","compactRegion(RpcController, CompactRegionRequest)","setQuota(RpcController, SetQuotaRequest)","enableTable(RpcController, EnableTableRequest)","checkHFileFormatVersionForMob()","containMetaWals(ServerName)","execProcedureWithRet(RpcController, ExecProcedureRequest)","isNormalizerEnabled(RpcController, IsNormalizerEnabledRequest)","getClusterStatus(RpcController, GetClusterStatusRequest)","moveRegion(RpcController, MoveRegionRequest)","modifyColumn(RpcController, ModifyColumnRequest)","getSpaceQuotaRegionSizes(RpcController, GetSpaceQuotaRegionSizesRequest)","runCleanerChore(RpcController, RunCleanerChoreRequest)","getRegionInfo(RpcController, GetRegionInfoRequest)","listNamespaceDescriptors(RpcController, ListNamespaceDescriptorsRequest)","clearDeadServers(RpcController, ClearDeadServersRequest)","reportFileArchival(RpcController, FileArchiveNotificationRequest)","scheduleServerCrashProcedure(RpcController, MasterProtos.ScheduleServerCrashProcedureRequest)","isCatalogJanitorEnabled(RpcController, IsCatalogJanitorEnabledRequest)","listTableNamesByNamespace(RpcController, ListTableNamesByNamespaceRequest)","getTableDescriptors(RpcController, GetTableDescriptorsRequest)","getLastMajorCompactionTimestamp(RpcController, MajorCompactionTimestampRequest)","getServices()","addConfig(RegionServerStartupResponse.Builder, String)","getRegionInfo(HBaseProtos.RegionSpecifier)","splitRegion(RpcController, SplitTableRegionRequest)","runCatalogScan(RpcController, RunCatalogScanRequest)","modifyNamespace(RpcController, ModifyNamespaceRequest)","setNormalizerRunning(RpcController, SetNormalizerRunningRequest)","deleteSnapshot(RpcController, DeleteSnapshotRequest)","createTable(RpcController, CreateTableRequest)","isBalancerEnabled(RpcController, IsBalancerEnabledRequest)","truncateTable(RpcController, TruncateTableRequest)","setTableStateInMeta(RpcController, SetTableStateInMetaRequest)","enableCatalogJanitor(RpcController, EnableCatalogJanitorRequest)","assigns(RpcController, MasterProtos.AssignsRequest)","reportRegionStateTransition(RpcController, ReportRegionStateTransitionRequest)","execProcedure(RpcController, ExecProcedureRequest)","isCleanerChoreEnabled(RpcController, IsCleanerChoreEnabledRequest)","decommissionRegionServers(RpcController, DecommissionRegionServersRequest)","disableTable(RpcController, DisableTableRequest)","getReplicationPeerConfig(RpcController, GetReplicationPeerConfigRequest)","regionServerStartup(RpcController, RegionServerStartupRequest)","unassignRegion(RpcController, UnassignRegionRequest)","getNamespaceDescriptor(RpcController, GetNamespaceDescriptorRequest)","snapshot(RpcController, SnapshotRequest)","listDecommissionedRegionServers(RpcController, ListDecommissionedRegionServersRequest)","fixMeta(RpcController, FixMetaRequest)","createPriority()","addReplicationPeer(RpcController, AddReplicationPeerRequest)","getRpcSchedulerFactoryClass()","hasAccessControlServiceCoprocessor(MasterCoprocessorHost)","lockHeartbeat(RpcController, LockHeartbeatRequest)","disableReplicationPeer(RpcController, DisableReplicationPeerRequest)","getSchemaAlterStatus(RpcController, GetSchemaAlterStatusRequest)","isProcedureDone(RpcController, IsProcedureDoneRequest)","modifyTable(RpcController, ModifyTableRequest)","convert(MasterProtos.MasterSwitchType)","getLastMajorCompactionTimestampForRegion(RpcController, MajorCompactionTimestampForRegionRequest)","abortProcedure(RpcController, AbortProcedureRequest)","normalize(RpcController, NormalizeRequest)","switchBalancer(boolean, BalanceSwitchMode)","reportRegionSpaceUse(RpcController, RegionSpaceUseReportRequest)","shutdown(RpcController, ShutdownRequest)"],"org.apache.hadoop.hbase.tool.CanaryTool.RegionTask":["read()","call()","write()"],"org.apache.hadoop.hbase.master.assignment.AssignmentManager":["markRegionAsSplit(RegionInfo, ServerName, RegionInfo, RegionInfo)","markRegionAsClosing(RegionStateNode)","start()","getSnapShotOfAssignment(Collection)","isCarryingRegion(ServerName, RegionInfo)","shouldAssignFavoredNodes(RegionInfo)","addToPendingAssignment(HashMap, Collection)","isMetaAssigned()","isMetaRegionInTransition()","createAssignProcedure(RegionInfo, ServerName, boolean)","sendRegionClosedNotification(RegionInfo)","waitMetaLoaded(Procedure)","getAssignedRegions()","getTableStateManager()","updateRegionTransition(ServerName, TransitionCode, RegionInfo, long)","createAssignProcedure(RegionInfo)","markRegionAsMerged(RegionInfo, ServerName, RegionInfo[])","getMetaRegionFromName(byte[])","deleteTable(TableName)","updateRegionMergeTransition(ServerName, TransitionCode, RegionInfo, RegionInfo, RegionInfo)","markRegionAsOpening(RegionStateNode)","getRegionInfo(byte[])","registerListener(AssignmentListener)","unregisterListener(AssignmentListener)","assign(RegionInfo, ServerName)","getFavoredNodes(RegionInfo)","checkOnlineRegionsReportForMeta(ServerName, Set)","markRegionAsOpened(RegionStateNode)","isTableDisabled(TableName)","getRSReports()","hasRegionsInTransition()","checkMetaLoaded(RegionInfo)","getBalancer()","offlineRegion(RegionInfo)","moveAsync(RegionPlan)","getRegionsInTransition()","unassign(RegionInfo)","reportRegionStateTransition(ReportRegionStateTransitionRequest)","stop()","isMetaRegion(byte[])","createAssignProcedure(RegionInfo, boolean)","submitServerCrash(ServerName, boolean)","serverAdded(ServerName)","loadMeta()","killRegionServer(ServerName)","reportTransition(RegionStateNode, ServerName, TransitionCode, long)","processOfflineRegions()","sendRegionOpenedNotification(RegionInfo, ServerName)","processAssignQueue()","updateRegionsInTransitionMetrics(RegionInTransitionStat)","getProcedureEnvironment()","setMetaAssigned(RegionInfo, boolean)","queueAssign(RegionStateNode)","getReopenStatus(TableName)","move(RegionInfo)","createAssignProcedures(Map, int)","getMetaForRegion(RegionInfo)","createAssignProcedures(List)","stopAssignmentThread()","assignQueueSignal()","assign(RegionInfo)","getRegionStates()","createUnassignProcedure(RegionInfo, ServerName, boolean, boolean)","createRoundRobinAssignProcedures(List)","createUnassignProcedures(TableName)","undoRegionAsClosing(RegionStateNode)","handleRegionOverStuckWarningThreshold(RegionInfo)","getAssignmentManagerMetrics()","getRegionStateStore()","computeRegionInTransitionStat()","wakeServerReportEvent(ServerStateNode)","addRegionInTransition(RegionStateNode, RegionTransitionProcedure)","createAssignProcedure(RegionInfo, ServerName)","getMaster()","isMetaLoaded()","updateRegionSplitTransition(ServerName, TransitionCode, RegionInfo, RegionInfo, RegionInfo)","isCarryingMeta(ServerName)","serverRemoved(ServerName)","waitOnAssignQueue()","getMetaRegionSet()","getNumRegionsOpened()","unassign(RegionInfo, boolean)","getAssignMaxAttempts()","markRegionAsClosed(RegionStateNode)","wakeMetaLoadedEvent()","acceptPlan(HashMap, Map)","isTableEnabled(TableName)","waitServerReportEvent(ServerName, Procedure)","createUnassignProcedure(RegionInfo)","getConfiguration()","isRunning()","getRegionStatesCount(TableName)","processAssignmentPlans(HashMap, HashMap, List, List)","getExcludedServersForSystemTable()","removeRegionInTransition(RegionStateNode, RegionTransitionProcedure)","createMergeProcedure(RegionInfo[])","createUnassignProcedure(RegionInfo, ServerName, boolean)","startAssignmentThread()","checkOnlineRegionsReport(ServerStateNode, Set)","joinCluster()","createUnassignProcedures(Collection)","createUnassignProcedure(RegionInfo, boolean)","getSystemTables(ServerName)","isMetaRegion(RegionInfo)","createSplitProcedure(RegionInfo, byte[])","isLogSplittingDone(ServerName, boolean)","reportOnlineRegions(ServerName, Set)","createMoveRegionProcedure(RegionPlan)","waitMetaAssigned(Procedure, RegionInfo)","checkIfShouldMoveSystemRegionAsync()","createRoundRobinAssignProcedures(List, List)","onlineRegion(RegionInfo, ServerName)","undoRegionAsOpening(RegionStateNode)","getProcedureScheduler()","getMetaAssignEvent(RegionInfo)"],"org.apache.hadoop.hbase.regionserver.HStore":["moveCompactedFilesIntoPlace(CompactionRequestImpl, List, User)","createStoreFileAndReader(Path)","getScanners(boolean, boolean, boolean, ScanQueryMatcher, byte[], boolean, byte[], boolean, long)","determineTTLFromFamily(ColumnFamilyDescriptor)","getMaxStoreFileAge()","closeAndArchiveCompactedFiles()","removeCompactedfiles(Collection, boolean)","getMemStoreFlushSize()","timeOfOldestEdit()","preSnapshotOperation()","addToCompactingFiles(Collection)","deleteChangedReaderObserver(ChangedReadersObserver)","isSloppyMemStore()","loadStoreFiles()","refreshStoreFilesInternal(Collection)","startReplayingFromWAL()","triggerMajorCompaction()","getColumnFamilyDescriptor()","createStoreEngine(HStore, Configuration, CellComparator)","createFileContext(Compression.Algorithm, boolean, boolean, Encryption.Context)","getCompactionProgress()","registerChildren(ConfigurationManager)","getMaxSequenceId()","compactRecentForTestingAssumingDefaultPolicy(int)","createCacheConf(ColumnFamilyDescriptor)","getHRegion()","closeAndArchiveCompactedFiles(boolean)","getStoreSizeUncompressed()","refreshStoreFiles()","setScanInfo(ScanInfo)","getStoreFileTtl()","getMemstore()","getComparator()","getTotalStaticBloomSize()","requestCompaction()","getScanner(Scan, NavigableSet, long)","getCloseCheckInterval()","logCompactionEndMessage(CompactionRequestImpl, List, long, long)","getCacheConfig()","getChecksumType(Configuration)","bulkLoadHFile(byte[], String, Path)","shouldPerformMajorCompaction()","heapSize()","getTotalUncompressedBytes(List)","getCompactedFilesCount()","updateSpaceQuotaAfterFileReplacement(RegionSizeStore, RegionInfo, Collection, Collection)","canSplit()","getStoreHomedir(Path, RegionInfo, byte[])","snapshot()","setDataBlockEncoderInTest(HFileDataBlockEncoder)","bulkLoadHFile(HStoreFile)","close()","throttleCompaction(long)","getCompactedCellsCount()","getMaxMemStoreTS()","getStorefilesSize()","flushCache(long, MemStoreSnapshot, MonitoredTask, ThroughputController, FlushLifeCycleTracker)","getStoreFileAgeStream()","getFlushedCellsCount()","getNumReferenceFiles()","getRegionFileSystem()","requestCompaction(int, CompactionLifeCycleTracker, User)","getMinStoreFileAge()","openStoreFiles(Collection)","getScanners(List, boolean, boolean, boolean, ScanQueryMatcher, byte[], boolean, byte[], boolean, long, boolean)","getScanners(boolean, boolean, boolean, boolean, ScanQueryMatcher, byte[], byte[], long)","removeUnneededFiles()","add(Cell, MemStoreSizing)","onConfigurationChange(Configuration)","isPrimaryReplicaStore()","getOffPeakHours()","replayCompactionMarker(CompactionDescriptor, boolean, boolean)","postSnapshotOperation()","getAvgStoreFileAge()","commitFile(Path, long, MonitoredTask)","getCompactionPressure()","moveFileIntoPlace(Path)","getStorefilesSize(Collection, Predicate)","getStorefilesRootLevelIndexSize()","getStoreHomedir(Path, String, byte[])","replaceStoreFiles(Collection, Collection)","getHFilesSize()","getCoprocessorHost()","getFlushedCellsSize()","reportArchivedFilesForQuota(List, List)","createStoreFileAndReader(StoreFileInfo)","getTotalSize(Collection)","getScanners(List, boolean, boolean, boolean, boolean, ScanQueryMatcher, byte[], byte[], long, boolean)","hasReferences()","recreateScanners(List, boolean, boolean, boolean, ScanQueryMatcher, byte[], boolean, byte[], boolean, long, boolean)","bulkLoadHFile(StoreFileInfo)","getCompactedCellsSize()","getFileSystem()","upsert(Iterable, long, MemStoreSizing)","toString()","getCompactedFiles()","deregisterChildren(ConfigurationManager)","getCompactionCheckMultiplier()","getMajorCompactedCellsCount()","getBlockingFileCount()","assertBulkLoadHFileOk(Path)","addChangedReaderObserver(ChangedReadersObserver)","getSplitPoint()","getTotalStaticIndexSize()","getDataBlockEncoder()","stopReplayingFromWAL()","getFlushedOutputFileSize()","getStorefilesFieldSize(ToLongFunction)","needsCompaction()","getColumnFamilyName()","getStorefiles()","hasTooManyStoreFiles()","writeCompactionWalRecord(Collection, Collection)","getStorefilesCount()","clearAndClose(List)","cancelRequestedCompaction(CompactionContext)","getStorefileFieldSize(HStoreFile, ToLongFunction)","add(Iterable, MemStoreSizing)","doCompaction(CompactionRequestImpl, Collection, User, long, List)","getMajorCompactedCellsSize()","validateStoreFile(Path)","getNumHFiles()","getCompactPriority()","getScanInfo()","preFlushSeqIDEstimation()","preBulkLoadHFile(String, long)","getMemStoreSize()","getSnapshotSize()","createFlushContext(long, FlushLifeCycleTracker)","getStoreFileSize(HStoreFile)","compact(CompactionContext, ThroughputController, User)","finishCompactionRequest(CompactionRequestImpl)","versionsToReturn(int)","createScanner(Scan, ScanInfo, NavigableSet, long)","getCurrentParallelPutCount()","createWriterInTmp(long, Compression.Algorithm, boolean, boolean, boolean, boolean)","getSmallestReadPoint()","getLastCompactSize()","getSize()","getTableName()","notifyChangedReadersObservers(List)","areWritesEnabled()","clearCompactedfiles(List)","getBytesPerChecksum(Configuration)","updateStorefiles(List, long)","getStoreEngine()","completeCompaction(Collection)","getFlushableSize()","refreshStoreFiles(Collection)","getRegionInfo()"],"org.apache.hadoop.hbase.master.assignment.UnassignProcedure":["toStringClassDetails(StringBuilder)","remoteCallFailed(MasterProcedureEnv, RegionStateNode, IOException)","getTableOperationType()","updateTransition(MasterProcedureEnv, RegionStateNode)","getServer(MasterProcedureEnv)","reportTransition(MasterProcedureEnv, RegionStateNode, TransitionCode, long)","remoteCallBuild(MasterProcedureEnv, ServerName)","finishTransition(MasterProcedureEnv, RegionStateNode)","proceed(MasterProcedureEnv, RegionStateNode)","isRollbackSupported(RegionTransitionState)","isSafeToProceed(MasterProcedureEnv, RegionStateNode, IOException)","getProcedureMetrics(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","startTransition(MasterProcedureEnv, RegionStateNode)"],"org.apache.hadoop.hbase.io.hfile.HFileBlock.FSReaderImpl":["readBlockData(long, long, boolean, boolean)","readAtOffset(FSDataInputStream, byte[], int, int, boolean, long, boolean)","toString()","verifyOnDiskSizeMatchesHeader(int, ByteBuffer, long, boolean)","blockRange(long, long)","getCachedHeader(long)","cacheNextBlockHeader(long, byte[], int, int)","getDefaultBlockDecodingContext()","readBlockDataInternal(FSDataInputStream, long, long, boolean, boolean, boolean)","unbufferStream()","closeStreams()","setIncludesMemStoreTS(boolean)","setDataBlockEncoder(HFileDataBlockEncoder)","checkAndGetSizeAsInt(long, int)","getBlockDecodingContext()","validateChecksum(long, ByteBuffer, int)"],"org.apache.hadoop.hbase.master.cleaner.LogCleaner":["validate(Path)","getCleanerThreadTimeoutMsec()","onConfigurationChange(Configuration)","cleanup()","cancel(boolean)","getCleanerThreadCheckIntervalMsec()","getSizeOfCleaners()","deleteFiles(Iterable)","deleteFile()","createOldWalsCleaner(int)","interruptOldWALsCleaner()"],"org.apache.hadoop.hbase.client.HBaseAdmin":["splitRegionSync(byte[], byte[])","clearCompactionQueues(ServerName, Set)","listTableDescriptorsByNamespace(String)","getRpcControllerFactory()","majorCompactRegionServer(ServerName)","splitRegionAsync(byte[], byte[])","getTableDescriptor(TableName, Connection, RpcRetryingCallerFactory, RpcControllerFactory, int, int)","removeReplicationPeerTableCFs(String, Map)","modifyTable(TableDescriptor)","compactRegion(byte[], byte[], boolean)","assign(byte[])","getCompactionStateForRegion(byte[])","restoreSnapshot(String)","decommissionRegionServers(List, boolean)","restoreSnapshot(String, boolean)","disableReplicationPeerAsync(String)","setQuota(QuotaSettings)","updateReplicationPeerConfigAsync(String, ReplicationPeerConfig)","shutdown()","createTable(TableDescriptor, byte[][])","listReplicatedTableCFs()","normalize()","removeReplicationPeer(String)","restoreSnapshot(String, boolean, boolean)","deleteTable(TableName)","isProcedureFinished(String, String, Map)","splitOrMergeSwitch(boolean, boolean, MasterSwitchType)","getClusterMetrics(EnumSet)","deleteNamespaceAsync(String)","listSnapshots(Pattern)","getTableRegions(TableName)","majorCompact(TableName, byte[], CompactType)","runCatalogJanitor()","isAborted()","asyncSnapshot(SnapshotProtos.SnapshotDescription)","splitRegionAsync(RegionInfo, byte[])","recommissionRegionServer(ServerName, List)","balancerSwitch(boolean, boolean)","listNamespaceDescriptors()","compact(TableName)","clearBlockCache(ServerName, List)","snapshot(String, TableName, SnapshotType)","disableTables(Pattern)","mergeSwitch(boolean, boolean)","enableReplicationPeerAsync(String)","clearDeadServers(List)","getTableDescriptor(TableName)","deleteTables(String)","getRegions(ServerName)","listTableNames()","compactRegionServer(ServerName)","splitRegionSync(byte[], byte[], long, TimeUnit)","mergeRegions(byte[], byte[], boolean)","modifyTableAsync(TableName, TableDescriptor)","rollHLogWriter(String)","internalRestoreSnapshotAsync(String, TableName, boolean)","snapshot(byte[], TableName)","cloneTableSchema(TableName, TableName, boolean)","split(TableName)","getRegionName(byte[])","modifyTableAsync(TableDescriptor)","listTableDescriptors(List)","listReplicationPeers()","enableReplicationPeer(String)","isCatalogJanitorEnabled()","executeCallable(C)","listTableNames(String)","getRegionMetrics(ServerName, TableName)","getLocks()","getDescriptor(TableName)","deleteColumnFamilyAsync(TableName, byte[])","getRegions(TableName)","listTables(String)","coprocessorService()","listTables(Pattern, boolean)","enableTableReplication(TableName)","updateConfiguration()","normalizerSwitch(boolean)","majorCompact(TableName, CompactType)","disableTable(TableName)","checkAndSyncTableDescToPeers(TableName, byte[][])","closeRegion(ServerName, HRegionInfo)","majorCompact(TableName, byte[])","restoreSnapshot(byte[], boolean)","mergeRegionsAsync(byte[], byte[], boolean)","disableReplicationPeer(String)","abort(String, Throwable)","listTableNames(String, boolean)","catalogJanitorSwitch(boolean)","mergeRegionsSync(byte[], byte[], boolean)","getOperationTimeout()","disableTableAsync(TableName)","cleanerChoreSwitch(boolean)","compact(TableName, CompactType)","getConfiguration()","snapshot(String, TableName)","listSnapshots(String)","enableTableAsync(TableName)","createNamespace(NamespaceDescriptor)","available(Configuration)","getReplicationPeerConfig(String)","offline(byte[])","closeRegion(String, String)","disableTableReplication(TableName)","abortProcedureAsync(long, boolean)","enableTable(TableName)","enableTables(String)","createTableAsync(TableDescriptor, byte[][])","internalDeleteSnapshot(SnapshotDescription)","split(TableName, byte[])","getPauseTime(int)","listTableNamesByNamespace(String)","deleteNamespace(String)","balance(boolean)","snapshot(SnapshotDescription)","splitSwitch(boolean, boolean)","snapshotAsync(SnapshotDescription)","compact(TableName, byte[])","clearBlockCache(TableName)","compact(AdminService.BlockingInterface, RegionInfo, boolean, byte[])","cloneSnapshotAsync(String, TableName)","deleteSnapshots(String)","getHTableDescriptor(TableName, Connection, RpcRetryingCallerFactory, RpcControllerFactory, int, int)","isCleanerChoreEnabled()","isSnapshotFinished(SnapshotDescription)","listTableDescriptors(Pattern, boolean)","getQuota(QuotaFilter)","getAlterStatus(byte[])","addReplicationPeerAsync(String, ReplicationPeerConfig, boolean)","rollWALWriterImpl(ServerName)","restoreSnapshotAsync(String)","checkTableExists(TableName)","execProcedure(String, String, Map)","getRegion(byte[])","updateConfiguration(ServerName)","createNamespaceAsync(NamespaceDescriptor)","getTableNameBeforeRestoreSnapshot(String)","setTableRep(TableName, boolean)","getSecurityCapabilities()","removeReplicationPeerAsync(String)","listTableSnapshots(Pattern, Pattern)","listTableDescriptorsByNamespace(byte[])","listDecommissionedRegionServers()","getConnection()","deleteTables(Pattern)","compact(TableName, byte[], CompactType)","isTableDisabled(TableName)","compactRegion(byte[])","isBalancerEnabled()","majorCompactRegion(byte[], byte[])","listTableNames(Pattern, boolean)","deleteColumn(TableName, byte[])","getQuotaRetriever(QuotaFilter)","rollWALWriter(ServerName)","modifyTable(TableName, TableDescriptor)","deleteTableAsync(TableName)","modifyColumnFamily(TableName, ColumnFamilyDescriptor)","addColumnFamily(TableName, ColumnFamilyDescriptor)","deleteColumnFamily(TableName, byte[])","close()","deleteTableSnapshots(Pattern, Pattern)","splitRegion(byte[])","compact(TableName, byte[], boolean, CompactType)","truncateTable(TableName, boolean)","flush(TableName)","deleteTableSnapshots(String, String)","listTables(String, boolean)","modifyNamespace(NamespaceDescriptor)","closeRegion(byte[], String)","runCleanerChore()","deleteSnapshot(byte[])","appendReplicationPeerTableCFs(String, Map)","createTable(TableDescriptor, byte[], byte[], int)","majorCompactRegion(byte[])","executeCallable(C, RpcRetryingCallerFactory, int, int)","mergeRegionsAsync(byte[][], boolean)","getLastMajorCompactionTimestampForRegion(byte[])","getAlterStatus(TableName)","unassign(byte[], boolean)","cloneSnapshot(byte[], TableName)","getLastMajorCompactionTimestamp(TableName)","deleteSnapshot(String)","listTableNames(Pattern)","listTableSnapshots(String, String)","listTableDescriptors(Pattern)","execProcedureWithReturn(String, String, Map)","majorCompact(TableName)","isSplitEnabled()","compactRegion(byte[], byte[])","flushRegionServer(ServerName)","get(Future, long, TimeUnit)","isMasterInMaintenanceMode()","move(byte[], byte[])","createTable(TableDescriptor)","disableTables(String)","addColumnFamilyAsync(TableName, ColumnFamilyDescriptor)","stopRegionServer(String)","enableTables(Pattern)","listSnapshots()","flushRegion(byte[])","balance()","flush(AdminService.BlockingInterface, RegionInfo)","getOnlineRegions(ServerName)","coprocessorService(ServerName)","isTableAvailable(TableName, byte[][])","isTableEnabled(TableName)","deleteSnapshots(Pattern)","tableExists(TableName)","isNormalizerEnabled()","getProcedures()","cloneSnapshot(String, TableName)","isMergeEnabled()","cloneSnapshot(String, TableName, boolean)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","closeRegionWithEncodedRegionName(String, String)","restoreSnapshot(byte[])","listTables(Pattern)","addReplicationPeer(String, ReplicationPeerConfig, boolean)","modifyColumnFamilyAsync(TableName, ColumnFamilyDescriptor)","listTables()","abortProcedure(long, boolean)","getTableDescriptors(List)","getTableSplits(TableName)","getNamespaceDescriptor(String)","splitRegion(byte[], byte[])","isTableAvailable(TableName)","getCompactionState(TableName)","listReplicationPeers(Pattern)","stopMaster()","listTableDescriptors()","modifyNamespaceAsync(NamespaceDescriptor)","getTableDescriptorsByTableName(List)","truncateTableAsync(TableName, boolean)","getCompactionState(TableName, CompactType)"],"org.apache.hadoop.hbase.master.procedure.ReopenTableRegionsProcedure":["getTableName()","getState(int)","getTableOperationType()","executeFromState(MasterProcedureEnv, ReopenTableRegionsState)","rollbackState(MasterProcedureEnv, ReopenTableRegionsState)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","getStateId(ReopenTableRegionsState)","setTimeoutFailure(MasterProcedureEnv)","createReopenProcedure(MasterProcedureEnv, HRegionLocation)","getInitialState()"],"org.apache.hadoop.hbase.util.compaction.MajorCompactor.Compact":["run()","compactAndWait(MajorCompactionRequest)"],"org.apache.hadoop.hbase.client.RawAsyncHBaseAdmin":["snapshot(SnapshotDescription)","newAdminCaller()","clearCompactionQueues(ServerName, Set)","listTableDescriptorsByNamespace(String)","clearBlockCache(TableName)","majorCompactRegionServer(ServerName)","deleteSnapshots()","removeReplicationPeerTableCFs(String, Map)","modifyTable(TableDescriptor)","compactRegion(byte[], byte[], boolean)","isCleanerChoreEnabled()","assign(byte[])","getClusterMetrics()","stopRegionServer(ServerName)","checkRegionsAndGetTableName(byte[], byte[])","listTableSnapshots(Pattern)","isSnapshotFinished(SnapshotDescription)","getCompactionStateForRegion(byte[])","listTableDescriptors(Pattern, boolean)","getQuota(QuotaFilter)","restoreSnapshot(String)","decommissionRegionServers(List, boolean)","getTableDescriptors(GetTableDescriptorsRequest)","getRegionLocation(byte[])","compareTableWithPeerCluster(TableName, TableDescriptor, ReplicationPeerDescription, AsyncAdmin)","isSplitOrMergeOn(MasterSwitchType)","restoreSnapshot(String, boolean)","setQuota(QuotaSettings)","verifySplitKeys(byte[][])","internalRestoreSnapshot(String, TableName)","shutdown()","deleteTableSnapshots(Pattern)","createTable(TableDescriptor, byte[][])","listReplicatedTableCFs()","execProcedure(String, String, Map)","removeReplicationPeer(String)","normalize()","updateConfiguration(ServerName)","deleteTable(TableName)","toEncodeRegionName(byte[])","getRegionInfo(byte[])","isProcedureFinished(String, String, Map)","procedureCall(PREQ, MasterRpcCall, Converter, ProcedureBiConsumer)","getSecurityCapabilities()","listSnapshots(Pattern)","listTableSnapshots(Pattern, Pattern)","getClusterMetrics(EnumSet)","isTableAvailable(TableName, Optional)","listDecommissionedRegionServers()","majorCompact(TableName, byte[], CompactType)","compareRegionsWithSplitKeys(List, byte[][])","compact(TableName, byte[], CompactType)","isTableDisabled(TableName)","runCatalogJanitor()","compactRegion(byte[])","isBalancerEnabled()","recommissionRegionServer(ServerName, List)","majorCompactRegion(byte[], byte[])","newMasterCaller()","listTableNames(Pattern, boolean)","rollWALWriter(ServerName)","modifyColumnFamily(TableName, ColumnFamilyDescriptor)","listNamespaceDescriptors()","newServerCaller()","clearBlockCache(ServerName, List)","addColumnFamily(TableName, ColumnFamilyDescriptor)","deleteColumnFamily(TableName, byte[])","deleteTableSnapshots(Pattern, Pattern)","balancerSwitch(boolean)","splitRegion(byte[])","compact(TableName, byte[], boolean, CompactType)","split(RegionInfo, byte[])","clearDeadServers(List)","truncateTable(TableName, boolean)","flush(TableName)","splitSwitch(boolean)","getRegions(ServerName)","modifyNamespace(NamespaceDescriptor)","compactRegionServer(ServerName)","mergeRegions(byte[], byte[], boolean)","getProcedureResult(long, CompletableFuture, int)","runCleanerChore()","appendReplicationPeerTableCFs(String, Map)","flush(ServerName, RegionInfo)","createTable(TableDescriptor, byte[], byte[], int)","majorCompactRegion(byte[])","cloneTableSchema(TableName, TableName, boolean)","split(TableName)","listReplicationPeers()","enableReplicationPeer(String)","getLastMajorCompactionTimestampForRegion(byte[])","getRegionMetrics(ServerName)","isCatalogJanitorEnabled()","getRegionMetrics(ServerName, TableName)","unassign(byte[], boolean)","waitProcedureResult(CompletableFuture)","getLastMajorCompactionTimestamp(TableName)","deleteSnapshot(String)","getLocks()","coprocessorService(Function, ServiceCaller)","getDescriptor(TableName)","execProcedureWithReturn(String, String, Map)","listReplicationPeers(ListReplicationPeersRequest)","getRegions(TableName)","getSplitKeys(byte[], byte[], int)","failedFuture(Throwable)","isSplitEnabled()","enableTableReplication(TableName)","compactRegion(byte[], byte[])","compact(ServerName, RegionInfo, boolean, byte[])","flushRegionServer(ServerName)","updateConfiguration()","isMasterInMaintenanceMode()","normalizerSwitch(boolean)","majorCompact(TableName, CompactType)","checkAndGetTableName(byte[], AtomicReference, CompletableFuture)","listTableNames(boolean)","createTable(TableDescriptor)","disableTable(TableName)","getCompletedSnapshots(Pattern)","move(byte[])","disableReplicationPeer(String)","listSnapshots()","getRegionMetrics(GetRegionLoadRequest, ServerName)","flushRegion(byte[])","getTableHRegionLocations(TableName)","isTableAvailable(TableName, byte[][])","catalogJanitorSwitch(boolean)","isTableEnabled(TableName)","deleteSnapshots(Pattern)","tableExists(TableName)","internalDeleteSnapshots(Pattern, Pattern)","setTableReplication(TableName, boolean)","getProcedures()","isNormalizerEnabled()","isMergeEnabled()","cloneSnapshot(String, TableName)","trySyncTableToPeerCluster(TableName, byte[][], ReplicationPeerDescription)","compact(TableName, CompactType)","cleanerChoreSwitch(boolean)","completeConditionalOnFuture(CompletableFuture, CompletableFuture)","adminCall(HBaseRpcController, AdminService.Interface, PREQ, AdminRpcCall, Converter)","updateReplicationPeerConfig(String, ReplicationPeerConfig)","move(byte[], ServerName)","createNamespace(NamespaceDescriptor)","addReplicationPeer(String, ReplicationPeerConfig, boolean)","getReplicationPeerConfig(String)","listTableDescriptors(boolean)","offline(byte[])","abortProcedure(long, boolean)","mergeSwitch(boolean)","disableTableReplication(TableName)","getTableSplits(TableName)","moveRegion(MoveRegionRequest)","checkAndSyncTableToPeerClusters(TableName, byte[][])","enableTable(TableName)","getNamespaceDescriptor(String)","splitRegion(byte[], byte[])","restoreSnapshot(String, TableName, boolean)","completeExceptionally(CompletableFuture, Throwable)","isTableAvailable(TableName)","listReplicationPeers(Pattern)","createTable(TableName, CreateTableRequest)","internalDeleteSnapshot(SnapshotDescription)","split(TableName, byte[])","listTableNamesByNamespace(String)","compactRegionServer(ServerName, boolean)","stopMaster()","deleteNamespace(String)","setSplitOrMergeOn(boolean, MasterSwitchType)","getCompletedSnapshots(Pattern, Pattern)","coprocessorService(Function, ServiceCaller, ServerName)","getTableNames(GetTableNamesRequest)","getCompactionState(TableName, CompactType)","call(HBaseRpcController, MasterService.Interface, PREQ, MasterRpcCall, Converter)","balance(boolean)"],"org.apache.hadoop.hbase.master.assignment.RegionTransitionProcedure":["holdLock(MasterProcedureEnv)","setRegionInfo(RegionInfo)","getRegionState(MasterProcedureEnv)","execute(MasterProcedureEnv)","rollback(MasterProcedureEnv)","setOverride(boolean)","remoteOperationCompleted(MasterProcedureEnv)","remoteOperationFailed(MasterProcedureEnv, RemoteProcedureException)","isServerOnline(MasterProcedureEnv, ServerName)","getTransitionState()","getAttempt()","toStringState(StringBuilder)","setTransitionState(RegionTransitionState)","releaseLock(MasterProcedureEnv)","toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","waitInitialized(MasterProcedureEnv)","isMeta()","storeInDispatchedQueue()","remoteCallFailed(MasterProcedureEnv, ServerName, IOException)","acquireLock(MasterProcedureEnv)","isServerOnline(MasterProcedureEnv, RegionStateNode)","getTableName()","reportTransition(MasterProcedureEnv, ServerName, TransitionCode, long)","addToRemoteDispatcher(MasterProcedureEnv, ServerName)","setAttempt(int)","bypass(MasterProcedureEnv)","shouldWaitClientAck(MasterProcedureEnv)","setTimeoutFailure(MasterProcedureEnv)","isOverride()","getRegionInfo()"],"org.apache.hadoop.hbase.replication.regionserver.HBaseInterClusterReplicationEndpoint":["parseTable(String)","sleepForRetries(String, int)","parallelReplicate(CompletionService, ReplicateContext, List)","createParallelBatches(List)","decorateConf()","replicate(ReplicateContext)","replicateEntries(List, int)","createSerialBatches(List)","filterBatches(List, TableName)","createReplicator(List, int)","doStop()","createBatches(List)","init(Context)","logPeerId()","reconnectToPeerCluster()","getEstimatedEntrySize(Entry)","isPeerEnabled()","connectToPeers()","serialReplicateRegionEntries(List, int)"],"org.apache.hadoop.hbase.master.procedure.RecoverMetaProcedure":["toStringClassDetails(StringBuilder)","getState(int)","completionCleanup(MasterProcedureEnv)","acquireLock(MasterProcedureEnv)","getStateId(MasterProcedureProtos.RecoverMetaState)","getInitialState()","prepare(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","isRunRequired()","handleRIT(MasterProcedureEnv, RegionInfo, ServerName)","rollbackState(MasterProcedureEnv, MasterProcedureProtos.RecoverMetaState)","releaseLock(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, MasterProcedureProtos.RecoverMetaState)"],"org.apache.hadoop.hbase.security.access.AccessControlClient":["isAuthorizationEnabled(Connection)","grant(Connection, TableName, String, byte[], byte[], Permission.Action[])","grant(Connection, String, String, boolean, Permission.Action[])","grant(Connection, String, Permission.Action[])","grant(Connection, TableName, String, byte[], byte[], boolean, Permission.Action[])","getAccessControlServiceStub(Table)","isAccessControllerRunning(Connection)","revoke(Connection, String, Permission.Action[])","isCellAuthorizationEnabled(Connection)","revoke(Connection, TableName, String, byte[], byte[], Permission.Action[])","getUserPermissions(Connection, String)","grant(Connection, String, boolean, Permission.Action[])","revoke(Connection, String, String, Permission.Action[])","grant(Connection, String, String, Permission.Action[])"],"org.apache.hadoop.hbase.regionserver.AbstractMultiFileWriter":["commitWriters(long, boolean)","preCloseWriter(StoreFileWriter)","init(StoreScanner, WriterFactory)","abortWriters()","beforeShipped()","preCommitWriters()"],"org.apache.hadoop.hbase.ipc.SimpleServerRpcConnection":["read4Bytes()","createCall(int, BlockingService, MethodDescriptor, RequestHeader, Message, CellScanner, long, InetAddress, int, CallCleanup)","setLastContact(long)","channelDataRead(ReadableByteChannel, ByteBuff)","initByteBuffToReadInto(int)","process()","readAndProcess()","readPreamble()","isIdle()","isConnectionOpen()","doRespond(RpcResponse)","incRpcCount()","decRpcCount()","getLastContact()","close()"],"org.apache.hadoop.hbase.regionserver.MetricsRegionWrapperImpl.HRegionMetricsWrapperRunnable":["run()"],"org.apache.hadoop.hbase.io.hfile.LruBlockCache":["calculateOverhead(long, long, int)","getBlockCaches()","assertCounterSanity(long, long)","singleSize()","isEvictionInProgress()","updateSizeMetrics(LruCachedBlock, boolean)","getCachedFileNamesForTest()","getFreeSize()","heapSize()","cacheBlock(BlockCacheKey, Cacheable, boolean)","evictBlock(LruCachedBlock, boolean)","getBlockCount()","getStats()","logStats()","getEncodingCountsForTest()","getCurrentSize()","getDataBlockCount()","getBlockTypeCountsForTest()","getOverhead()","getMaxSize()","getMapForTests()","toString()","getCurrentDataSize()","getEvictionThread()","acceptableSize()","shutdown()","memorySize()","evict()","setVictimCache(BlockCache)","containsBlock(BlockCacheKey)","clearCache()","evictBlocksByHfileName(String)","multiSize()","iterator()","setMaxSize(long)","cacheBlock(BlockCacheKey, Cacheable)","minSize()","runEviction()","evictBlock(BlockCacheKey)","getBlock(BlockCacheKey, boolean, boolean, boolean)","size()"],"org.apache.hadoop.hbase.ipc.RpcServer":["getMinSizeForReservoirUse(ByteBufferPool)","setRsRpcServices(RSRpcServices)","getRemoteIp()","getServiceInterface(List, String)","refreshAuthManager(PolicyProvider)","getServiceAndInterface(List, String)","getRemoteAddress()","getConf()","call(RpcCall, MonitoredRPCHandler)","getScheduler()","getRequestUser()","getService(List, String)","getSecretManager()","getStatus()","addCallSize(long)","createSecretManager()","isInRpcCallContext()","setSecretManager(SecretManager)","isStarted()","channelIO(ReadableByteChannel, WritableByteChannel, ByteBuffer)","initReconfigurable(Configuration)","setErrorHandler(HBaseRPCErrorHandler)","authorize(UserGroupInformation, ConnectionHeader, InetAddress)","getRequestUserName()","channelRead(ReadableByteChannel, ByteBuffer)","onConfigurationChange(Configuration)","allocateByteBuffToReadInto(ByteBufferPool, int, int)","getErrorHandler()","getMetrics()","getCurrentCall()","truncateTraceLog(String)","logResponse(Message, String, String, String, String, long, int, int, long)"],"org.apache.hadoop.hbase.master.replication.ModifyPeerProcedure":["enablePeerBeforeFinish()","suspend(long)","getState(int)","releaseLatch()","executeFromState(MasterProcedureEnv, PeerModificationState)","refreshPeer(MasterProcedureEnv, PeerOperationType)","getNewPeerConfig()","enablePeer(MasterProcedureEnv)","needReopen(TableStateManager, TableName)","nextStateAfterRefresh()","getOldPeerConfig()","getInitialState()","needSetLastPushedSequenceId(TableStateManager, TableName)","setLastPushedSequenceId(MasterProcedureEnv, ReplicationPeerConfig)","rollbackState(MasterProcedureEnv, PeerModificationState)","reopenRegions(MasterProcedureEnv)","getStateId(PeerModificationState)","setLastPushedSequenceIdForTable(MasterProcedureEnv, TableName, Map)","setTimeoutFailure(MasterProcedureEnv)","addToMap(Map, String, long, ReplicationQueueStorage)","updateLastPushedSequenceIdForSerialPeer(MasterProcedureEnv)"],"org.apache.hadoop.hbase.master.ClusterStatusPublisher.MulticastPublisher":["connect(Configuration)","publish(ClusterMetrics)","close()"],"org.apache.hadoop.hbase.io.hfile.HFileBlock.Writer":["getOnDiskSizeWithoutHeader()","getEncodingState()","beforeShipped()","write(Cell)","getBlockForCaching(CacheConfig)","expectState(State)","putHeader(byte[], int, int, int, int)","cloneUncompressedBufferWithHeader()","ensureBlockReady()","blockSizeWritten()","release()","encodedBlockSizeWritten()","finishBlock()","startWriting(BlockType)","getUncompressedSizeWithoutHeader()","getUncompressedSizeWithHeader()","writeBlock(BlockWritable, FSDataOutputStream)","cloneOnDiskBufferWithHeader()","getHeaderAndDataForTest()","putHeader(ByteArrayOutputStream, int, int, int)","finishBlockAndWriteHeaderAndData(DataOutputStream)","writeHeaderAndData(FSDataOutputStream)","getOnDiskSizeWithHeader()","isWriting()","getUserDataStream()"],"org.apache.hadoop.hbase.master.MetaFixer":["getRegionInfoWithLargestEndKey(RegionInfo, RegionInfo)","getHoleCover(Pair)","fix()","buildRegionInfo(TableName, byte[], byte[])","calculateMerges(int, List)","isOverlap(RegionInfo, Pair)","fixHoles(CatalogJanitor.Report)","fixOverlaps(CatalogJanitor.Report)"],"org.apache.hadoop.hbase.regionserver.HRegion":["preProcess(RowProcessor, WALEdit)","requestCompaction(byte[], String, int, boolean, CompactionLifeCycleTracker)","flush(boolean)","getRegionDir(Path, String)","getMemStoreFlushSize()","checkMutationType(Mutation, byte[])","computeHDFSBlocksDistribution(Configuration, TableDescriptor, RegionInfo, Path)","openReadOnlyFileSystemHRegion(Configuration, FileSystem, Path, RegionInfo, TableDescriptor)","getTableDescriptor()","doAbortFlushToWAL(WAL, long, Map)","replayWALRegionEventMarker(RegionEventDescriptor)","equals(Object)","getHDFSBlocksDistribution()","rowIsInRange(RegionInfo, byte[], int, short)","getFilesystem()","refreshStoreFiles()","increment(Increment)","processRowsWithLocks(RowProcessor, long, long)","increment(Increment, long, long)","getCellComparator()","instantiateRegionScanner(Scan, List, long, long)","getReadRequestsCount()","close(boolean)","decrementCompactionsQueuedCount()","getScanner(Scan, List)","getWriteRequestsCount()","processRowsWithLocks(RowProcessor, long, long, long)","replayRecoveredEditsForPaths(long, FileSystem, NavigableSet, CancelableProgressable, Path)","getMemStoreHeapSize()","closeRegionOperation(Operation)","checkResources()","heapSize()","requestFlush0(FlushLifeCycleTracker)","replayRecoveredEditsIfAny(Map, CancelableProgressable, MonitoredTask)","registerService(com.google.protobuf.Service)","hashCode()","writeRegionCloseMarker(WAL)","restoreEdit(HStore, Cell, MemStoreSizing)","openHRegion(HRegion, CancelableProgressable)","getStoreFileList(byte[][])","getReplicationScope()","incMemStoreSize(long, long, long, int)","checkSplit()","getRowLock(byte[], boolean)","applyToMemStore(HStore, Cell, MemStoreSizing)","createRegionDir(Configuration, RegionInfo, Path)","getStore(Cell)","initializeRegionInternals(CancelableProgressable, MonitoredTask)","initialize(CancelableProgressable)","internalFlushCacheAndCommit(WAL, MonitoredTask, PrepareFlushResult, Collection)","onConfigurationChange(Configuration)","internalFlushcache(MonitoredTask)","checkReadsEnabled()","logFatLineOnFlush(Collection, long)","compactStore(byte[], ThroughputController)","warmupHRegion(RegionInfo, TableDescriptor, WAL, Configuration, RegionServerServices, CancelableProgressable)","isLoadingCfsOnDemandDefault()","hasMultipleColumnFamilies(Collection)","forceSplit(byte[])","lock(Lock, int)","getRowLockInternal(byte[], boolean, RowLock)","throwException(String, String)","setTableDescriptor(TableDescriptor)","getStoreFileOpenAndCloseThreadPool(String)","logRegionFiles()","replayFlushInStores(FlushDescriptor, PrepareFlushResult, boolean)","instantiateHStore(ColumnFamilyDescriptor)","getEffectiveDurability(Durability)","shouldFlushStore(HStore)","getMVCC()","getMemStoreDataSize()","getCompactionState()","setTimeoutForWriteLock(long)","batchMutate(Mutation[], long, long)","unblockUpdates()","recordMutationWithoutWal(Map)","checkFamilies(Collection)","getBaseConf()","doClose(boolean, MonitoredTask)","batchMutate(Mutation[], boolean, long, long)","getMemStoreOffHeapSize()","setCoprocessorHost(RegionCoprocessorHost)","bulkLoadHFiles(Collection, boolean, BulkLoadListener, boolean, List, boolean)","mutateRowsWithLocks(Collection, Collection, long, long)","requestFlush(FlushLifeCycleTracker)","getLockedRows()","startRegionOperation(Operation)","getCheckAndMutateChecksFailed()","openHRegion(Configuration, FileSystem, Path, Path, RegionInfo, TableDescriptor, WAL, RegionServerServices, CancelableProgressable)","initialize()","requestCompaction(String, int, boolean, CompactionLifeCycleTracker)","matches(CompareOperator, int)","compactStores()","doDropStoreMemStoreContentsForSeqId(HStore, long)","openHRegion(Path, RegionInfo, TableDescriptor, WAL, Configuration, RegionServerServices, CancelableProgressable)","openHRegion(CancelableProgressable)","incMemStoreSize(MemStoreSize)","prepareDeleteTimestamps(Mutation, Map, byte[])","checkEncryption()","writeRegionOpenMarker(WAL, long)","getCompactPriority()","checkReadOnly()","batchMutate(BatchOperation)","startBulkRegionOperation(boolean)","isFlushSize(MemStoreSize)","getScanner(Scan, List, long, long)","replayWALFlushStartMarker(FlushDescriptor)","getReadPoint(IsolationLevel)","getRegionServicesForStores()","isMergeable()","doWALAppend(WALEdit, Durability, List, long, long, long, long)","execService(com.google.protobuf.RpcController, CoprocessorServiceCall)","compact(CompactionContext, HStore, ThroughputController)","prepareDelete(Delete)","getWAL()","flushcache(boolean, boolean, FlushLifeCycleTracker)","dropPrepareFlushIfPossible()","decorateRegionConfiguration(Configuration)","reportCompactionRequestFailure()","doRegionCompactionPrep()","processRowsWithLocks(RowProcessor)","openHRegion(Configuration, FileSystem, Path, RegionInfo, TableDescriptor, WAL)","addRegionToSnapshot(SnapshotDescription, ForeignExceptionSnare)","get(Get)","updateDeleteLatestVersionTimestamp(Cell, Get, int, byte[])","replayRecoveredEdits(Path, Map, CancelableProgressable, FileSystem)","shouldForceSplit()","getStoreOpenAndCloseThreadPool(String)","checkTimestamps(Map, long)","updateCellTimestamps(Iterable, byte[])","get(Get, boolean, long, long)","incrementCompactionsQueuedCount()","setReadsEnabled(boolean)","doCheckAndRowMutate(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, RowMutations, Mutation)","closeRegionOperation()","getRegionInfo()","replayWALFlushCommitMarker(FlushDescriptor)","startRegionOperation()","setHTableSpecificConf()","worthPreFlushing()","getReadPoint()","checkAndMutate(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, Mutation)","doCoprocessorPreCall(Operation, Mutation)","decrMemStoreSize(long, long, long, int)","compact(CompactionContext, HStore, ThroughputController, User)","replayWALCompactionMarker(CompactionDescriptor, boolean, boolean, long)","reckonDelta(Cell, Cell, byte[], long, Mutation, Function)","get(Get, boolean)","checkNegativeMemStoreDataSize(long, long)","registerChildren(ConfigurationManager)","getWALRegionDir()","getScanner(Scan)","reportCompactionRequestEnd(boolean, int, long)","openHRegion(Configuration, FileSystem, Path, RegionInfo, TableDescriptor, WAL, RegionServerServices, CancelableProgressable)","shouldSyncWAL()","getSplitPolicy()","append(Append, long, long)","replayWALFlushMarker(FlushDescriptor, long)","rowIsInRange(RegionInfo, byte[])","initializeWarmup(CancelableProgressable)","isSplittable()","updateSequenceId(Iterable, long)","waitForFlushesAndCompactions()","openHRegion(RegionInfo, TableDescriptor, WAL, Configuration)","getBlockedRequestsCount()","instantiateRegionScanner(Scan, List)","openHRegion(Region, CancelableProgressable)","requestFlushIfNeeded()","getDataInMemoryWithoutWAL()","newHRegion(Path, WAL, FileSystem, Configuration, RegionInfo, TableDescriptor, RegionServerServices)","doProcessRowWithTimeout(RowProcessor, long, HRegion, List, WALEdit, long)","getOldestHfileTs(boolean)","setClosing(boolean)","getLongValue(Cell)","replayWALBulkLoadEventMarker(WALProtos.BulkLoadDescriptor)","getOpenSeqNum()","reckonDeltas(Operation, Mutation, Durability, Map, List)","close()","getOldestSeqIdOfStore(byte[])","getCheckAndMutateChecksPassed()","checkCompressionCodecs()","decrMemStoreSize(MemStoreSize)","batchMutate(Mutation[])","getRegionServerServices()","dropMemStoreContents()","createHRegion(RegionInfo, Path, Configuration, TableDescriptor, WAL)","getFilteredReadRequestsCount()","dropMemStoreContentsForSeqId(long, HStore)","getRegionFileSystem()","internalPrepareFlushCache(WAL, long, Collection, MonitoredTask, boolean, FlushLifeCycleTracker)","isClosed()","getPrepareFlushResult()","computeHDFSBlocksDistribution(Configuration, TableDescriptor, RegionInfo)","shouldFlush(StringBuilder)","prepareGet(Get)","getMaxStoreSeqId()","getMetrics()","getWalFileSystem()","reckonDeltasByStore(HStore, Operation, Mutation, Durability, long, List, List)","internalFlushcache(Collection, MonitoredTask, boolean, FlushLifeCycleTracker)","getEarliestFlushTimeForAllStores()","sort(List, CellComparator)","doDelta(Operation, Mutation, long, long, boolean)","requestFlush()","rewriteCellTags(Map, Mutation)","doBatchMutate(Mutation)","setCompleteSequenceId(RegionLoad.Builder)","doWALAppend(WALEdit, Durability, List, long, long, long)","isAllFamilies(Collection)","getCoprocessorHost()","isZeroLengthThenDelete(FileSystem, Path)","append(Append)","doWALAppend(WALEdit, Durability, long, long)","getOpenAndCloseThreadPool(int, String)","checkRow(byte[], String)","lock(Lock)","put(Put)","bulkLoadHFiles(Collection, boolean, BulkLoadListener)","hasReferences()","getStores()","getLoadStatistics()","waitForFlushes(long)","blockUpdates()","getMaxFlushedSeqId()","toString()","mutateRow(RowMutations)","getRowLock(byte[])","deregisterChildren(ConfigurationManager)","put(byte[], byte[], List)","sync(long, Durability)","waitForFlushes()","getReadLockCount()","checkClassLoading()","internalFlushcache(WAL, long, Collection, MonitoredTask, boolean, FlushLifeCycleTracker)","getNumMutationsWithoutWAL()","getStoreFiles()","get(Mutation, HStore, List, IsolationLevel, TimeRange)","clearSplit()","writeFlushRequestMarkerToWAL(WAL, boolean)","doSyncOfUnflushedWALChanges(WAL, RegionInfo)","replayWALFlushCannotFlushMarker(FlushDescriptor, long)","isClosing()","incrementFlushesQueuedCount()","delete(Delete)","createHRegion(RegionInfo, Path, Configuration, TableDescriptor, WAL, boolean)","delete(NavigableMap, Durability)","checkFamily(byte[])","isReadOnly()","openHRegion(Path, RegionInfo, TableDescriptor, WAL, Configuration)","applyToMemStore(HStore, List, boolean, MemStoreSizing)","refreshStoreFiles(boolean)","initializeStores(CancelableProgressable, MonitoredTask)","doMiniBatchMutate(BatchOperation)","getRegionWALFileSystem()","checkAndRowMutate(byte[], byte[], byte[], CompareOperator, ByteArrayComparable, TimeRange, RowMutations)","checkTargetRegion(byte[], String, Object)","getSmallestReadPoint()","closeBulkRegionOperation()","batchReplay(MutationReplay[], long)","replayWALFlushAbortMarker(FlushDescriptor)","releaseRowLocks(List)","getStore(byte[])","areWritesEnabled()","metricsUpdateForGet(List, long)","getExplicitSplitPoint()","openHRegion(RegionInfo, TableDescriptor, WAL, Configuration, RegionServerServices, CancelableProgressable)","isAvailable()","reportCompactionRequestStart(boolean)","compact(boolean)","getNextSequenceId(WAL)"],"org.apache.hadoop.hbase.regionserver.MetricsTableWrapperAggregateImpl.TableMetricsWrapperRunnable":["run()"],"org.apache.hadoop.hbase.io.hfile.HFileReaderImpl":["loadFileInfo()","getFileContext()","indexSize()","getBloomFilterMetadata(BlockType)","getPathOffsetEndStr(Path, long, long)","length()","getFirstKey()","getConf()","getEffectiveEncodingInCache(boolean)","getDataBlockIndexReader()","getScanner(boolean, boolean, boolean)","getCachedBlock(BlockCacheKey, boolean, boolean, boolean, boolean, BlockType, DataBlockEncoding)","getName()","unbufferStream()","returnBlock(HFileBlock)","getMetaBlock(String, boolean)","validateBlockType(HFileBlock, BlockType)","getCompressionAlgorithm()","getEntries()","getFirstRowKey()","getPath()","close()","readBlock(long, long, boolean, boolean, boolean, boolean, BlockType, DataBlockEncoding)","toString()","getGeneralBloomFilterMetadata()","getDeleteBloomFilterMetadata()","shouldIncludeMemStoreTS()","hasMVCCInfo()","checkFileVersion()","setConf(Configuration)","prefetchComplete()","getScanner(boolean, boolean)","toStringLastKey()","isDecodeMemStoreTS()","isFileInfoLoaded()","toStringFirstKey()","getLastRowKey()","createHFileContext(FSDataInputStreamWrapper, long, HFileSystem, Path, FixedFileTrailer)","getComparator()","getDataBlockEncoding()","getLastKey()","close(boolean)","midKey()","isPrimaryReplicaReader()","getMajorVersion()","getTrailer()","getUncachedBlockReader()"],"org.apache.hadoop.hbase.regionserver.wal.AbstractFSWAL":["appendEntry(W, FSWALEntry)","tellListenersAboutPreLogRoll(Path, Path)","postAppend(Entry, long)","postSync(long, int)","getCoprocessorHost()","startCacheFlush(byte[], Map)","findRegionsToForceFlush()","getFilenum()","getNumRolledLogFiles()","usage()","isLogRollRequested()","split(Configuration, Path)","completeCacheFlush(byte[])","toString()","shutdown()","atHeadOfRingBufferEventHandlerAppend()","getOldPath()","getNewPath()","logRollAndSetupWalProps(Path, Path, long)","getFileNumFromFileName(Path)","ensureIOException(Throwable)","convertInterruptedExceptionToIOException(InterruptedException)","rollWriter()","blockOnSync(SyncFuture)","getEarliestMemStoreSeqNum(byte[], byte[])","archiveLogFile(Path)","getLogFileSize()","getCurrentFileName()","computeFilename(long)","appendData(RegionInfo, WALKeyImpl, WALEdit)","unregisterWALActionsListener(WALActionsListener)","isUnflushedEntries()","rollWriter(boolean)","cleanOldLogs()","getFiles()","getLogFileSizeIfBeingWritten(Path)","getNumLogFiles()","replaceWriter(Path, Path, W)","checkLogLowReplication(long)","getEarliestMemStoreSeqNum(byte[])","main(String[])","close()","appendMarker(RegionInfo, WALKeyImpl, WALEdit)","getWALArchivePath(Path, Path)","requestLogRoll(boolean)","startCacheFlush(byte[], Set)","abortCacheFlush(byte[])","calculateMaxLogFiles(Configuration, long)","requestLogRoll()","tellListenersAboutPostLogRoll(Path, Path)","updateStore(byte[], byte[], Long, boolean)","getUnflushedEntriesCount()","getPreallocatedEventCount()","registerWALActionsListener(WALActionsListener)","stampSequenceIdAndPublishToRingBuffer(RegionInfo, WALKeyImpl, WALEdit, boolean, RingBuffer)","getSyncFuture(long, boolean)","init()"],"org.apache.hadoop.hbase.replication.regionserver.ReplicationLoad":["getReplicationLoadSink()","buildReplicationLoad(List, MetricsSink)","sourceToString()","toString()","sinkToString()","calculateReplicationDelay(long, long, int)","getReplicationLoadSourceList()"],"org.apache.hadoop.hbase.security.token.TokenUtil":["getAuthToken(Configuration, User)","injectFault()","getClusterId(Token)","obtainToken(Connection)","toToken(AuthenticationProtos.Token)","toToken(Token)","addTokenIfMissing(Connection, User)","obtainAndCacheToken(Connection, User)","addTokenForJob(Connection, JobConf, User)","obtainTokenForJob(Connection, JobConf, User)","obtainToken(Connection, User)","obtainToken(Configuration)","obtainTokenForJob(Connection, User, Job)","addTokenForJob(Connection, User, Job)"],"org.apache.hadoop.hbase.security.access.AccessControlUtil":["toUserPermission(AccessControlProtos.UserPermission)","grant(RpcController, AccessControlService.BlockingInterface, String, TableName, byte[], byte[], boolean, Permission.Action[])","toUsersAndPermissions(String, Permission)","toPermission(Permission)","toUserTablePermissions(ListMultimap)","revoke(RpcController, AccessControlService.BlockingInterface, String, TableName, byte[], byte[], Permission.Action[])","buildRevokeRequest(String, TableName, byte[], byte[], AccessControlProtos.Permission.Action[])","toUsersAndPermissions(AccessControlProtos.UsersAndPermissions)","getUserPermissions(RpcController, AccessControlService.BlockingInterface, TableName)","grant(RpcController, AccessControlService.BlockingInterface, String, boolean, Permission.Action[])","revoke(RpcController, AccessControlService.BlockingInterface, String, String, Permission.Action[])","getUserPermissions(RpcController, AccessControlService.BlockingInterface)","toPermissionAction(AccessControlProtos.Permission.Action)","revoke(RpcController, AccessControlService.BlockingInterface, String, Permission.Action[])","buildGrantRequest(String, TableName, byte[], byte[], boolean, AccessControlProtos.Permission.Action[])","buildRevokeRequest(String, AccessControlProtos.Permission.Action[])","buildGrantRequest(String, String, boolean, AccessControlProtos.Permission.Action[])","toUserPermission(UserPermission)","getUserPermissions(RpcController, AccessControlService.BlockingInterface, byte[])","grant(RpcController, AccessControlService.BlockingInterface, String, String, boolean, Permission.Action[])","toUserTablePermissions(AccessControlProtos.UsersAndPermissions)","buildGetUserPermissionsResponse(List)","toPermissionAction(Permission.Action)","buildRevokeRequest(String, String, AccessControlProtos.Permission.Action[])","toPermission(AccessControlProtos.Permission)","toUsersAndPermissions(ListMultimap)","buildGrantRequest(String, boolean, AccessControlProtos.Permission.Action[])","toTablePermission(AccessControlProtos.Permission)","toPermissionActions(List)"],"org.apache.hadoop.hbase.master.assignment.AssignProcedure":["toStringClassDetails(StringBuilder)","remoteCallFailed(MasterProcedureEnv, RegionStateNode, IOException)","getTableOperationType()","updateTransition(MasterProcedureEnv, RegionStateNode)","getServer(MasterProcedureEnv)","incrementAndCheckMaxAttempts(MasterProcedureEnv, RegionStateNode)","reportTransition(MasterProcedureEnv, RegionStateNode, TransitionCode, long)","remoteCallBuild(MasterProcedureEnv, ServerName)","finishTransition(MasterProcedureEnv, RegionStateNode)","handleFailure(MasterProcedureEnv, RegionStateNode)","isRollbackSupported(RegionTransitionState)","getProcedureMetrics(MasterProcedureEnv)","deserializeStateData(ProcedureStateSerializer)","serializeStateData(ProcedureStateSerializer)","assign(MasterServices, RegionInfo)","assign(MasterServices, RegionStateNode)","startTransition(MasterProcedureEnv, RegionStateNode)"],"org.apache.hadoop.hbase.regionserver.AbstractMemStore":["add(Iterable, MemStoreSizing)","upsert(Iterable, long, MemStoreSizing)","toString()","getSnapshot()","getConfiguration()","dump(Logger)","timeOfOldestEdit()","add(Cell, MemStoreSizing)","deepCopyIfNeeded(Cell)","maybeCloneWithAllocator(Cell, boolean)","setOldestEditTimeToNow()","addToScanners(List, long, List)","upsert(Cell, long, MemStoreSizing)","getComparator()","addToScanners(Segment, long, List)","getNextRow(Cell, NavigableSet)","internalAdd(Cell, boolean, MemStoreSizing)","resetActive()","getSnapshotSize()","getActive()","getLowest(Cell, Cell)","clearSnapshot(long)"],"org.apache.hadoop.hbase.quotas.RegionServerRpcQuotaManager":["checkQuota(Region, List)","checkQuota(Region, int, int, int)","start(RpcScheduler)","stop()","checkQuota(Region, OperationQuota.OperationType)","getQuotaCache()","getQuota(UserGroupInformation, TableName)","isQuotaEnabled()"],"org.apache.hadoop.hbase.master.assignment.MoveRegionProcedure":["toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","waitInitialized(MasterProcedureEnv)","getState(int)","getTableOperationType()","rollbackState(MasterProcedureEnv, MoveRegionState)","getInitialState()","getTableName()","executeFromState(MasterProcedureEnv, MoveRegionState)","getStateId(MoveRegionState)","deserializeStateData(ProcedureStateSerializer)","getPlan()","serializeStateData(ProcedureStateSerializer)"],"org.apache.hadoop.hbase.ipc.BlockingRpcConnection":["processResponseForConnectionHeader()","negotiateCryptoAes(RPCProtos.CryptoCipherMeta)","writeConnectionHeader()","writeConnectionHeaderPreamble(OutputStream)","disposeSasl()","shutdown()","sendRequest(Call, HBaseRpcController)","setupSaslConnection(InputStream, OutputStream)","handleSaslConnectionFailure(int, int, Exception, UserGroupInformation)","closeSocket()","run()","writeRequest(Call)","callTimeout(Call)","isActive()","setupIOstreams()","waitForWork()","readResponse()","tracedWriteRequest(Call)","handleConnectionFailure(int, int, IOException)","setupConnection()","closeConn(IOException)","cleanupConnection()"],"org.apache.hadoop.hbase.master.procedure.RSProcedureDispatcher":["splitAndResolveOperation(ServerName, Set, RemoteProcedureResolver)","buildOpenRegionRequest(MasterProcedureEnv, ServerName, List)","getUncaughtExceptionHandler()","stop()","abortPendingOperations(ServerName, Set)","serverRemoved(ServerName)","start()","serverAdded(ServerName)","remoteDispatch(ServerName, Set)"],"org.apache.hadoop.hbase.security.token.FsDelegationToken":["acquireDelegationToken(FileSystem)","releaseDelegationToken()","getUserToken()","getRenewer()","getFileSystem()","getUserProvider()"],"org.apache.hadoop.hbase.replication.regionserver.RegionReplicaReplicationEndpoint.RegionReplicaSinkWriter":["append(TableName, byte[], byte[], List)"],"org.apache.hadoop.hbase.regionserver.HStoreFile":["markCompactedAway()","getQualifiedPath()","isBulkLoadResult()","open()","getFirstKey()","isSkipResetSeqId(byte[])","getMinimumTimestamp()","isCompactedAway()","getRefCount()","createStreamReader(boolean)","isMajorCompactionResult()","toStringDetailed()","getReader()","getCacheConf()","getMetadataValue(byte[])","getModificationTimestamp()","initReader()","deleteStoreFile()","isHFile()","closeStoreFile(boolean)","getPath()","getEncodedPath()","getMaxMemStoreTS()","getMaxSequenceId()","isReferencedInReads()","getStreamScanner(boolean, boolean, boolean, long, long, boolean)","toString()","getPreadScanner(boolean, long, long, boolean)","excludeFromMinorCompaction()","closeStreamReaders(boolean)","getBulkLoadTimestamp()","getComparator()","getFileInfo()","getHDFSBlockDistribution()","getLastKey()","getMaximumTimestamp()","storeFileReaderClosed(StoreFileReader)","getModificationTimeStamp()","isReference()"],"org.apache.hadoop.hbase.snapshot.SnapshotDescriptionUtils":["getWorkingSnapshotDir(SnapshotDescription, Path)","readSnapshotInfo(FileSystem, Path)","completeSnapshot(SnapshotDescription, Path, Path, FileSystem)","getCompletedSnapshotDir(SnapshotDescription, Path)","isSecurityAvailable(Configuration)","validate(SnapshotDescription, Configuration)","writeAclToSnapshotDescription(SnapshotDescription, Configuration)","getWorkingSnapshotDir(String, Path)","writeSnapshotInfo(SnapshotDescription, Path, FileSystem)","getMaxMasterTimeout(Configuration, SnapshotDescription.Type, long)","getCompletedSnapshotDir(Path, String)","getSnapshotRootDir(Path)","isSnapshotOwner(org.apache.hadoop.hbase.client.SnapshotDescription, User)","getWorkingSnapshotDir(Path)","getCompletedSnapshotDir(String, Path)","getSnapshotsDir(Path)"],"org.apache.hadoop.hbase.master.procedure.ServerCrashProcedure":["toStringClassDetails(StringBuilder)","abort(MasterProcedureEnv)","rollbackState(MasterProcedureEnv, ServerCrashState)","getState(int)","getServerOperationType()","acquireLock(MasterProcedureEnv)","getStateId(ServerCrashState)","getInitialState()","splitLogs(MasterProcedureEnv)","getProcedureMetrics(MasterProcedureEnv)","isYieldBeforeExecuteFromState(MasterProcedureEnv, ServerCrashState)","deserializeStateData(ProcedureStateSerializer)","processMeta(MasterProcedureEnv)","serializeStateData(ProcedureStateSerializer)","handleRIT(MasterProcedureEnv, List)","shouldWaitClientAck(MasterProcedureEnv)","executeFromState(MasterProcedureEnv, ServerCrashState)","filterDefaultMetaRegions(List)","isDefaultMetaRegion(RegionInfo)","splitMetaLogs(MasterProcedureEnv)","releaseLock(MasterProcedureEnv)","hasMetaTableRegion()","getServerName()"],"org.apache.hadoop.hbase.security.access.ShadedAccessControlUtil":["toPermissionAction(Permission.Action)","toUserTablePermissions(org.apache.hadoop.hbase.shaded.protobuf.generated.AccessControlProtos.UsersAndPermissions)","toUserPermission(org.apache.hadoop.hbase.shaded.protobuf.generated.AccessControlProtos.UserPermission)","toPermissionAction(org.apache.hadoop.hbase.shaded.protobuf.generated.AccessControlProtos.Permission.Action)","toTableName(HBaseProtos.TableName)","toPermission(Permission)","toUserTablePermissions(ListMultimap)","toTablePermission(AccessControlProtos.Permission)","toProtoTableName(TableName)","toPermissionActions(List)"],"org.apache.hadoop.hbase.regionserver.handler.WALSplitterHandler":["process()"],"org.apache.hadoop.hbase.snapshot.SnapshotReferenceUtil":["verifySnapshot(Configuration, FileSystem, SnapshotManifest)","visitRegionStoreFiles(SnapshotRegionManifest, StoreFileVisitor)","verifyStoreFile(Configuration, FileSystem, Path, SnapshotDescription, RegionInfo, String, SnapshotRegionManifest.StoreFile)","getHFileNames(Configuration, FileSystem, Path)","visitTableStoreFiles(Configuration, FileSystem, Path, SnapshotDescription, StoreFileVisitor)","verifySnapshot(Configuration, FileSystem, Path, SnapshotDescription)","visitReferencedFiles(Configuration, FileSystem, Path, SnapshotDescription, SnapshotVisitor)","concurrentVisitReferencedFiles(Configuration, FileSystem, SnapshotManifest, ExecutorService, StoreFileVisitor)","visitReferencedFiles(Configuration, FileSystem, Path, SnapshotVisitor)","concurrentVisitReferencedFiles(Configuration, FileSystem, SnapshotManifest, String, StoreFileVisitor)","getHFileNames(Configuration, FileSystem, Path, SnapshotDescription)"]}